name: Setup Copilot Agent Environment

on:
  workflow_dispatch:
    inputs:
      setup_type:
        description: 'Type of setup to perform'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - testing
          - full
  push:
    branches:
      - main
    paths:
      - '.github/copilot-instructions.md'
      - '.cursor/rules/**'
      - 'CLAUDE.md'
      - '.github/workflows/copilot-setup.yml'

jobs:
  setup-copilot-environment:
    name: Setup Copilot Agent Environment
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch full history for better Copilot context
          fetch-depth: 0
      
      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          # Use the same Rust version as specified in rust-toolchain file
          toolchain: stable
          components: rustfmt, clippy
          cache: true
      
      - name: Install development dependencies
        run: |
          # Install common development tools that Copilot might need
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libssl-dev \
            libsasl2-dev \
            libcurl4-openssl-dev \
            postgresql-client \
            cmake \
            protobuf-compiler
      
      - name: Setup RiseDev environment
        run: |
          # Make risedev executable and set up basic environment
          chmod +x ./risedev
          echo "Setting up RiseDev environment for Copilot Agent"
          
          # Create necessary directories
          mkdir -p .risingwave/log
          mkdir -p .risingwave/config
          
          # Set environment variables for development
          echo "RISINGWAVE_CI=true" >> $GITHUB_ENV
          echo "RISEDEV_ENABLE_ALL_IN_ONE=true" >> $GITHUB_ENV
      
      - name: Validate project structure
        run: |
          echo "Validating RisingWave project structure..."
          
          # Check key files exist
          test -f Cargo.toml || (echo "Cargo.toml not found" && exit 1)
          test -f risedev.yml || (echo "risedev.yml not found" && exit 1)
          test -f .github/copilot-instructions.md || (echo "Copilot instructions not found" && exit 1)
          test -f CLAUDE.md || (echo "CLAUDE.md not found" && exit 1)
          
          # Check source directories
          test -d src || (echo "src directory not found" && exit 1)
          test -d e2e_test || (echo "e2e_test directory not found" && exit 1)
          
          echo "Project structure validation completed successfully"
      
      - name: Setup Copilot context files
        run: |
          echo "Setting up Copilot context files..."
          
          # Ensure Copilot instructions are properly formatted
          if [ -f .github/copilot-instructions.md ]; then
            echo "✓ Copilot instructions file exists"
            wc -l .github/copilot-instructions.md
          fi
          
          # Check cursor rules
          if [ -d .cursor/rules ]; then
            echo "✓ Cursor rules directory exists"
            ls -la .cursor/rules/
          fi
          
          # Verify CLAUDE.md
          if [ -f CLAUDE.md ]; then
            echo "✓ CLAUDE.md exists"
            head -10 CLAUDE.md
          fi
      
      - name: Test basic build (development setup)
        if: ${{ github.event.inputs.setup_type == 'development' || github.event.inputs.setup_type == 'full' }}
        run: |
          echo "Testing basic build capabilities..."
          
          # Check if risedev can be invoked
          ./risedev --help
          
          # Attempt a quick syntax check
          cargo check --workspace --all-targets --quiet
          
          echo "Basic build test completed"
      
      - name: Run code quality checks (testing setup)
        if: ${{ github.event.inputs.setup_type == 'testing' || github.event.inputs.setup_type == 'full' }}
        run: |
          echo "Running code quality checks..."
          
          # Run clippy for basic lint checking
          ./risedev c --no-fix || echo "Clippy found some issues (expected in CI)"
          
          # Check formatting
          cargo fmt --all --check || echo "Formatting issues found (expected in CI)"
          
          echo "Code quality checks completed"
      
      - name: Create environment summary
        run: |
          echo "## Copilot Agent Environment Setup Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Environment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Rust version**: $(rustc --version)" >> $GITHUB_STEP_SUMMARY
          echo "- **Cargo version**: $(cargo --version)" >> $GITHUB_STEP_SUMMARY
          echo "- **Setup type**: ${{ github.event.inputs.setup_type || 'automatic' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Available Files for Copilot Context" >> $GITHUB_STEP_SUMMARY
          echo "- ✓ GitHub Copilot Instructions (.github/copilot-instructions.md)" >> $GITHUB_STEP_SUMMARY
          echo "- ✓ Claude.md development guidance" >> $GITHUB_STEP_SUMMARY
          echo "- ✓ Cursor rules (build-run-test.mdc, coding-style.mdc)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quick Start Commands" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo './risedev b    # Build the project' >> $GITHUB_STEP_SUMMARY
          echo './risedev c    # Check code quality' >> $GITHUB_STEP_SUMMARY
          echo './risedev d    # Run development instance' >> $GITHUB_STEP_SUMMARY
          echo './risedev k    # Stop instance' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          echo "Environment setup completed successfully!"