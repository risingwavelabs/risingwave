disallowed-methods = [
    { path = "std::iter::Iterator::zip", reason = "Please use `zip_eq_fast` if it's available. Otherwise use `zip_eq_debug`" },
    { path = "itertools::Itertools::zip_eq", reason = "Please use `zip_eq_fast` if it's available. Otherwise use `zip_eq_debug`" },
    { path = "futures::stream::select_all", reason = "Please use `risingwave_common::util::select_all` instead." },
    { path = "std::panic::catch_unwind", reason = "Please use `risingwave_common::util::panic::rw_catch_unwind` instead." },
    { path = "futures::FutureExt::catch_unwind", reason = "Please use `risingwave_common::util::panic::FutureCatchUnwindExt::rw_catch_unwind` instead." },
    { path = "num_traits::sign::Signed::is_positive", reason = "This returns true for 0.0 but false for 0." },
    { path = "num_traits::sign::Signed::is_negative", reason = "This returns true for -0.0 but false for 0." },
    { path = "num_traits::sign::Signed::signum", reason = "This returns 1.0 for 0.0 but 0 for 0." },
    { path = "speedate::DateTime::parse_str", reason = "Please use `parse_str_rfc3339` instead." },
    { path = "speedate::DateTime::parse_bytes", reason = "Please use `parse_bytes_rfc3339` instead." },
    { path = "speedate::DateTime::parse_bytes_with_config", reason = "Please use `parse_bytes_rfc3339_with_config` instead." },
    { path = "speedate::Date::parse_str", reason = "Please use `parse_str_rfc3339` instead." },
    { path = "speedate::Date::parse_bytes", reason = "Please use `parse_bytes_rfc3339` instead." },
    { path = "tonic::transport::Endpoint::connect", reason = "Please use `EndpointExt::monitored_connect` instead." },
    { path = "tonic::transport::Endpoint::connect_lazy", reason = "Please use `EndpointExt::monitored_connect_lazy` instead." },
]
disallowed-types = [
    { path = "num_traits::AsPrimitive", reason = "Please use `From` or `TryFrom` with `OrderedFloat` instead." },
    { path = "num_traits::FromPrimitive", reason = "Please use `From` or `TryFrom` with `OrderedFloat` instead." },
    { path = "num_traits::ToPrimitive", reason = "Please use `From` or `TryFrom` with `OrderedFloat` instead." },
    { path = "num_traits::NumCast", reason = "Please use `From` or `TryFrom` with `OrderedFloat` instead." },
    { path = "aws_smithy_types::error::display::DisplayErrorContext", reason = "Please use `thiserror_ext::AsReport` instead." },
    { path = "iceberg::Error", reason = "Please use `risingwave_common::error::IcebergError` instead." },
]
disallowed-macros = [
    { path = "lazy_static::lazy_static", reason = "Please use `std::sync::LazyLock` instead." },
]
doc-valid-idents = [
    "RisingWave",
    "MinIO",
    "ProtoBuf",
    "BloomFilter",
    "gRPC",
    "PostgreSQL",
    "MySQL",
    "TopN",
    "VNode",
    "IPv4",
]
avoid-breaking-exported-api = false
upper-case-acronyms-aggressive = true
too-many-arguments-threshold = 10
ignore-interior-mutability = [
    "risingwave_frontend::expr::ExprImpl" # XXX: Where does ExprImpl have interior mutability?
]
