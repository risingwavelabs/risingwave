- sql: |
    select 1 as k, 2 as v;
  expected_outputs:
    - batch_plan
- sql: select 'abc', 1, 1.4 as k from (select 1 as k, 2 from (select 1, 2 union all select 3, 4) union all select * from (select 3, 4) union all select 100, 200 from (select now(), now() - interval '1 hour'));
  expected_outputs:
    - batch_plan
# Test openai_embedding function with MaterializedExprs for impure function
- sql: |
    select id, value, openai_embedding('sk-test-key', 'text-embedding-3-small', value) as embedding
    from (values (1, 'hello'), (2, 'world')) as t(id, value);
  expected_outputs:
    - logical_plan
    - batch_plan
    - stream_plan
# Test mixed pure and impure expressions with openai_embedding
- sql: |
    select id, value, id + 1 as id_plus_one,
           openai_embedding('sk-test-key', 'text-embedding-3-small', value) as embedding,
           upper(value) as upper_value
    from (values (1, 'hello'), (2, 'world')) as t(id, value);
  expected_outputs:
    - logical_plan
    - batch_plan
    - stream_plan
- name: materialize impure expressions after singleton (top-n)
  sql: |
    create table t (v int);
    with cte as (select v from t order by v limit 10) select pg_sleep(v) from cte;
  expected_outputs:
    - stream_plan
    - stream_dist_plan
- name: materialized impure expressions after some-shard (full outer join), an exchange is required
  sql: |
    create table t1 (v int);
    create table t2 (v int);
    with cte as (select t1.v v from t1 full outer join t2 on t1.v = t2.v) select pg_sleep(v) from cte;
  expected_outputs:
    - stream_plan
    - stream_dist_plan
