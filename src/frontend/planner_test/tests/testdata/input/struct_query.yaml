- sql: |
    create materialized view t as select country from s;
    select * from t;
  create_source:
    format: plain
    encode: protobuf
    name: s
    file: |
      syntax = "proto3";
      package test;
      message TestRecord {
        int32 id = 1;
        Country country = 3;
        int64 zipcode = 4;
        float rate = 5;
      }
      message Country {
        string address = 1;
        City city = 2;
        string zipcode = 3;
      }
      message City {
        string address = 1;
        string zipcode = 2;
      }
  expected_outputs:
  - stream_plan
  - batch_plan
- sql: |
    create materialized view t as select * from s;
    -- select (t).country.city,(t).country,(country).city.address from t;
    select (t.country).city,t.country,(country).city.address from t;
  create_source:
    format: plain
    encode: protobuf
    name: s
    file: |
      syntax = "proto3";
      package test;
      message TestRecord {
        int32 id = 1;
        Country country = 3;
        int64 zipcode = 4;
        float rate = 5;
      }
      message Country {
        string address = 1;
        City city = 2;
        string zipcode = 3;
      }
      message City {
        string address = 1;
        string zipcode = 2;
      }
  expected_outputs:
  - logical_plan
- sql: |
    CREATE TABLE t (
      id INTEGER,
      country STRUCT<
        address VARCHAR,
        city STRUCT<address VARCHAR, zipcode VARCHAR>,
        zipcode VARCHAR
      >,
      zipcode BIGINT,
      rate FLOAT);
    -- select (t).country.city.*,(t.country).*,(country).city.* from t;
    select (t.country).city.*,(t.country).*,(country).city.* from t;
  expected_outputs:
  - logical_plan
- sql: |
    create materialized view t as select * from s;
    -- select (t).country1.city.*,(t.country2).*,(country3).city.* from t;
    select (t.country1).city.*,(t.country2).*,(country3).city.* from t;
  create_source:
    format: plain
    encode: protobuf
    name: s
    file: |
      syntax = "proto3";
      package test;
      message TestRecord {
        int32 id = 1;
        Country country1 = 3;
        Country country2 = 4;
        Country country3 = 5;
        int64 zipcode = 6;
        float rate = 7;
      }
      message Country {
        string address = 1;
        City city = 2;
        string zipcode = 3;
      }
      message City {
        string address = 1;
        string zipcode = 2;
      }
  expected_outputs:
  - logical_plan
- sql: |
    create materialized view t as select * from s;
    -- select (c).zipcode from (select (t).country.city as c from t);
    select (c).zipcode from (select (t.country).city as c from t);
  create_source:
    format: plain
    encode: protobuf
    name: s
    file: |
      syntax = "proto3";
      package test;
      message TestRecord {
        int32 id = 1;
        Country country = 3;
        int64 zipcode = 4;
        float rate = 5;
      }
      message Country {
        string address = 1;
        City city = 2;
        string zipcode = 3;
      }
      message City {
        string address = 1;
        string zipcode = 2;
      }
  expected_outputs:
  - logical_plan
- sql: |
    create materialized view t as select * from s;
    -- select (c).zipcode from (select min((t).country.city) as c from t);
    select (c).zipcode from (select min((t.country).city) as c from t);
  create_source:
    format: plain
    encode: protobuf
    name: s
    file: |
      syntax = "proto3";
      package test;
      message TestRecord {
        int32 id = 1;
        Country country = 3;
        int64 zipcode = 4;
        float rate = 5;
      }
      message Country {
        string address = 1;
        City city = 2;
        string zipcode = 3;
      }
      message City {
        string address = 1;
        string zipcode = 2;
      }
  expected_outputs:
  - logical_plan
- sql: |
    create materialized view t as select * from s;
    select * from (select (country).city as c from t) as vv join t on (c).zipcode=(t.country).zipcode;
  create_source:
    format: plain
    encode: protobuf
    name: s
    file: |
      syntax = "proto3";
      package test;
      message TestRecord {
        int32 id = 1;
        Country country = 3;
        int64 zipcode = 4;
        float rate = 5;
      }
      message Country {
        string address = 1;
        City city = 2;
        string zipcode = 3;
      }
      message City {
        string address = 1;
        string zipcode = 2;
      }
  expected_outputs:
  - logical_plan
- sql: |
    create materialized view t as select * from s;
    select min((t.country).city.address) + max((t.country).city.address) * count(zipcode) from t;
  create_source:
    format: plain
    encode: protobuf
    name: s
    file: |
      syntax = "proto3";
      package test;
      message TestRecord {
        int32 id = 1;
        Country country = 3;
        int64 zipcode = 4;
        float rate = 5;
      }
      message Country {
        string address = 1;
        City city = 2;
        string zipcode = 3;
      }
      message City {
        int64 address = 1;
        string zipcode = 2;
      }
  expected_outputs:
  - logical_plan
- sql: |
    create materialized view t as select * from s;
    select count(1), count((country).city.zipcode) from t where (country).city.address>1;
  create_source:
    format: plain
    encode: protobuf
    name: s
    file: |
      syntax = "proto3";
      package test;
      message TestRecord {
        int32 id = 1;
        Country country = 3;
        int64 zipcode = 4;
        float rate = 5;
      }
      message Country {
        string address = 1;
        City city = 2;
        string zipcode = 3;
      }
      message City {
        int64 address = 1;
        string zipcode = 2;
      }
  expected_outputs:
  - logical_plan
- sql: |
    create table t (v1 bigint, v2 double precision);
    select (v1).v2 from t;
  expected_outputs:
  - binder_error
- sql: |
    create materialized view t as select * from s;
    select (country + country) from t;
  create_source:
    format: plain
    encode: protobuf
    name: s
    file: |
      syntax = "proto3";
      package test;
      message TestRecord {
        int32 id = 1;
        Country country = 3;
        int64 zipcode = 4;
        float rate = 5;
      }
      message Country {
        string address = 1;
        string zipcode = 3;
      }
  expected_outputs:
  - binder_error
- sql: |
    create materialized view t as select * from s;
    select avg(country) from t;
  create_source:
    format: plain
    encode: protobuf
    name: s
    file: |
      syntax = "proto3";
      package test;
      message TestRecord {
        int32 id = 1;
        Country country = 3;
        int64 zipcode = 4;
        float rate = 5;
      }
      message Country {
        string address = 1;
        string zipcode = 3;
      }
  expected_outputs:
  - binder_error
- sql: |
    create materialized view t as select * from s;
    select (country).city from t;
  create_source:
    format: plain
    encode: protobuf
    name: s
    file: |
      syntax = "proto3";
      package test;
      message TestRecord {
        int32 id = 1;
        Country country = 3;
        int64 zipcode = 4;
        float rate = 5;
      }
      message Country {
        string address = 1;
        string zipcode = 3;
      }
  expected_outputs:
  - binder_error
- sql: |
    create materialized view t as select * from s;
    select (country).address.* from t;
  create_source:
    format: plain
    encode: protobuf
    name: s
    file: |
      syntax = "proto3";
      package test;
      message TestRecord {
        int32 id = 1;
        Country country = 3;
        int64 zipcode = 4;
        float rate = 5;
      }
      message Country {
        string address = 1;
        string zipcode = 3;
      }
  expected_outputs:
  - binder_error
- sql: |
    insert into s values (1,2,(1,2,(1,2,null)));
  create_table_with_connector:
    format: plain
    encode: protobuf
    name: s
    file: |
      syntax = "proto3";
      package test;
      message TestRecord {
        int32 v1 = 1;
        int32 v2 = 2;
        V v3 = 3;
      }
      message V {
        int32 v1 = 1;
        int32 v2 = 2;
        U v3 = 3;
      }
      message U {
        int32 v1 = 1;
        int32 v2 = 2;
        int32 v3 = 3;
      }
  expected_outputs:
  - logical_plan
- sql: |
    select * from s where s.v3 = (1,2,(1,2,3));
  create_table_with_connector:
    format: plain
    encode: protobuf
    name: s
    file: |-
      syntax = "proto3";
      package test;
      message TestRecord {
        int32 v1 = 1;
        int32 v2 = 2;
        V v3 = 3;
      }
      message V {
        int32 v1 = 1;
        int32 v2 = 2;
        U v3 = 3;
      }
      message U {
        int32 v1 = 1;
        int32 v2 = 2;
        int32 v3 = 3;
      }
  expected_outputs:
  - logical_plan
- sql: |
    CREATE TABLE a (c STRUCT<i STRUCT<a INTEGER>, j INTEGER>);
    INSERT INTO a VALUES (1);
  expected_outputs:
  - binder_error
- name: test struct type alignment in CASE expression
  sql: |
    select CASE WHEN false THEN ROW(0, INTERVAL '1') WHEN true THEN ROW(1.1, INTERVAL '1') ELSE ROW(1, INTERVAL '1') END;
  expected_outputs:
  - logical_plan
- name: struct column insert field number mismatches 1
  sql: |
    create table t (v struct<a int, b int>);
    insert into t values (ROW(1, 2, 3));
  expected_outputs:
  - binder_error
- name: struct column insert field number mismatches 2
  sql: |
    create table t (v struct<a int, b int>);
    insert into t values (ROW(1));
  expected_outputs:
  - binder_error
