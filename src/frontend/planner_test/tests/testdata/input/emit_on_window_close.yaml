- sql: |
    create table t (v1 int, v2 int, v3 int);
    select v1, min(v2), count(distinct v3) as agg from t group by v1;
  expected_outputs:
    - stream_plan
    - eowc_stream_error
- sql: |
    create source t (v1 int, v2 int, v3 int, watermark for v1 as v1 - 10) with (connector = 'kinesis') FORMAT PLAIN ENCODE JSON;
    select v1, min(v2), count(distinct v3) as agg from t group by v1;
  expected_outputs:
    - stream_plan
    - eowc_stream_dist_plan
    - eowc_stream_plan
- sql: |
    CREATE TABLE t (a TIMESTAMP, b INT, WATERMARK FOR a AS a - INTERVAL '5 minutes') APPEND ONLY;
    SELECT
        window_start, max(b)
    FROM tumble(t, a, INTERVAL '1 hour')
    GROUP BY window_start;
  expected_outputs:
    - eowc_stream_dist_plan
    - eowc_stream_plan
    - stream_plan
- sql: |
    create source t (a int, b int, tm timestamp, watermark for tm as tm - interval '5 minutes') with (connector = 'kinesis') FORMAT PLAIN ENCODE JSON;
    select lag(a, 2) over (partition by b order by tm) from t;
  expected_outputs:
    - eowc_stream_dist_plan
    - eowc_stream_plan
- sql: |
    create table t (tm timestamp, foo int, bar int, watermark for tm as tm - interval '5 minutes') append only;
    explain create sink s1 as
    select
      tm, foo, bar,
      lag(foo, 2) over (partition by bar order by tm),
      max(foo) over (partition by bar order by tm rows between 1 preceding and 1 following),
      sum(foo) over (partition by bar order by tm rows 2 preceding exclude current row)
    from t
    emit on window close
    WITH (connector = 'blackhole');
  expected_outputs:
    - explain_output
- sql: |
    CREATE table s1 (id int, value int, ts TIMESTAMP, WATERMARK FOR ts AS ts - INTERVAL '20' SECOND ) append only;
    CREATE table s2 (id int, value int, ts TIMESTAMP, WATERMARK FOR ts AS ts - INTERVAL '20' SECOND) append only;
    select *, count(*) over (partition by value2 order by ts2) from (
      SELECT s1.id AS id1,
      s1.value AS value1,
      s2.id AS id2,
      s2.value AS value2,
      s1.ts as ts1,
      s2.ts as ts2
      FROM s1 JOIN s2
      ON s1.id = s2.id and s1.ts >= s2.ts   and s1.ts - INTERVAL '1' MINUTE <= s2.ts
    );
  expected_outputs:
    - eowc_stream_plan
    - stream_plan
- sql: |
    CREATE table s1 (
    id VARCHAR,
    timestamp TIMESTAMP,
    WATERMARK FOR timestamp AS timestamp - INTERVAL '5' SECOND
    ) append only;
    SELECT
        id,
        window_start,
        window_end,
        MAX(timestamp) as ts
    FROM HOP(s1, timestamp, INTERVAL '30 SECONDS', INTERVAL '2 MINUTES')
    WHERE timestamp > NOW() - INTERVAL '7 hours'
    GROUP BY id, window_start, window_end;
  expected_outputs:
    - eowc_stream_plan
    - stream_plan