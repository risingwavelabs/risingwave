- name: Temporal filter works on complex columns on LHS
  sql: |
    create table t1 (ts timestamp with time zone);
    select * from t1 where ts + interval '1 hour' > now();
  expected_outputs:
    - stream_plan
- name: Temporal filter works on complex columns on LHS (part 2)
  sql: |
    create table t1 (ts timestamp with time zone, time_to_live interval);
    select * from t1 where ts + time_to_live * 1.5 > now();
  expected_outputs:
    - stream_plan
- name: Temporal filter works on complex columns on LHS (part 2, flipped)
  sql: |
    create table t1 (ts timestamp with time zone, additional_time_to_live interval);
    select * from t1 where now() - interval '15 minutes' < ts + additional_time_to_live * 1.5;
  expected_outputs:
    - stream_plan
- name: Temporal filter with `now()` in upper bound
  sql: |-
    create table t1 (ts timestamp with time zone);
    select * from t1 where now() - interval '15 minutes' > ts;
  expected_outputs:
    - stream_plan
    - stream_dist_plan
- name: Temporal filter with equal condition
  sql: |-
    create table t1 (ts timestamp with time zone);
    select * from t1 where date_trunc('week', now()) = date_trunc('week',ts);
  expected_outputs:
    - stream_plan
    - stream_dist_plan
- name: Temporal filter with `now()` in upper bound on append only table
  sql: |-
    create table t1 (ts timestamp with time zone) APPEND ONLY;
    select * from t1 where now() - interval '15 minutes' > ts;
  expected_outputs:
    - stream_plan
    - stream_dist_plan
- name: Temporal filter reorders now expressions correctly
  sql: |
    create table t1 (ts timestamp with time zone);
    select * from t1 where ts < now() - interval '1 hour' and ts >= now() - interval '2 hour';
  expected_outputs:
    - stream_plan
    - stream_dist_plan
- name: Temporal filter in on clause for inner join's left side
  sql: |
    create table t1 (a int, ta timestamp with time zone);
    create table t2 (b int, tb timestamp with time zone);
    select * from t1 join t2 on a = b AND ta < now() - interval '1 hour' and ta >= now() - interval '2 hour';
  expected_outputs:
    - stream_plan
- name: Temporal filter in on clause for left join's left side
  sql: |
    create table t1 (a int, ta timestamp with time zone);
    create table t2 (b int, tb timestamp with time zone);
    select * from t1 left join t2 on a = b AND ta < now() - interval '1 hour' and ta >= now() - interval '2 hour';
  expected_outputs:
    - stream_error
- name: Temporal filter in on clause for right join's left side
  sql: |
    create table t1 (a int, ta timestamp with time zone);
    create table t2 (b int, tb timestamp with time zone);
    select * from t1 right join t2 on a = b AND ta < now() - interval '1 hour' and ta >= now() - interval '2 hour';
  expected_outputs:
    - stream_plan
- name: Temporal filter in on clause for full join's left side
  sql: |
    create table t1 (a int, ta timestamp with time zone);
    create table t2 (b int, tb timestamp with time zone);
    select * from t1 full join t2 on a = b AND ta < now() - interval '1 hour' and ta >= now() - interval '2 hour';
  expected_outputs:
    - stream_error
- name: Temporal filter in on clause for left join's right side
  sql: |
    create table t1 (a int, ta timestamp with time zone);
    create table t2 (b int, tb timestamp with time zone);
    select * from t1 left join t2 on a = b AND tb < now() - interval '1 hour' and tb >= now() - interval '2 hour';
  expected_outputs:
    - stream_plan
- name: Temporal filter in on clause for right join's right side
  sql: |
    create table t1 (a int, ta timestamp with time zone);
    create table t2 (b int, tb timestamp with time zone);
    select * from t1 right join t2 on a = b AND tb < now() - interval '1 hour' and tb >= now() - interval '2 hour';
  expected_outputs:
    - stream_error
- name: Temporal filter after temporal join
  sql: |
    create table stream(id1 int, a1 int, b1 int, v1 timestamp with time zone) APPEND ONLY;
    create table version(id2 int, a2 int, b2 int, primary key (id2));
    select id1, a1, id2, v1 from stream left join version FOR SYSTEM_TIME AS OF PROCTIME() on id1 = id2 where v1 > now();
  expected_outputs:
    - stream_plan
- name: Temporal filter with or predicate
  sql: |
    create table t1 (ts timestamp with time zone);
    select * from t1 where ts + interval '1 hour' > now() or ts > ' 2023-12-18 00:00:00+00:00';
  expected_outputs:
    - stream_plan
- name: Temporal filter with or is null
  sql: |
    create table t1 (ts timestamp with time zone);
    select * from t1 where ts + interval '1 hour' > now() or ts is null;
  expected_outputs:
    - stream_plan
- name: Temporal filter with or predicate
  sql: |
    create table t1 (ts timestamp with time zone);
    select * from t1 where ts + interval '1 hour' > now() or ts > ' 2023-12-18 00:00:00+00:00' or ts is null;
  expected_outputs:
    - stream_plan
- name: Many Temporal filter with or predicate
  sql: |
    create table t (t timestamp with time zone, a int);
    select * from t where (t > NOW() - INTERVAL '1 hour' OR t is NULL OR a < 1) AND (t < NOW() - INTERVAL '1 hour' OR a > 1);
  expected_outputs:
    - stream_plan
- name: Non-trivial now expression
  sql: |
    create table t (ts timestamp with time zone, a int);
    select * from t where ts + interval '1 hour' > date_trunc('day', now());
  expected_outputs:
    - stream_plan
- name: Non-trivial now expression 2
  sql: |
    create table t (ts timestamp with time zone, a int);
    select * from t where ts + interval '1 hour' > date_trunc('day', ('2024-07-18 00:00:00+00:00'::timestamptz - ('2024-07-18 00:00:00+00:00'::timestamptz - now())));
  expected_outputs:
    - stream_plan
- name: Non-monotonic now expression
  sql: |
    create table t (ts timestamp with time zone, a int);
    select * from t where a > extract(hour from now());
  expected_outputs:
    - stream_error
- name: Temporal filter after singleton (top-n)
  sql: |
    create table t (a int, ta timestamp with time zone);
    with cte as (select * from t order by a limit 10) select * from cte where ta >= now() - interval '2 hour';
  expected_outputs:
    - stream_plan
    - stream_dist_plan
- name: Temporal filter after some-shard (full outer join), an exchange is required
  sql: |
    create table t1 (a int, ta timestamp with time zone);
    create table t2 (b int, tb timestamp with time zone);
    select * from t1 full outer join t2 on ta = tb where ta is null or ta >= now() - interval '2 hour';
  expected_outputs:
    - stream_plan
    - stream_dist_plan
