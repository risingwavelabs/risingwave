- id: create_table
  sql: |
    create table items (id int primary key, embedding vector(3));
  expected_outputs: []
- before:
    - create_table
  id: no_vector_search_with_offset
  sql: |
    SELECT * FROM items order by embedding <-> '[3,1,2]' limit 5 offset 1;
  expected_outputs:
    - logical_plan
    - optimized_logical_plan_for_batch
    - batch_plan
- before:
    - create_table
  sql: |
    SELECT * FROM items order by embedding <-> '[3,1,2]' limit 5;
  expected_outputs:
    - logical_plan
    - optimized_logical_plan_for_batch
    - batch_plan
- before:
  - create_table
  sql: |
    SELECT * FROM (select *, _rw_timestamp, embedding <-> '[3,1,2]' as distance from items) order by distance limit 5;
  expected_outputs:
      - logical_plan
      - optimized_logical_plan_for_batch
      - batch_plan
- before:
    - create_table
  sql: |
    SELECT * FROM (select distance, distance + 1 as distance_ref from (select *, _rw_timestamp, embedding <-> '[3,1,2]' as distance  from items)) order by distance limit 5;
  expected_outputs:
    - logical_plan
    - optimized_logical_plan_for_batch
    - batch_plan
- before:
    - create_table
  sql: |
    select count(*), id from (SELECT embedding, id FROM (select id, _rw_timestamp, embedding <=> '[3,1,2]' as distance, embedding  from items) order by distance limit 5) group by id;
  expected_outputs:
    - logical_plan
    - optimized_logical_plan_for_batch
    - batch_plan
- before:
    - create_table
  sql: |
    SELECT embedding, distance, id FROM (select id, _rw_timestamp, embedding <#> '[3,1,2]' as distance, embedding from items) order by distance limit 5;
  expected_outputs:
    - logical_plan
    - optimized_logical_plan_for_batch
    - batch_plan