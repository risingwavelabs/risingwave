- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select * from t1 where x > (select 1.5 * min(x) from t2 where t1.y=t2.y and t2.y = 1000)
  expected_outputs:
  - logical_plan
  - optimized_logical_plan_for_batch
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select * from t1 where x>(select min(x) from t2 where t2.y = (select t1.y))
  expected_outputs:
  - logical_plan
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(x int, y int);
    select * from t1 where x>(select min(x) from t2 where t1.y=t2.y and t1.x=(select max(x) from t3, (select 1) as dummy where t3.y=t1.y))
  expected_outputs:
  - logical_plan
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select * from t1 where exists(select * from t2 where y = 100 and t1.x = t2.x and x = 1000 and t1.y = t2.y);
  expected_outputs:
  - logical_plan
  - optimized_logical_plan_for_batch
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select * from t1 where x > (select 1.5 * min(x) from t2 where t1.y = t2.y);
  expected_outputs:
  - logical_plan
  - optimized_logical_plan_for_batch
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select * from t1 where x > (select count(*) from t2 where t1.y = t2.y);
  expected_outputs:
  - logical_plan
  - optimized_logical_plan_for_batch
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select * from t1 where x > (select count(*) + count(*) from t2 where t1.y = t2.y);
  expected_outputs:
  - optimized_logical_plan_for_batch
  - logical_plan
- name: 'Like `count(*)`, SimpleAgg also need to rewrite `array_agg` for the extra null row due to outer join #14735'
  sql: |
    create table t1(a int, b int);
    select a, (select array_agg(t1.a) filter (where t1.a is distinct from 1) from t1 where t1.a <> t.b) from t1 as t order by 1;
  expected_outputs:
  - logical_plan
  - optimized_logical_plan_for_batch
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select x from t1 where y in (select y from t2 where t1.x = t2.x);
  expected_outputs:
  - optimized_logical_plan_for_batch
  - logical_plan
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select x from t1 where y not in (select y from t2 where t1.x = t2.x);
  expected_outputs: []
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select x from t1 where y in (select y from t2 where t1.x + t2.x = 100 and t1.y = 1000);
  expected_outputs:
  - optimized_logical_plan_for_batch
  - logical_plan
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select x from t1 where y in (select y from t2 where t1.x > t2.x + 1000);
  expected_outputs:
  - logical_plan
  - optimized_logical_plan_for_batch
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select x from t1 where y in (select y, x from t2 where t1.x > t2.x + 1000);
  expected_outputs:
  - binder_error
- name: correlated outer subquery with an uncorrelated inner subquery
  sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(x int, y int);
    select x from t1 where y in (select x from t2 where t2.y = t1.y and x > (select min(x) from t3));
  expected_outputs:
  - optimized_logical_plan_for_batch
  - logical_plan
- name: correlated inner subquery with depth = 2
  sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(x int, y int);
    select x from t1 where y in (select x from t2 where y in (select y from t3 where t1.y = t3.y));
  expected_outputs:
  - logical_plan
- name: uncorrelated outer subquery with a correlated inner subquery
  sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(x int, y int);
    select x from t1 where y in (select x from t2 where y in (select y from t3 where t2.y = t3.y));
  expected_outputs:
  - logical_plan
  - optimized_logical_plan_for_batch
- name: correlated agg column in SELECT
  sql: |
    create table t (v1 int, v2 int);
    select min(v1), (select max(v2)) from t;
  expected_outputs:
  - planner_error
- name: correlated group column in SELECT
  sql: |
    create table t (v1 int, v2 int);
    select min(v1), (select v2) from t group by v2;
  expected_outputs:
  - planner_error
- name: correlated non-group column in SELECT
  sql: |
    create table t (v1 int, v2 int);
    select min(v1), (select v2) from t;
  expected_outputs:
  - planner_error
- name: correlated agg column in HAVING
  sql: |
    create table t (v1 int, v2 int);
    select 1 from t having min(v1) > (select max(v2));
  expected_outputs:
  - planner_error
- name: correlated group column in HAVING
  sql: |
    create table t (v1 int, v2 int);
    select 1 from t group by v2 having min(v1) > (select v2);
  expected_outputs:
  - planner_error
- name: correlated non-group column in HAVING
  sql: |
    create table t (v1 int, v2 int);
    select 1 from t having min(v1) > (select v2);
  expected_outputs:
  - planner_error
- name: correlated agg column belongs to outer query
  sql: |
    create table t (v1 int, v2 int);
    create table t2 (v3 int, v4 int);
    select
      min(v1),
      (select max(v2) + v3 from t2)  -- access to v3 is ok
    from t;
  expected_outputs:
  - planner_error
- name: uncorrelated subquery in HAVING
  sql: |
    create table a (a1 int, a2 int);
    create table b (b1 int, b2 int);
    create table c (c1 int, c2 int);
    select 1 from a having exists (
      select 1 from b where exists (
        select b1 from c
      )
    );
  expected_outputs:
  - logical_plan
- name: correlated column with depth=2 in HAVING
  sql: |
    create table a (a1 int, a2 int);
    create table b (b1 int, b2 int);
    create table c (c1 int, c2 int);
    select 1 from a having exists (
      select 1 from b where exists (
        select a1 from c
      )
    );
  expected_outputs:
  - planner_error
- name: correlated column with depth>1 in HAVING
  sql: |
    create table a (a1 int, a2 int);
    create table b (b1 int, b2 int);
    create table c (c1 int, c2 int);
    select 1 from a where exists (
      select 1 from b having exists (
        select a1 from c
      )
    );
  expected_outputs:
  - optimized_logical_plan_for_batch
- sql: |
    create table a (a1 int, a2 int);
    create table b (b1 int, b2 int);
    create table c (c1 int, c2 int);
    select 1 from a where exists (select (select a1 from c ), min(b1) from b );
  expected_outputs:
  - optimizer_error
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select t2.x, (select x from t1 where t1.y = t2.y) from t2 where x > 100 order by t2.x limit 100;
  expected_outputs:
  - optimizer_error
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select * from t1 where exists(select x from t2 where t1.x = t2.x and t1.y = t2.y)
  expected_outputs:
  - optimized_logical_plan_for_batch
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(x int, y int);
    select * from t1, t2 where exists(select x from t3 where t3.x = t1.x and t3.y <> t2.y);
  expected_outputs:
  - optimized_logical_plan_for_batch
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(x int, y int);
    select * from t1, t2 where exists(select x from t3 where t3.x = t2.y and t3.y = t1.x);
  expected_outputs:
  - optimized_logical_plan_for_batch
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(x int, y int);
    create table t4(x int, y int, z int);
    select * from t1, t2, t3 where exists(select x from t4 where t4.x = t2.y and t4.y = t1.x and t4.z = t3.x);
  expected_outputs:
  - optimized_logical_plan_for_batch
- sql: |
    create table a(a1 int, a2 int, a3 int);
    create table b(b1 int, b2 int, b3 int);
    create table c(c1 int, c2 int, c3 int);
    select count(*) from a, b where a3 = b2 and 3 = (select count(*) from c where b2 = c2 and a3 = c3);
  expected_outputs:
  - logical_plan
  - optimized_logical_plan_for_batch
- sql: |
    create table a(x int, y int, z int);
    create table b(x int, y int, z int);
    select count(*) from a where a.x=3 and a.y = (select count(*) from b where b.z = a.z and a.x = 3);
  expected_outputs:
  - optimized_logical_plan_for_batch
- sql: |
    create table a(x int, y int, z int);
    create table b(x int, y int, z int);
    select count(*) from a where a.x=3 and a.y = (select count(*) from b where b.z = a.z);
  expected_outputs:
  - optimized_logical_plan_for_batch
- sql: |
    create table a(x int, y varchar, z int);
    create table b(x varchar, y int, z int);
    select count(*) from a where a.y = (select string_agg(x, ',' order by x) from b where b.z = a.z);
  expected_outputs:
  - optimized_logical_plan_for_batch
- sql: |
    create table a(x int, y int, z int);
    create table b(x int, y int, z int);
    select count(*) from a where a.y = (select count(distinct x) from b where b.z = a.z);
  expected_outputs:
  - optimized_logical_plan_for_batch
- sql: |
    create table a(x int, y int, z int);
    create table b(x int, y int, z int);
    select count(*) from a where a.y = (select count(x) filter(where x < 100) from b where b.z = a.z);
  expected_outputs:
  - optimized_logical_plan_for_batch
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(x int, y int);
    select * from t1 where exists(select x from t2 where t1.x = t2.x and t2.y in (select t3.y from t3 where t1.x = t3.x));
  expected_outputs:
  - optimized_logical_plan_for_batch
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(x int, y int);
    select * from t1 where exists(select t2.x from t2 join t3 on t2.x = t3.x and t1.y = t2.y and t1.y = t3.y);
  expected_outputs:
  - optimized_logical_plan_for_batch
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select * from t1 where t1.y in (select t1.y from t2 where t1.x = t2.x);
  expected_outputs:
  - optimized_logical_plan_for_batch
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(x int, y int);
    select * from t1 where not exists(select x from t2 where t1.x = t2.x and t2.y not in (select t3.y from t3 where t1.x = t3.x));
  expected_outputs:
  - optimized_logical_plan_for_batch
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(x int, y int);
    select * from t1 where exists(select t2.x from t2 left join t3 on t2.x = t3.x and t1.y = t2.y and t1.y = t3.y);
  expected_outputs:
  - optimized_logical_plan_for_batch
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(x int, y int);
    select * from t1 where exists(select t2.x from t2 right join t3 on t2.x = t3.x and t1.y = t2.y and t1.y = t3.y);
  expected_outputs:
  - optimized_logical_plan_for_batch
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(x int, y int);
    select * from t1 where exists(select t2.x from t2 full join t3 on t2.x = t3.x and t1.y = t2.y and t1.y = t3.y);
  expected_outputs:
  - optimized_logical_plan_for_batch
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(x int, y int);
    select * from t1 where exists(select x from t2 where t1.x = t2.x and t2.y in (select t3.y + t2.y from t3 where t1.x = t3.x));
  expected_outputs:
  - optimized_logical_plan_for_batch
- sql: |
    create table t1 (a int, b int);
    create table t2 (b int, c int);
    select a, (select t1.a), c from t1, t2 where t1.b = t2.b order by c;
  expected_outputs:
  - optimized_logical_plan_for_batch
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(x int, y int);
    select * from t1 where exists(select t3.x from (select x,y from t2 where t1.y = t2.y) t2 join t3 on t2.x = t3.x);
  expected_outputs:
  - optimized_logical_plan_for_batch
- sql: |
    create table a (a1 int, a2 int);
    create table b (b1 int, b2 int);
    select * from a where a1 = (select min(b1) from (select * from b where b2 = a2) as z);
  expected_outputs:
  - optimized_logical_plan_for_batch
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select * from t1 where exists(select * from t2 where t1.x = t2.x order by x limit 1);
  expected_outputs:
  - batch_plan
  - stream_plan
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select t1.x, (select y from t2 where t2.y = t1.y) from t1;
  expected_outputs:
  - optimizer_error
- sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select t1.x, (select y from t2 where t2._row_id = t1._row_id) from t1;
  expected_outputs:
  - optimized_logical_plan_for_batch
- name: issue 4762 correlated input in agg order by
  sql: |
    CREATE TABLE strings(v1 VARCHAR);
    SELECT (SELECT STRING_AGG(v1, ',' ORDER BY t.v1) FROM strings) FROM strings AS t;
  expected_outputs:
  - optimized_logical_plan_for_batch
- name: issue 4762 correlated input in agg filter
  sql: |
    CREATE TABLE strings(v1 VARCHAR);
    SELECT (SELECT STRING_AGG(v1, ',') FILTER (WHERE v1 < t.v1) FROM strings) FROM strings AS t;
  expected_outputs:
  - optimized_logical_plan_for_batch
- name: issue 7574 correlated input in agg filter in having
  sql: |
    CREATE TABLE strings(v1 VARCHAR);
    SELECT (SELECT 1 FROM strings HAVING COUNT(v1) FILTER (WHERE t.v1 < 'b') > 2) FROM strings AS t;
  expected_outputs:
  - optimized_logical_plan_for_batch
- name: Existential join on outer join with correlated condition
  sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(a varchar, z int);
    select x from t1 where y in (select y from t3 full join t2 where t1.x = t2.x and z IS NOT DISTINCT FROM t2.x);
  expected_outputs:
  - optimized_logical_plan_for_batch
- name: Correlated condition in RHS of right outer join
  sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    create table t3(a varchar, z int);
    select x from t1 where y in (select y from t3 right join t2 where t1.x = t2.x and z IS NOT DISTINCT FROM t2.x);
  expected_outputs:
  - optimized_logical_plan_for_batch
- name: A correlated subquery contains union
  sql: |
    create table t1 (a int, b int);
    create table t2 (c int, d int);
    create table t3 (e int, f int);
    select * from t1 where exists (select * from t2 where t2.c = t1.a union all select * from t3 where t3.f = t1.b);
  expected_outputs:
  - optimized_logical_plan_for_batch
- name: A correlated subquery contains distinct on
  sql: |
    create table t1 (a int, b int);
    create table t2 (c int, d int);
    select * from t2 where exists (select distinct on(a) a from t1 where b = d);
  expected_outputs:
  - optimized_logical_plan_for_batch
- name: Separate the project from joins before pushing the apply operator down joins. https://github.com/risingwavelabs/risingwave/issues/10662
  sql: |
    create table t1 (a int, b int, other int);
    create table t2 (c int, d int, other int);
    create table t3 (e int, f int, other int);
    select * from t1 where exists (select t2.d, t3.f from t2 join t3 on t2.c = t3.e and t1.a = t2.c and t1.b = t3.e);
  expected_outputs:
  - optimized_logical_plan_for_batch
  - optimized_logical_plan_for_stream
- name: test ApplyTopNTransposeRule case 1
  sql: |
    create table t1 (v1 int, k1 int);
    create table t2 (v2 int, k2 int);
    select * from t1 where v1 in ( select v2 from t2 where k2 = k1 order by v2 limit 1);
  expected_outputs:
  - batch_plan
  - stream_plan
- name: test ApplyTopNTransposeRule case 2
  sql: |
    create table t1 (v1 int, k1 int);
    create table t2 (v2 int, k2 int);
    select * from t1 where v1 in ( select v2 from t2 order by v2 limit 1);
  expected_outputs:
  - batch_plan
  - stream_plan
- name: test ApplyLimitTransposeRule case 1
  sql: |
    create table t1 (v1 int, k1 int);
    create table t2 (v2 int, k2 int);
    select * from t1 where v1 in ( select v2 from t2 where k2 = k1 limit 1);
  expected_outputs:
  - batch_plan
  - stream_plan
- name: test correlated input ref predicate and share operator
  sql: |
    create table t (a int, b int, c int);
    create table dl(c1 int, c2 int);
    create table di(d1 int, d2 int);
    select (select 1 from t, di where t.a = dl.c1 and t.b = di.d1 limit 1) name, (select 1 from t, di where t.a = dl.c2 and t.c = di.d2 limit 1) name2 from dl;
  expected_outputs:
  - optimized_logical_plan_for_stream
- name: correlated array subquery
  sql: |
    create table t1 (a int, b int);
    create table t2 (c int, d int);
    select Array(select c from t2 where b = d) arr from t1;
  expected_outputs:
  - batch_plan
  - stream_plan
- name: correlated array subquery \du
  sql: |
    SELECT r.rolname, r.rolsuper, r.rolinherit,
      r.rolcreaterole, r.rolcreatedb, r.rolcanlogin,
      r.rolconnlimit, r.rolvaliduntil,
      ARRAY(SELECT b.rolname
            FROM pg_catalog.pg_auth_members m
            JOIN pg_catalog.pg_roles b ON (m.roleid = b.oid)
            WHERE m.member = r.oid) as memberof
    , r.rolreplication
    , r.rolbypassrls
    FROM pg_catalog.pg_roles r
    WHERE r.rolname !~ '^pg_'
    ORDER BY 1;
  expected_outputs:
    - batch_plan
- name: correlated array subquery (issue 14423)
  sql: |
    CREATE TABLE array_types ( x BIGINT[] );
    SELECT array(
      ((((((
        select t0.x
      ))))))
    )
    FROM array_types AS t0;
  expected_outputs:
    - batch_plan
- name: a case can't be optimized by PullUpCorrelatedPredicateAggRule
  sql: |
    CREATE TABLE T (A INT, B INT);
    CREATE TABLE T2 (C INT, D INT);
    SELECT * FROM T
    -- count is not null-propagating
    WHERE T.A > (SELECT COUNT(*) FROM T2 WHERE B = D);
  expected_outputs:
    - batch_plan
    - stream_plan
- name: a case could be optimized by PullUpCorrelatedPredicateAggRule
  sql: |
    CREATE TABLE T (A INT, B INT);
    CREATE TABLE T2 (C INT, D INT);
    SELECT * FROM T
    -- avg is null-propagating
    WHERE T.A > (SELECT avg(c) FROM T2 WHERE B = D);
  expected_outputs:
    - batch_plan
    - stream_plan
- name: a case can't be optimized by PullUpCorrelatedPredicateAggRule
  sql: |
    CREATE TABLE T (A INT, B INT);
    CREATE TABLE T2 (C INT, D INT);
    SELECT * FROM T
    -- Coalesce is not null-propagating
    WHERE T.A > (SELECT coalesce(avg(c), 114514) FROM T2 WHERE B = D);
  expected_outputs:
    - batch_plan
    - stream_plan
- name: a case can't be optimized by PullUpCorrelatedPredicateAggRule
  sql: |
    CREATE TABLE T (A INT, B INT);
    CREATE TABLE T2 (C INT, D INT);
    SELECT * FROM T
    -- Can apply if any of the conjunction is null
    WHERE null AND T.A > (SELECT coalesce(avg(c), 114514) FROM T2 WHERE B = D);
  expected_outputs:
    - batch_plan
    - stream_plan
- name: improve multi scalar subqueries optimization time. issue 16952. case 1.
  sql: |
    create table t1(a int, b int);
    create table t2(c int primary key, d int);
    select
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col1,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col2,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col3,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col4,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col5,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col6,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col7,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col8,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col9,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col10,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col11,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col12,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col13,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col14,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col15,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col16,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col17,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col18
    from t1;
  expected_outputs:
    - batch_plan
    - stream_plan
- name: improve multi scalar subqueries optimization time. issue 16952. case 2.
  sql: |
    create table t1(a int, b int);
    create table t2(c int primary key, d int);
    create table t3(e int, f int);
    create table t4(g int, h int);
    create table t5(i int, j int);
    create table t6(k int, l int);
    select
    COALESCE((SELECT sum(d) FROM t2 left join t3 on e = a and f = c left join t4 on g = a and h = c left join t5 on i = a and j = c WHERE t1.a = t2.c and t1.a = t2.c and j in (select k from t6 where b = l) ), 0) col1,
    COALESCE((SELECT sum(d) FROM t2 left join t3 on e = a and f = c left join t4 on g = a and h = c left join t5 on i = a and j = c WHERE t1.a = t2.c and t1.a = t2.c and j in (select k from t6 where b = l) ), 0) col2,
    COALESCE((SELECT sum(d) FROM t2 left join t3 on e = a and f = c left join t4 on g = a and h = c left join t5 on i = a and j = c WHERE t1.a = t2.c and t1.a = t2.c and j in (select k from t6 where b = l) ), 0) col3,
    COALESCE((SELECT sum(d) FROM t2 left join t3 on e = a and f = c left join t4 on g = a and h = c left join t5 on i = a and j = c WHERE t1.a = t2.c and t1.a = t2.c and j in (select k from t6 where b = l) ), 0) col4,
    COALESCE((SELECT sum(d) FROM t2 left join t3 on e = a and f = c left join t4 on g = a and h = c left join t5 on i = a and j = c WHERE t1.a = t2.c and t1.a = t2.c and j in (select k from t6 where b = l) ), 0) col5,
    COALESCE((SELECT sum(d) FROM t2 left join t3 on e = a and f = c left join t4 on g = a and h = c left join t5 on i = a and j = c WHERE t1.a = t2.c and t1.a = t2.c and j in (select k from t6 where b = l) ), 0) col6
    from t1;
  expected_outputs:
    - batch_plan
    - stream_plan
- name: improve join transpose rule to handle join with output indices
  sql: |
    with rawdata as (
      select 'first' as w, '{"x":{"value":123},"y":{"value":[1,2,3]},"z":{"value":[{"a":4,"b":5},{"a":6,"b":7}]}}'::jsonb as rawjson
      union all
      select 'second', '{"x":{"value":456},"y":{"value":[7,8,9]},"z":{"value":[{"a":0,"b":1},{"a":2,"b":3}]}}'::jsonb
    )
    select
      array(
        select
          array(
            select 1
            from jsonb_array_elements(
              case
                when jsonb_typeof(o.value->'value') = 'array' then o.value->'value'
                else '[]'::jsonb
              end
            ) with ordinality as x(v, i), jsonb_each (
              case
                when jsonb_typeof(v) = 'object' then v
                else '{}'::jsonb
              end
            ) as j
        )
        from jsonb_each(rawjson) AS o
        where jsonb_typeof(o.value) = 'object' and o.value ? 'value'
      ) as kv
    from rawdata
  expected_outputs:
    - optimized_logical_plan_for_batch
- name: subquery with CTE
  sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select * from t1 where t1.x = ( with cte as (select * from t2 where t2.y = t1.y)  select x from cte limit 1);
  expected_outputs:
    - batch_plan
    - stream_plan