- sql: |
    create table t1 (v1 int, v2 int);
    create table t2 (v3 int, v4 int);
    create table t3 (v5 int, v6 int);
    select * from t1, t2, t3 where t1.v1 = t2.v3 and t1.v1 = t3.v5;
  expected_outputs:
  - logical_plan
  - stream_plan
- name: unaligned join
  sql: |
    set streaming_enable_unaligned_join=true;
    create table t1 (v1 int, v2 int);
    create table t2 (v3 int, v4 int);
    create table t3 (v5 int, v6 int);
    select * from t1, t2, t3 where t1.v1 = t2.v3 and t1.v1 = t3.v5;
  expected_outputs:
  - logical_plan
  - stream_plan
- name: self join
  sql: |
    create table t (v1 int, v2 int);
    select t1.v1 as t1v1, t2.v1 as t2v1 from t t1 join t t2 on t1.v1 = t2.v1;
  expected_outputs:
  - logical_plan
  - stream_plan
- sql: |
    create table t1 (v1 int, v2 int);
    create table t2 (v1 int, v2 int);
    create table t3 (v1 int, v2 int);
    select t1.v1 as t1_v1, t1.v2 as t1_v2, t2.v1 as t2_v1, t2.v2 as t2_v2, t3.v1 as t3_v1, t3.v2 as t3_v2 from t1 join t2 on (t1.v1 = t2.v1) join t3 on (t2.v2 = t3.v2);
  expected_outputs:
  - batch_local_plan
  - batch_plan
  - stream_plan
- sql: |
    create table t1 (v1 int, v2 int);
    create table t2 (v1 int, v2 int);
    select t1.v2 as t1_v2, t2.v2 as t2_v2 from t1 join t2 on t1.v1 = t2.v1;
  expected_outputs:
  - stream_plan
  - batch_plan
  - batch_local_plan
- sql: |
    create table t1 (v1 int, v2 int);
    create table t2 (v1 int, v2 int);
    select t1.v2 as t1_v2, t2.v2 as t2_v2 from t1 join t2 on t1.v1 > t2.v1 and t1.v2 < 10;
  expected_outputs:
  - batch_local_plan
  - batch_plan
- sql: |
    create table t1 (v1 int, v2 int);
    create table t2 (v1 int, v3 int);
    select * from t1 join t2 using(v1);
  expected_outputs:
  - batch_plan
- sql: |
    create table ab (a int, b int);
    create table bc (b int, c int);
    create table ca (c int, a int);
    select * from ab join bc using(b) join ca using(c);
  expected_outputs:
  - batch_plan
- name: Left & right has same SomeShard distribution. There should still be exchanges below hash join
  sql: |
    create table t(x int);
    create index i on t(x);
    select i.x as ix, ii.x as iix from i join i as ii on i.x=ii.x;
  expected_outputs:
  - stream_plan
  - batch_plan
- name: Left & right has same SomeShard distribution. There should still be exchanges below hash join
  sql: |
    create table t(x int);
    create index i on t(x);
    select i.x as ix, t.x as tx from i join t on i.x=t.x;
  expected_outputs:
  - batch_plan
  - stream_plan
- name: Left & right has same HashShard distribution. There should be no exchange below hash join
  sql: |
    create table t(x int);
    create index i on t(x);
    select * from
      (select * from i join i as ii using (x)) t1
    full join
      (select * from i join i as ii using (x)) t2
    using (x);
  expected_outputs:
  - batch_plan
  - stream_plan
- name: Use lookup join
  sql: |
    create table t1 (v1 int, v2 int);
    create table t2 (v1 int, v2 int);
    create materialized view t3 as select v1, count(v2) as v2 from t2 group by v1;
    select * from t1 cross join t3 where t1.v2 = t3.v1;
  with_config_map:
    QUERY_MODE: local
    RW_BATCH_ENABLE_LOOKUP_JOIN: 'true'
  expected_outputs:
  - batch_local_plan
- name: Ensure correct binding of join with USING clause
  sql: |
    create table t1(v1 varchar);
    create table t2(v1 varchar);
    create table t3(v2 varchar);
    select * from t3, t1 join t2 using (v1);
  expected_outputs:
  - logical_plan
- name: Ensure correct binding of join with ON clause
  sql: |
    create table t1(v1 varchar);
    create table t2(v2 varchar);
    create table t3(v3 varchar);
    select * from t3, t1 join t2 on v1 = v2;
  expected_outputs:
  - logical_plan
- name: Ensure correct binding with USING clause with left outer join
  sql: |
    create table t1(v1 varchar);
    create table t2(v1 varchar);
    create table t3(v2 varchar);
    select * from t3, t1 left join t2 using (v1);
  expected_outputs:
  - logical_plan
- name: Ensure correct binding with ON clause with left outer join
  sql: |
    create table t1(v1 varchar);
    create table t2(v2 varchar);
    create table t3(v3 varchar);
    select * from t3, t1 left join t2 on v1 = v2;
  expected_outputs:
  - logical_plan
- name: Ensure that ON clause cannot reference correlated columns
  sql: |
    create table a(a1 int);
    create table b(b1 int);
    create table c(c1 int);
    select * from a, b join c on a1 + b1 = c1;
  expected_outputs:
  - binder_error
- sql: |
    create table a(a1 int);
    create table b(b1 int);
    select * from a cross join lateral (select * from b where a1 = b1);
  expected_outputs:
  - logical_plan
- name: Ensure that natural joins bind the correct columns
  sql: |
    create table a(x int);
    create table b(x int);
    create table c(y int);
    select * from a natural join b natural join c;
  expected_outputs:
  - logical_plan
- name: Ensure that natural joins can disambiguate columns
  sql: |
    create table a(x int);
    create table b(x int);
    select x, a.x, b.x from a natural join b;
  expected_outputs:
  - logical_plan
- name: Ensure that natural joins bind the correct columns
  sql: |
    create table a(x int);
    create table b(x int);
    create table c(y int);
    select * from a natural join b natural join c;
  expected_outputs:
  - logical_plan
- name: Ensure that natural joins can disambiguate columns
  sql: |
    create table a(x int);
    create table b(x int);
    select x, a.x, b.x from a natural join b;
  expected_outputs:
  - logical_plan
- name: Ensure that natural joins bind the correct columns
  sql: |
    create table a(x int);
    create table b(x int);
    create table c(y int);
    select * from a natural join b natural join c;
  expected_outputs:
  - logical_plan
- name: Ensure that natural joins bind the correct columns
  sql: |
    create table a(x int);
    create table b(x int);
    select x from a natural join b;
  expected_outputs:
  - logical_plan
- name: Ensure that natural joins bind the correct columns
  sql: |
    create table a(x int);
    create table b(x int);
    select x from a natural left join b;
  expected_outputs:
  - logical_plan
- name: Ensure that natural joins bind the correct columns
  sql: |
    create table a(x int);
    create table b(x int);
    select x, a.x, b.x from a natural right join b;
  expected_outputs:
  - logical_plan
- name: Ensure that natural joins bind the correct columns
  sql: |
    create table a(x int);
    create table b(x int);
    select x, a.x, b.x from a natural full join b;
  expected_outputs:
  - logical_plan
- name: Ensure that natural joins work on materialized views
  sql: |
    create table t (a int, b int, c int);
    create materialized view mv1 as select *, lag(a) over (partition by c) out1 from t;
    create materialized view mv2 as select *, lead(b) over (partition by c) out2 from t;
    select * from mv1 natural join mv2;
  expected_outputs:
  - logical_plan
- name: Ensure that nested natural joins bind and disambiguate columns
  sql: |
    create table a(x int, y int);
    create table b(x int, z int);
    create table c(x int, a int);
    select x, a.x, b.x, c.x from a natural join b natural join c;
  expected_outputs:
  - logical_plan
- name: Ensure that nested natural joins bind and disambiguate columns
  sql: |
    create table a(x int, y int);
    create table b(x int, z int);
    create table c(x int, a int);
    select x, a.x, b.x, c.x from a natural full join b natural full join c;
  expected_outputs:
  - optimized_logical_plan_for_batch
  - logical_plan
- name: Ensure that nested natural joins bind and disambiguate columns
  sql: |
    create table a(a int, y int);
    create table b(x int, z int);
    create table c(x int, a int);
    select a, x, a.a, c.a, b.x, c.x from a natural full join b natural full join c;
  expected_outputs:
  - logical_plan
- name: Ensure error on non-existent USING col
  sql: |
    create table t1(v1 int, v2 int);
    create table t2(v1 int, v3 int);
    select * from t1 join t2 using (v2);
  expected_outputs:
  - binder_error
- name: Ensure error on non-existent USING col
  sql: |
    create table t1(v1 int, v2 int);
    create table t2(v1 int, v3 int);
    select * from t1 join t2 using (v3);
  expected_outputs:
  - binder_error
- name: Ensure that we can correctly bind nested joins
  sql: |
    create table t1(v1 int, v2 int);
    create table t2(v3 int, v4 int);
    create table t3(v5 int, v6 int);
    create table t4(v7 int, v8 int);
    select * from (t1 join t2 on v1=v3) full join (t3 join t4 on v5=v7) on v2=v6 and v4=v8;
  expected_outputs:
  - logical_plan
- name: Ensure that we can correctly bind nested joins with ambiguous column names
  sql: |
    create table t1(x int);
    create table t2(x int);
    create table t3(x int);
    select *, x, t1.x, t2.x, t3.x from t1 full join (t2 full join t3 using (x)) using (x);
  expected_outputs:
  - logical_plan
- name: Ensure that non-trivial ambiguous references can be resolved
  sql: |
    create table a(x int);
    create table b(x int);
    select 2 * x as Y, x + x as Z from a natural full join b where 2 * x < 10 order by x + x;
  expected_outputs:
  - logical_plan
  - stream_plan
  - batch_plan
- sql: |
    CREATE TABLE test (a INTEGER, b INTEGER);
    CREATE TABLE test2 (a INTEGER, c INTEGER);
    SELECT test.a, b, c FROM test, test2 WHERE test.a = test2.a AND test.b <> test2.c ORDER BY test.a;
  expected_outputs:
  - optimized_logical_plan_for_batch
  - batch_plan
  - logical_plan
- name: Use lookup join with predicate
  sql: |
    create table t1 (v1 int, v2 int);
    create table t2 (v1 int, v2 int);
    create materialized view t3 as select v1, count(v2) as v2 from t2 group by v1;
    select * from t1 cross join t3 where t1.v2 = t3.v1 and t3.v1 > 1;
  with_config_map:
    QUERY_MODE: local
    RW_BATCH_ENABLE_LOOKUP_JOIN: 'true'
  expected_outputs:
  - batch_local_plan
  - optimized_logical_plan_for_batch
- name: Use project to do the calculation
  sql: |
    create table t1(x int, y int);
    create table t2(x int, y int);
    select * from t1, t2 where t1.x + t1.y = t2.x + t2.y;
  expected_outputs:
  - optimized_logical_plan_for_batch
- name: Use project to align return types
  sql: |
    create table t1(x int, y int);
    create table t2(x int, y decimal);
    select * from t1, t2 where t1.x = t2.y;
  expected_outputs:
  - optimized_logical_plan_for_batch
- name: Lookup join with no eq keys after pulling up predicate will revert to hash join
  sql: |
    create table t1 (v1 int, v2 int);
    create table t2 (v1 int, v2 int);
    create materialized view t3 as select v1, count(v2) as v2 from t2 group by v1;
    select * from (select * from t1 where false) as t1_s join (select * from t3 where false) as t3_s on t1_s.v2 = t3_s.v1;
  expected_outputs:
  - batch_plan
- name: Able to join on `IS NOT DISTINCT FROM` on unequal but implicitly castable types
  sql: |
    create table t1 (v1 int);
    create table t2 (v2 bigint);
    select * from t1 join t2 on v1 IS NOT DISTINCT FROM v2;
  expected_outputs:
  - stream_plan
  - batch_plan
- name: Repeated columns in project should not interfere with join result (https://github.com/risingwavelabs/risingwave/issues/8216)
  sql: |
    create table t(x int);
    SELECT t.x x1, t.x x2 FROM t join t tt ON t.x=tt.x;
  expected_outputs:
  - stream_plan
- name: Choose correct distribution key in pk (https://github.com/risingwavelabs/risingwave/issues/7698)
  sql: |
    create table t (src int, dst int);
    select t1.src p1, t1.dst p2, t2.dst p3 from t t1, t t2, t t3 where t1.dst = t2.src and t2.src = t3.dst and t3.dst = t1.src;
  expected_outputs:
  - stream_plan
  - stream_dist_plan
- name: Force filter pushed down into join
  sql: |
    set streaming_force_filter_inside_join = true;
    create table t(v1 int, v2 int);
    create table t2(v3 int, v4 int);
    select * from t, t2 where t.v1 = t2.v3 and t.v2 > t2.v4 + 1000;
  expected_outputs:
  - batch_plan
  - stream_plan
- name: Pull up filter from join by default
  sql: |
    create table t(v1 int, v2 int);
    create table t2(v3 int, v4 int);
    select * from t, t2 where t.v1 = t2.v3 and t.v2 > t2.v4 + 1000;
  expected_outputs:
  - batch_plan
  - stream_plan
