- sql: |
    values(sum(1));
  expected_outputs:
  - binder_error
- sql: |
    values(count(1));
  expected_outputs:
  - binder_error
- sql: |
    values(min(1));
  expected_outputs:
  - binder_error
- sql: |
    values(1 + max(1));
  expected_outputs:
  - binder_error
- sql: |
    create table t (v1 int);
    select v1 from t where min(v1);
  expected_outputs:
  - binder_error
- sql: |
    create table t(v1 int, v2 int, v3 int);
    select v1, min(v2) + max(v3) * count(v1) as agg from t group by v1;
  expected_outputs:
  - stream_plan
  - batch_plan
  - batch_local_plan
- sql: |
    create table t(v1 int, v2 int, v3 int);
    select min(v1) + max(v2) * count(v3) as agg from t;
  expected_outputs:
  - batch_plan
  - batch_local_plan
  - stream_plan
- sql: |
    create table t(v1 int, v2 int);
    select v1 from t group by v2;
  expected_outputs:
  - planner_error
- sql: |
    create table t(v1 int, v2 int);
    select sum(v1), v1 from t group by v2, v2;
  expected_outputs:
  - planner_error
- sql: |
    create table t(v1 int, v2 int, v3 int);
    select v3, min(v1) * avg(v1+v2) as agg from t group by v3;
  expected_outputs:
  - batch_plan
  - batch_local_plan
  - stream_plan
- name: test logical_agg with complex group expression
  sql: |
    create table t(v1 int, v2 int);
    select min(v1), sum(v1 + v2) from t group by v1 + v2;
  expected_outputs:
  - logical_plan
- name: test logical_agg with complex group expression
  sql: |
    create table t(v1 int, v2 int, v3 int);
    select v1, sum(v1 * v2) as sum from t group by (v1 + v2) / v3, v1;
  expected_outputs:
  - logical_plan
- name: test logical_agg with complex group expression
  sql: |
    create table t(v1 int, v2 int);
    select v1 + v2 from t group by v1 + v2;
  expected_outputs:
  - logical_plan
- name: "test logical_agg with complex group expression \nshould complain about nested agg call \n"
  sql: |
    create table t(v1 int, v2 int);
    select avg(sum(v1 + v2)) from t group by v1 + v2;
  expected_outputs:
  - planner_error
- name: test logical_agg with complex select expression
  sql: |
    create table t(v1 int, v2 int);
    select v1 + v2 from t group by v1, v2;
  expected_outputs:
  - logical_plan
- sql: |
    create table t(v1 int, v2 int);
    select v1 from t group by v1 + v2;
  expected_outputs:
  - planner_error
- name: group by output column ordinal ok
  sql: |
    select 4 + 5 group by 1;
  expected_outputs:
  - logical_plan
- name: group by const int expr
  sql: |
    select 4 + 5 group by 3 - 2; -- not folded
  expected_outputs:
  - logical_plan
- name: group by output column ordinal of agg
  sql: |
    select sum(2) group by 1;
  expected_outputs:
  - planner_error
- name: group by output column ordinal non-integer const
  sql: |
    select 4 + 5 group by null; -- no implicit cast
  expected_outputs:
  - binder_error
- name: group by output column ordinal bigint
  sql: |
    select 4 + 5 group by 2147483648;
  expected_outputs:
  - binder_error
- name: group by output column ordinal negative
  sql: |
    select 4 + 5 group by -2147483648;
  expected_outputs:
  - binder_error
- name: group by output column ordinal zero
  sql: |
    select 4 + 5 group by 0;
  expected_outputs:
  - binder_error
- name: group by output column ordinal out of bound (excl extra order by exprs)
  sql: |
    select 4 + 5 group by 2 order by 7 + 8, 3 + 2;
  expected_outputs:
  - binder_error
- name: group by output column name ok
  sql: |
    select 4 + 5 as a group by a;
  expected_outputs:
  - logical_plan
- name: group by output column name ambiguous 2
  sql: |
    select 4 + 5 as a, 2 + 3 as a group by a;
  expected_outputs:
  - binder_error
- name: group by output column name ambiguous 3
  sql: |
    select 4 + 5 as a, 2 + 3 as a, 3 + 4 as a group by a;
  expected_outputs:
  - binder_error
- name: group by output column name not ambiguous when unused
  sql: |
    select 4 + 5 as a, 2 + 3 as a, 3 + 4 as b group by b;
  expected_outputs:
  - logical_plan
- name: group by output column name not ambiguous when input preferred
  sql: |
    create table t (a int);
    select 4 + 5 as a, 2 + 3 as a from t group by a;
  expected_outputs:
  - logical_plan
- name: group by output column name expr disallowed
  sql: |
    select 4 + 5 as a group by a + 1;
  expected_outputs:
  - binder_error
- name: group by prefers input while order by prefers output
  sql: |
    create table t (a int);
    select 4 + 5 as a from t group by a order by a;
  expected_outputs:
  - batch_plan
- name: group by column not found
  sql: |
    select 4 + 5 as a group by b;
  expected_outputs:
  - binder_error
- sql: |
    create table t(v1 int, v2 int);
    select count(v1 + v2) as cnt, sum(v1 + v2) as sum from t;
  expected_outputs:
  - batch_local_plan
  - stream_plan
  - batch_plan
- sql: |
    create table t(v1 int, v2 int, v3 int);
    select v1, sum(v2 + v3) / count(v2 + v3) + max(v1) as agg from t group by v1;
  expected_outputs:
  - batch_plan
  - stream_plan

- sql: |
    create table t (v1 real);
    select v1, count(*) from t group by v1;
  expected_outputs:
  - batch_plan
- name: Use BatchSortAgg, when input provides order
  sql: |
    create table t(v1 int, v2 int);
    create materialized view mv as select * from t order by v1 desc;
    select v1, max(v2) from mv group by v1;
  expected_outputs:
  - batch_plan
- sql: |
    create table t(v1 int, v2 int);
    select v1, max(v2) from t group by v1 order by v1 desc;
  expected_outputs:
  - batch_plan
- sql: |
    create table t(k1 int, k2 int, v1 int);
    SELECT max(v1), k1, k2 from t group by k1, k2 order by k1;
  expected_outputs:
  - batch_plan
- sql: |
    create table t(v1 int, v2 int);
    select max(v2), v1 from t group by v1 order by v1 desc;
  expected_outputs:
  - batch_plan
- sql: |
    create table t (a int, b int, c int, primary key (a, b, c));
    select a, c, first_value(b order by b), count(*) from t group by a, c;
  expected_outputs:
  - batch_plan
- sql: |
    create table t (a int, b int, c int, primary key (a, b, c));
    select a, c, first_value(b order by b), count(*) from t group by a, c having a = 1;;
  expected_outputs:
  - batch_plan
- name: Not use BatchSortAgg, when input provides order
  sql: |
    create table t(v1 int, v2 int);
    create materialized view mv as select * from t order by v1 desc;
    select v1, max(v2) from mv group by v1;
  with_config_map:
    RW_BATCH_ENABLE_SORT_AGG: 'false'
  expected_outputs:
  - batch_plan
- name: Not use BatchSortAgg, when output requires order
  sql: |
    create table t(v1 int, v2 int);
    select v1, max(v2) from t group by v1 order by v1 desc;
  with_config_map:
    RW_BATCH_ENABLE_SORT_AGG: 'false'
  expected_outputs:
  - batch_plan
- name: Not use BatchSortAgg, when required order satisfies input order
  sql: |
    create table t(k1 int, k2 int, v1 int);
    SELECT max(v1), k1, k2 from t group by k1, k2 order by k1;
  with_config_map:
    RW_BATCH_ENABLE_SORT_AGG: 'false'
  expected_outputs:
  - batch_plan
- name: Not use BatchSortAgg, when output requires order with swapped output
  sql: |
    create table t(v1 int, v2 int);
    select max(v2), v1 from t group by v1 order by v1 desc;
  with_config_map:
    RW_BATCH_ENABLE_SORT_AGG: 'false'
  expected_outputs:
  - batch_plan

- sql: |
    create table t (v1 real);
    select count(*) from t;
  expected_outputs:
  - batch_plan
- name: having with agg call
  sql: |
    create table t (v1 real);
    select 1 from t having sum(v1) > 5;
  expected_outputs:
  - batch_plan
- name: having with group column
  sql: |
    create table t (v1 real);
    select 1 from t group by v1 having v1 > 5;
  expected_outputs:
  - logical_plan
- name: having with non-group column
  sql: |
    create table t (v1 real, v2 int);
    select 1 from t group by v1 having v2 > 5;
  expected_outputs:
  - planner_error
- name: distinct without agg
  sql: |
    create table t (v1 int, v2 int);
    select distinct v1 from t;
  expected_outputs:
  - logical_plan
  - stream_plan
- name: distinct with agg
  sql: |
    create table t (v1 int, v2 int);
    select distinct sum(v1) from t group by v2;
  expected_outputs:
  - logical_plan
  - stream_plan
- name: distinct on
  sql: |
    create table t (v1 int, v2 int, v3 int);
    select distinct on (v1, v3) v1, v2 from t order by v3, v1;
  expected_outputs:
  - logical_plan
  - batch_plan
- name: distinct on order by distinct columns
  sql: |
    create table t (v1 int, v2 int, v3 int);
    select distinct on (v1, v3) v1, v2 from t order by v1, v3;
  expected_outputs:
  - logical_plan
  - batch_plan
- name: distinct on order by part of the distinct columns
  sql: |
    create table t (v1 int, v2 int);
    select distinct on (v1) v1, v2 from t order by v1;
  expected_outputs:
  - logical_plan
- name: distinct on order by distinct columns and additional sorting columns
  sql: |
    create table t (id int, ts timestamp, foo int, bar varchar);
    select distinct on (id) * from t order by id, ts desc;
  expected_outputs:
    - logical_plan
- name: distinct on with expression
  sql: |
    create table t (v1 int, v2 int, v3 int);
    select distinct on(v1) v2 + v3 from t order by v1;
  expected_outputs:
  - batch_plan
  - logical_plan
- name: arguments out-of-order
  sql: |
    create table t(v1 int, v2 int, v3 int);
    select count(v3), min(v2), max(v1) from t;
  expected_outputs:
  - optimized_logical_plan_for_batch
  - batch_plan
  - logical_plan
- name: simple-agg arguments out-of-order
  sql: |
    create table t(v1 int, v2 int, v3 int);
    select min(v1) + max(v3) * count(v2) as agg from t;
  expected_outputs:
  - batch_plan
  - stream_plan
  - optimized_logical_plan_for_batch
  - logical_plan
- name: dup group key
  sql: |
    create table t(v1 int) with (appendonly = false);
    select v1 from t group by v1, v1;
  expected_outputs:
  - logical_plan
  - optimized_logical_plan_for_batch
  - stream_plan
- name: dup group key
  sql: |
    create table t(v1 int, v2 int, v3 int) with (appendonly = false);
    select v2, min(v1) as min_v1, v3, max(v1) as max_v1 from t group by v3, v2, v2;
  expected_outputs:
  - stream_plan
  - logical_plan
  - optimized_logical_plan_for_batch
- name: order by agg input
  sql: |
    create table t(v1 int);
    select sum(v1 order by v1) as s1 from t;
  expected_outputs:
  - stream_plan
  - logical_plan
  - optimized_logical_plan_for_batch
- name: order by other columns
  sql: |
    create table t(v1 int, v2 varchar);
    select sum(v1 order by v2) as s1 from t;
  expected_outputs:
  - optimized_logical_plan_for_batch
  - logical_plan
  - stream_plan
- name: order by ASC/DESC and default
  sql: |
    create table t(v1 int, v2 varchar, v3 int);
    select sum(v1 order by v1, v2 ASC, v3 DESC) as s1 from t;
  expected_outputs:
  - logical_plan
  - stream_plan
  - optimized_logical_plan_for_batch
- name: filter clause
  sql: |
    create table t(v1 int);
    select sum(v1) FILTER (WHERE v1 > 0) AS sa from t;
  expected_outputs:
  - logical_plan
  - stream_plan
  - optimized_logical_plan_for_batch
- name: |
    filter clause
    extra calculation, should reuse result from project
  sql: |
    create table t(a int, b int);
    select sum(a * b) filter (where a * b > 0) as sab from t;
  expected_outputs:
  - optimized_logical_plan_for_batch
  - logical_plan
- name: complex filter clause
  sql: |
    create table t(a int, b int);
    select max(a * b) FILTER (WHERE a < b AND a + b < 100 AND a * b != a + b - 1) AS sab from t;
  expected_outputs:
  - optimized_logical_plan_for_batch
  - stream_plan
  - logical_plan
- name: avg filter clause + group by
  sql: |
    create table t(a int, b int);
    select avg(a) FILTER (WHERE a > b) AS avga from t group by b ;
  expected_outputs:
  - optimized_logical_plan_for_batch
  - logical_plan
  - stream_plan
- name: count filter clause
  sql: |
    create table t(a int, b int);
    select count(*) FILTER (WHERE a > b) AS cnt_agb from t;
  expected_outputs:
  - optimized_logical_plan_for_batch
  - logical_plan
  - stream_plan
- name: filter clause + non-boolean function
  sql: |
    create table t(a int, b int);
    select avg(a) FILTER (WHERE abs(a)) AS avga from t;
  expected_outputs:
  - binder_error
- name: filter clause + subquery
  sql: |
    create table t(a int, b int);
    select avg(a) FILTER (WHERE 0 < (select max(a) from t)) AS avga from t;
  expected_outputs:
  - binder_error
- name: aggregation in filter clause
  sql: |
    create table t(a int, b int);
    select avg(a) FILTER (WHERE a < avg(b)) AS avga from t;
  expected_outputs:
  - binder_error
- name: filter clause + non-boolean function
  sql: |
    create table t(a int, b int);
    select abs(a) FILTER (WHERE a > 0) AS avga from t;
  expected_outputs:
  - binder_error
- name: prune column before filter
  sql: |
    create table t(v1 int, v2 int);
    with sub(a, b) as (select min(v1), sum(v2) filter (where v2 < 5) from t) select b from sub;
  expected_outputs:
  - stream_plan
  - batch_plan
- name: distinct agg on empty args
  sql: |
    create table t(x int, y varchar);
    select count(distinct *) from t;
  expected_outputs:
  - binder_error
- name: only distinct agg
  sql: |
    create table t(a int, b int, c int);
    select a, count(distinct b) as distinct_b_num, sum(distinct c) filter(where c < 100) as distinct_c_sum from t group by a;
  expected_outputs:
  - optimized_logical_plan_for_batch
- name: single distinct agg and non-disintct agg
  sql: |
    create table t(a int, b int, c int);
    select a, count(distinct b) as distinct_b_num, sum(c) as sum_c from t group by a;
  expected_outputs:
  - batch_plan
  - stream_plan
  - optimized_logical_plan_for_batch
- name: distinct agg and non-disintct agg with intersected argument
  sql: |
    create table t(a int, b int, c int);
    select a, count(distinct b) as distinct_b_num, count(distinct c) as distinct_c_sum, sum(c) as sum_c from t group by a;
  expected_outputs:
  - optimized_logical_plan_for_batch
  - stream_plan
  - batch_plan
- name: distinct & string_agg
  sql: |
    create table t(x int, y varchar);
    select string_agg(y, ','), count(distinct x) from t;
  expected_outputs:
  - logical_plan
  - stream_plan
  - batch_plan
- name: distinct & order by on different calls
  sql: |
    create table t(x int, y varchar);
    select string_agg(y, ',' order by y), count(distinct x) from t;
  expected_outputs:
  - logical_plan
  - stream_plan
  - batch_plan
- name: distinct & order by on same calls
  sql: |
    create table t(x int, y varchar);
    select string_agg(distinct y, ',' order by y), count(distinct x) from t;
  expected_outputs:
  - logical_plan
  - stream_plan
  - batch_plan
- name: distinct & invalid order by
  sql: |
    create table t(x int, y varchar);
    select string_agg(distinct y, ',' order by x) from t;
  expected_outputs:
  - binder_error
- name: distinct with multiple non-const args
  sql: |
    create table t(x int, y varchar);
    select string_agg(distinct y, x::varchar) from t;
  expected_outputs:
  - binder_error
- name: distinct agg with filter
  sql: |
    create table t(a int, b int, c int);
    select a, count(distinct b) filter(where b < 100), sum(c) from t group by a;
  expected_outputs:
  - batch_plan
  - optimized_logical_plan_for_batch
  - stream_plan
- name: non-distinct agg with filter
  sql: |
    create table t(a int, b int, c int);
    select a, count(distinct b), sum(c) filter(where b < 100) from t group by a;
  expected_outputs:
  - optimized_logical_plan_for_batch
- name: combined order by & filter clauses
  sql: |
    create table t(a varchar, b int);
    select sum(length(a) * b order by length(a) + b) filter (where b < 100 AND b * 2 > 10) as s1 from t;
  expected_outputs:
  - logical_plan
  - stream_plan
  - optimized_logical_plan_for_batch
- sql: |
    create table t(v1 int, v2 int);
    with z(a, b) as (select count(distinct v1), count(v2) from t) select a from z;
  expected_outputs:
  - optimized_logical_plan_for_batch
- name: input is sharded by group key
  sql: |
    create table t(x int);
    create index i on t(x);
    select count(*) as cnt from i group by x;
  expected_outputs:
  - batch_plan
  - stream_plan
- name: distinct aggregates only have one distinct argument doesn't need expand
  sql: |
    create table t(x int, y int);
    select count(x), sum(distinct y), sum(distinct y) from t;
  expected_outputs:
  - optimized_logical_plan_for_batch
  - optimized_logical_plan_for_stream
  with_config_map:
    RW_FORCE_SPLIT_DISTINCT_AGG: 'true'
- sql: |
    create table t(x int, y int);
    select count(y), sum(distinct y) from t;
  expected_outputs:
  - optimized_logical_plan_for_batch
  - optimized_logical_plan_for_stream
  with_config_map:
    RW_FORCE_SPLIT_DISTINCT_AGG: 'true'
- sql: |
    create table t(x int, y int);
    select count(distinct x), sum(distinct y) from t;
  expected_outputs:
  - optimized_logical_plan_for_batch
  - optimized_logical_plan_for_stream
  with_config_map:
    RW_FORCE_SPLIT_DISTINCT_AGG: 'true'
- name: remove unnecessary distinct for max and min
  sql: |
    create table t(x int, y int);
    select max(distinct x), min(distinct y) from t;
  expected_outputs:
  - optimized_logical_plan_for_batch
  - optimized_logical_plan_for_stream
  with_config_map:
    RW_FORCE_SPLIT_DISTINCT_AGG: 'true'

- name: agg filter - subquery
  sql: |
    /* This case is valid in PostgreSQL */
    create table a (a1 int, a2 int);
    select count(a1) filter (where (select true)) from a;
  expected_outputs:
  - binder_error
- name: agg filter - agg
  sql: |
    /* This case is valid in PostgreSQL */
    create table a (a1 int, a2 int);
    create table b (b1 int, b2 int);
    select 1 from a having exists(
      select count(b1) filter (where min(a1) < 3) from b
    );
  expected_outputs:
  - binder_error
- name: agg filter - table function
  sql: |
    /* This case is NOT valid in PostgreSQL */
    create table a (a1 int, a2 int);
    select count(a1) filter (where unnest(array[1]) < 1) from a;
  expected_outputs:
  - binder_error
- name: agg order by - subquery
  sql: |
    /* This case is valid in PostgreSQL */
    create table a (a1 int, a2 int);
    select string_agg('', '' order by (select true)) from a;
  expected_outputs:
  - planner_error
- name: agg order by - agg (correlated in having)
  sql: |
    create table a (a1 int, a2 int);
    create table sb (b1 varchar, b2 varchar);
    select 1 from a having exists(
      select string_agg(b1, '' order by min(a1)) from sb -- valid in PostgreSQL
      -- select string_agg('', '' order by min(a1)) from sb -- NOT valid in PostgreSQL
    );
  expected_outputs:
  - planner_error
- name: agg order by - agg (correlated in where)
  sql: |
    /* This case is NOT valid in PostgreSQL */
    create table a (a1 int, a2 int);
    create table sb (b1 varchar, b2 varchar);
    select 1 from a where exists(
      select string_agg(b1, '' order by min(a1)) from sb
    );
  expected_outputs:
  - planner_error
- name: agg order by - table function
  sql: |
    /* This case is NOT valid in PostgreSQL */
    create table a (a1 int, a2 int);
    select string_agg('', '' order by unnest(array[1])) from a;
  expected_outputs:
  - planner_error
- name: agg input - subquery
  sql: |
    /* This case is valid in PostgreSQL */
    create table a (a1 int, a2 int);
    select count(a1 + (select 1)) from a;
  expected_outputs:
  - planner_error
- name: agg input - agg
  sql: |
    /* This case is valid in PostgreSQL */
    create table a (a1 int, a2 int);
    create table b (b1 int, b2 int);
    select 1 from a having exists(
      select count(b1 + min(a1)) from b
    );
  expected_outputs:
  - planner_error
- name: agg input - table function
  sql: |
    /* This case is NOT valid in PostgreSQL */
    create table a (a1 int, a2 int);
    select count(a1 + unnest(array[1])) from a;
  expected_outputs:
  - planner_error
- name: group by - subquery
  sql: |
    /* This case is valid in PostgreSQL */
    create table a (a1 int, a2 int);
    select count(a1) from a group by (select true);
  expected_outputs:
  - planner_error
- name: group by - agg
  sql: |
    /* This case is valid in PostgreSQL */
    create table a (a1 int, a2 int);
    create table b (b1 int, b2 int);
    select 1 from a having exists(
      select count(b1) from b group by min(a1)
    );
  expected_outputs:
  - planner_error
- name: group by - table function
  sql: |
    /* This case is valid in PostgreSQL */
    create table a (a1 int, a2 int);
    select count(a1) from a group by unnest(array[1]);
  expected_outputs:
  - planner_error
- name: post-agg project set - ok
  sql: |
    create table t (v1 int, v2 int);
    select min(v1), unnest(array[2, max(v2)]) from t;
  expected_outputs:
  - logical_plan
- name: post-agg project set - error
  sql: |
    create table t (v1 int, v2 int);
    select min(v1), unnest(array[2, v2]) from t;
  expected_outputs:
  - planner_error
- name: post-agg project set - grouped
  sql: |
    create table t (v1 int, v2 int);
    select min(v1), unnest(array[2, v2]) from t group by v2;
  expected_outputs:
  - logical_plan
- name: min/max on index
  sql: |
    create table t (v1 varchar, v2 int);
    create index idx on t(v2 desc);
    select max(v2) from t;
  expected_outputs:
  - optimized_logical_plan_for_batch
  - logical_plan
- name: min/max on index with group by, shall NOT optimize
  sql: |
    create table t (v1 int, v2 int);
    create index idx on t(v2 desc);
    select max(v2) from t group by v1;
  expected_outputs:
  - optimized_logical_plan_for_batch
  - logical_plan
- name: min/max on primary key
  sql: |
    create table t (v1 int primary key);
    select min(v1) from t;
  expected_outputs:
  - logical_plan
  - optimized_logical_plan_for_batch
- name: stddev_samp
  sql: |
    create table t (v1 int);
    select stddev_samp(v1), stddev_pop(v1) from t;
  expected_outputs:
  - batch_plan
  - batch_local_plan
  - stream_plan
  - logical_plan
- name: stddev_samp with other columns
  sql: |
    select count(''), stddev_samp(1);
  expected_outputs:
  - logical_plan
- name: stddev_samp with group
  sql: |
    create table t(v int, w float);
    select stddev_samp(v) from t group by w;
  expected_outputs:
  - logical_plan
- name: force two phase aggregation should succeed with UpstreamHashShard and SomeShard (batch only).
  sql: |
    SET QUERY_MODE TO DISTRIBUTED;
    SET RW_FORCE_TWO_PHASE_AGG=true;
    create table t(v1 int, v2 smallint, v3 varchar);
    select min(v3), sum(v1) from t group by v1, v3, v2;
  expected_outputs:
  - stream_plan
  - batch_plan
- name: enable two phase aggregation with simple agg should have two phase agg
  sql: |
    SET QUERY_MODE TO DISTRIBUTED;
    SET ENABLE_TWO_PHASE_AGG=true;
    create table t(v1 int, v2 int);
    select min(v1), sum(v2) from t;
  expected_outputs:
  - stream_plan
  - batch_plan
- name: disable two phase aggregation with simple agg
  sql: |
    SET QUERY_MODE TO DISTRIBUTED;
    SET ENABLE_TWO_PHASE_AGG=false;
    create table t(v1 int, v2 int);
    select min(v1), sum(v2) from t;
  expected_outputs:
  - batch_plan
  - stream_plan
- name: force two phase agg with different distributions on inner and outer agg should have exchange
  sql: |
    set QUERY_MODE to DISTRIBUTED;
    set RW_FORCE_TWO_PHASE_AGG to TRUE;
    CREATE TABLE lineitem (
        l_orderkey BIGINT,
        l_tax NUMERIC,
        l_commitdate DATE,
        l_shipinstruct VARCHAR,
        PRIMARY KEY (l_orderkey)
    );
    SELECT
        max(sq_1.col_2) as col_0
    FROM
        (
            SELECT
                t_0.l_commitdate AS col_2
            FROM
                lineitem AS t_0
            GROUP BY
                t_0.l_tax,
                t_0.l_shipinstruct,
                t_0.l_orderkey,
                t_0.l_commitdate
        ) AS sq_1
    GROUP BY
        sq_1.col_2;
  expected_outputs:
  - stream_plan
  - batch_plan
- name: two phase agg on hop window input should use two phase agg
  sql: |
    SET QUERY_MODE TO DISTRIBUTED;
    SET RW_FORCE_TWO_PHASE_AGG=true;
    create table bid(date_time TIMESTAMP, auction int);
    SELECT
      max(CountBids.num) AS maxn,
      CountBids.starttime_c
    FROM (
      SELECT
        count(*) AS num,
        window_start AS starttime_c
      FROM HOP(bid, date_time, INTERVAL '2' SECOND, INTERVAL '10' SECOND)
      GROUP BY
        bid.auction,
        window_start
    ) as CountBids
    GROUP BY
    CountBids.starttime_c;
  expected_outputs:
  - batch_plan
  - stream_plan
- name: two phase agg with stream SomeShard (via index) but pk satisfies output dist should use shuffle agg
  sql: |
    SET QUERY_MODE TO DISTRIBUTED;
    SET RW_FORCE_TWO_PHASE_AGG=true;
    create table t (id int primary key, col int);
    create index idx on t(col);
    with sq as (select id from idx) select count(*) from sq group by sq.id;
  expected_outputs:
  - batch_plan
  - stream_plan
- name: two phase agg with stream SomeShard (via index) but pk does not satisfy output dist should use two phase agg
  sql: |
    SET QUERY_MODE TO DISTRIBUTED;
    SET RW_FORCE_TWO_PHASE_AGG=true;
    create table t (id int primary key, col1 int, col2 int);
    create index idx on t(id);
    with sq as (select col1, col2 from idx) select count(*) from sq group by sq.col1;
  expected_outputs:
  - batch_plan
  - stream_plan
- name: sort agg on an ascending index
  sql: |
    create table t (a int, b int);
    create index idx_asc on t(a asc);
    create index idx_desc on t(a desc);
    select a, count(*) cnt from t group by a order by a asc;
  expected_outputs:
  - batch_plan
- name: sort agg on a descending index
  sql: |
    create table t (a int, b int);
    create index idx_asc on t(a asc);
    create index idx_desc on t(a desc);
    select a, count(*) cnt from t group by a order by a desc;
  expected_outputs:
  - batch_plan
- sql: |
    create table t (x int, y int);
    select percentile_cont(x) within group (order by y) from t;
  expected_outputs:
  - binder_error
- sql: |
    create table t (x int, y int);
    select percentile_cont('abc') within group (order by y) from t;
  expected_outputs:
  - binder_error
- sql: |
    create table t (x int, y int);
    select percentile_cont(1.3) within group (order by y) from t;
  expected_outputs:
  - binder_error
- sql: |
    create table t (x int, y int);
    select percentile_cont(0, 0) within group (order by y) from t;
  expected_outputs:
  - binder_error
- sql: |
    create table t (x int, y varchar);
    select percentile_cont(0) within group (order by y) from t;
  expected_outputs:
  - binder_error
- sql: |
    create table t (x int, y int);
    select percentile_cont(0) within group (order by y desc) from t;
  expected_outputs:
  - batch_plan
- sql: |
    create table t (x int, y int);
    select percentile_cont(null) within group (order by y) from t;
  expected_outputs:
  - batch_plan
- sql: |
    create table t (x int, y int);
    select percentile_cont(0.2 + 0.3) within group (order by y) from t;
  expected_outputs:
  - batch_plan
- sql: |
    create table t (x int, y int);
    select percentile_cont(0.2 + null) within group (order by y) from t;
  expected_outputs:
  - batch_plan
- sql: |
    create table t (x int, y int);
    select percentile_cont(0.8 + 0.8) within group (order by y) from t;
  expected_outputs:
  - binder_error
- sql: |
    create table t (x int, y int);
    select percentile_cont(0.2 + x) within group (order by y) from t group by x;
  expected_outputs:
  - binder_error
- sql: |
    create table t (x int, y varchar);
    select percentile_disc(1) within group (order by y desc) from t;
  expected_outputs:
  - batch_plan
- sql: |
    create table t (x int, y varchar);
    select mode() within group (order by y desc) from t;
  expected_outputs:
  - batch_plan
- sql: |
    create table t (x int, y varchar);
    select mode(1) within group (order by y desc) from t;
  expected_outputs:
  - binder_error

- sql: |
    create table t (x int, y int);
    select first_value(x) from t;
  expected_outputs:
  - planner_error
- sql: |
    create table t (x int, y int);
    select last_value(x) from t;
  expected_outputs:
  - planner_error
- sql: |
    create table t (x int, y int);
    select first_value(x order by y asc) from t;
  expected_outputs:
  - batch_plan
  - stream_plan
  - stream_dist_plan # check the state table schema
- sql: |
    create table t (x int, y int);
    select first_value(distinct x order by x asc) from t;
  expected_outputs:
  - stream_dist_plan # check the state table schema
- sql: |
    create table t (x int, y int);
    select last_value(x order by y desc nulls last) from t;
  expected_outputs:
  - batch_plan
  - stream_plan
- sql: |
    CREATE TABLE integers(i INTEGER);
    SELECT count(DISTINCT i) FROM integers;
  expected_outputs:
  - batch_plan
- sql: |
    CREATE TABLE t(id int primary key, a int, b int);
    SELECT count(*) FROM t group by a, id, b;
  expected_outputs:
    - batch_plan
    - stream_plan

- sql: |
    CREATE TABLE t (a int, b int);
    SELECT a, sum((sum(b))) OVER (PARTITION BY a ORDER BY a) FROM t GROUP BY a;
  expected_outputs:
    - batch_plan
    - stream_plan
- sql: |
    CREATE TABLE t (a int, b int);
    SELECT a, row_number() OVER (PARTITION BY a ORDER BY a DESC) FROM t GROUP BY a;
  expected_outputs:
    - batch_plan
    - stream_plan
- sql: |
    CREATE TABLE t (a int, b int, c int);
    SELECT a, b, sum(sum(c)) OVER (PARTITION BY a ORDER BY b)
    FROM t
    GROUP BY a, b;
  expected_outputs:
    - batch_plan
    - stream_plan
- sql: |
    CREATE TABLE t (a int, b int, c int, d int, e int);
    SELECT a, b, sum(sum(c)) OVER (PARTITION BY a, avg(d) ORDER BY max(e), b)
    FROM t
    GROUP BY a, b;
  expected_outputs:
    - batch_plan
    - stream_plan
- name: test duplicate agg
  sql: |
    CREATE TABLE t (v1 int);
    SELECT sum(v1) as x, count(v1) as y, sum(v1) as z, count(v1) as w from t;
  expected_outputs:
    - logical_plan
    - stream_plan
- name: test simple approx_percentile alone
  sql: |
    CREATE TABLE t (v1 int);
    SELECT approx_percentile(0.5, 0.01) WITHIN GROUP (order by v1) from t;
  expected_outputs:
    - logical_plan
    - batch_plan
    - stream_plan
- name: test simple approx_percentile with other simple aggs
  sql: |
    CREATE TABLE t (v1 int);
    SELECT approx_percentile(0.5, 0.01) WITHIN GROUP (order by v1), sum(v1) from t;
  expected_outputs:
    - logical_plan
    - batch_plan
    - stream_plan
- name: test simple approx_percentile with other simple aggs (sum, count)
  sql: |
    CREATE TABLE t (v1 int);
    SELECT sum(v1) as s1, approx_percentile(0.5, 0.01) WITHIN GROUP (order by v1), sum(v1) as s2, count(v1) from t;
  expected_outputs:
    - logical_plan
    - batch_plan
    - stream_plan
- name: test simple approx_percentile with duplicate approx_percentile
  sql: |
    CREATE TABLE t (v1 int);
    SELECT approx_percentile(0.5, 0.01) WITHIN GROUP (order by v1) as x, approx_percentile(0.5, 0.01) WITHIN GROUP (order by v1) as y from t;
  expected_outputs:
    - logical_plan
    - stream_plan
- name: test simple approx_percentile with different approx_percentile
  sql: |
    CREATE TABLE t (v1 int, v2 int);
    SELECT approx_percentile(0.5, 0.01) WITHIN GROUP (order by v1) as x, approx_percentile(0.5, 0.01) WITHIN GROUP (order by v2) as y from t;
  expected_outputs:
    - logical_plan
    - batch_plan
    - stream_plan
- name: test simple approx_percentile with different approx_percentile interleaved with stateless simple aggs
  sql: |
    CREATE TABLE t (v1 int, v2 int);
    SELECT sum(v1) as s1, approx_percentile(0.5, 0.01) WITHIN GROUP (order by v1) as x, count(*), sum(v2) + approx_percentile(0.9, 0.01) WITHIN GROUP (order by v2) as y from t;
  expected_outputs:
    - logical_plan
    - batch_plan
    - stream_plan
- name: test simple approx_percentile with duplicated approx_percentile interleaved with stateless simple aggs
  sql: |
    CREATE TABLE t (v1 int, v2 int);
    SELECT sum(v1) as s1, approx_percentile(0.5, 0.01) WITHIN GROUP (order by v1) as x, count(*), sum(v2) + approx_percentile(0.5, 0.01) WITHIN GROUP (order by v2) as y from t;
  expected_outputs:
    - logical_plan
    - batch_plan
    - stream_plan
- name: test simple approx_percentile with descending order
  sql: |
    CREATE TABLE t (v1 int, v2 int);
    SELECT sum(v1) as s1, approx_percentile(0.2, 0.01) WITHIN GROUP (order by v1 desc) from t;
  expected_outputs:
    - logical_plan
    - batch_plan
    - stream_plan
- name: test simple approx_percentile with different approx_percentile interleaved with stateless + stateful simple aggs
  sql: |
    CREATE TABLE t (v1 int, v2 int);
    SELECT sum(v1) as s1, approx_percentile(0.5, 0.01) WITHIN GROUP (order by v1) as x, count(*), max(v2) as m2, approx_percentile(0.5, 0.01) WITHIN GROUP (order by v2) as y from t;
  expected_outputs:
    - logical_plan
    - batch_plan
    - stream_plan
- name: test hash approx_percentile
  sql: |
    CREATE TABLE t (v1 int, v2 int);
    SELECT approx_percentile(0.5, 0.01) WITHIN GROUP (order by v1) from t group by v2;
  expected_outputs:
    - logical_plan
    - batch_plan
    - stream_plan
- name: test approx_percentile hash_agg forced should use single phase agg
  sql: |
    SET RW_FORCE_TWO_PHASE_AGG=true;
    create table t (v1 int, grp_col int);
    select approx_percentile(0.5, 0.01) WITHIN GROUP (order by v1) from t group by grp_col;
  expected_outputs:
    - stream_error
- name: test approx percentile with default relative_error
  sql: |
    CREATE TABLE t (v1 int);
    SELECT approx_percentile(0.5) WITHIN GROUP (order by v1) from t;
  expected_outputs:
    - logical_plan
    - batch_plan
    - stream_plan
- name: test approx percentile with invalid relative_error
  sql: |
    CREATE TABLE t (v1 int);
    SELECT approx_percentile(0.5, 0.0) WITHIN GROUP (order by v1) from t;
  expected_outputs:
    - binder_error
- name: test approx percentile with invalid relative_error 0.0
  sql: |
    CREATE TABLE t (v1 int);
    SELECT approx_percentile(0.5, 0.0) WITHIN GROUP (order by v1) from t;
  expected_outputs:
    - binder_error
- name: test approx percentile with invalid relative_error 1.0 with group by.
  sql: |
    CREATE TABLE t (v1 int, v2 int);
    SELECT approx_percentile(0.0, 1.0) WITHIN GROUP (order by v1) from t group by v2;
  expected_outputs:
    - binder_error
- name: test empty agg
  sql: |
    WITH with_0 AS (
        WITH with_1 AS (
            SELECT
                TIMESTAMP '2025-05-05 16:18:55' AS col_0,
                avg((INT '813')) AS col_1, ((BIGINT '371') / (INT '-2147483648')) AS col_2,
                (SMALLINT '460') AS col_3
            FROM generate_series(TIMESTAMP '2020-01-01 00:07:42', TIMESTAMP '2020-01-01 00:46:33', INTERVAL '2706 seconds') AS generate_series_2
            WHERE true
        )
        SELECT
            true AS col_0,
            (REAL '-2147483648') AS col_1,
            (SMALLINT '-10773') AS col_2
        FROM with_1
    )
    SELECT
        CAST(NULL AS STRUCT<a SMALLINT, b DOUBLE, c TIME>) AS col_0,
        (INT '995') AS col_1,
        (INTERVAL '-604800') AS col_2,
        (FLOAT '294') AS col_3
    FROM with_0
    WHERE false;
  expected_outputs:
    - logical_plan
    - batch_plan
    - stream_plan
