# This file is automatically generated. See `src/frontend/planner_test/README.md` for more information.
- id: create_singleton_mv
  sql: |
    create table t (v int);
    create materialized view mv as select v from t order by v limit 10;
- id: select_from_singleton_mv
  before:
  - create_singleton_mv
  sql: |
    select v from mv;
  batch_plan: |-
    BatchExchange { order: [], dist: Single }
    └─BatchScan { table: mv, columns: [mv.v], distribution: Single }
  batch_local_plan: |-
    BatchExchange { order: [], dist: Single }
    └─BatchScan { table: mv, columns: [mv.v], distribution: SomeShard }
- id: select_from_singleton_mv_join
  before:
  - create_singleton_mv
  sql: |
    select mv1.v from mv mv1, mv mv2 where mv1.v = mv2.v;
  batch_plan: |-
    BatchExchange { order: [], dist: Single }
    └─BatchHashJoin { type: Inner, predicate: mv.v = mv.v, output: [mv.v] }
      ├─BatchExchange { order: [], dist: HashShard(mv.v) }
      │ └─BatchScan { table: mv, columns: [mv.v], distribution: Single }
      └─BatchExchange { order: [], dist: HashShard(mv.v) }
        └─BatchScan { table: mv, columns: [mv.v], distribution: Single }
  batch_local_plan: |-
    BatchHashJoin { type: Inner, predicate: mv.v = mv.v, output: [mv.v] }
    ├─BatchExchange { order: [], dist: Single }
    │ └─BatchScan { table: mv, columns: [mv.v], distribution: SomeShard }
    └─BatchExchange { order: [], dist: Single }
      └─BatchScan { table: mv, columns: [mv.v], distribution: SomeShard }
- id: select_from_singleton_mv_join_top_n
  before:
  - create_singleton_mv
  sql: |
    select mv1.v from mv mv1, mv mv2 where mv1.v = mv2.v order by mv1.v limit 10;
  batch_plan: |-
    BatchProject { exprs: [mv.v] }
    └─BatchTopN { order: [mv.v ASC], limit: 10, offset: 0 }
      └─BatchExchange { order: [], dist: Single }
        └─BatchTopN { order: [mv.v ASC], limit: 10, offset: 0 }
          └─BatchProject { exprs: [mv.v, mv.v] }
            └─BatchHashJoin { type: Inner, predicate: mv.v = mv.v, output: [mv.v] }
              ├─BatchExchange { order: [], dist: HashShard(mv.v) }
              │ └─BatchScan { table: mv, columns: [mv.v], distribution: Single }
              └─BatchExchange { order: [], dist: HashShard(mv.v) }
                └─BatchScan { table: mv, columns: [mv.v], distribution: Single }
  batch_local_plan: |-
    BatchProject { exprs: [mv.v] }
    └─BatchTopN { order: [mv.v ASC], limit: 10, offset: 0 }
      └─BatchProject { exprs: [mv.v, mv.v] }
        └─BatchHashJoin { type: Inner, predicate: mv.v = mv.v, output: [mv.v] }
          ├─BatchExchange { order: [], dist: Single }
          │ └─BatchScan { table: mv, columns: [mv.v], distribution: SomeShard }
          └─BatchExchange { order: [], dist: Single }
            └─BatchScan { table: mv, columns: [mv.v], distribution: SomeShard }
