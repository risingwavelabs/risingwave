# This file is automatically generated. See `src/frontend/planner_test/README.md` for more information.
- sql: |
    SELECT DISTINCT dep.deptype, dep.classid, dep.objid, cl.relkind, attr.attname,pg_get_expr(ad.adbin, ad.adrelid) adefval,
        CASE WHEN cl.relkind IS NOT NULL THEN cl.relkind::text || COALESCE(dep.objsubid::text, '')::text
            WHEN tg.oid IS NOT NULL THEN 'T'::text
            WHEN ty.oid IS NOT NULL THEN 'y'::text
            WHEN ns.oid IS NOT NULL THEN 'n'::text
            WHEN pr.oid IS NOT NULL THEN 'p'::text
            WHEN la.oid IS NOT NULL THEN 'l'::text
            WHEN rw.oid IS NOT NULL THEN 'R'::text
            WHEN co.oid IS NOT NULL THEN 'C'::text || contype::text
            WHEN ad.oid IS NOT NULL THEN 'A'::text
            ELSE ''
        END AS type,
        COALESCE(coc.relname, clrw.relname, tgr.relname) AS ownertable,
        CASE WHEN cl.relname IS NOT NULL AND att.attname IS NOT NULL THEN cl.relname || '.' || att.attname
        ELSE COALESCE(cl.relname, co.conname, pr.proname, tg.tgname, ty.typname, la.lanname, rw.rulename, ns.nspname)
        END AS refname,
        COALESCE(nsc.nspname, nso.nspname, nsp.nspname, nst.nspname, nsrw.nspname, tgrn.nspname) AS nspname
    FROM pg_depend dep
    LEFT JOIN pg_class cl ON dep.objid=cl.oid
    LEFT JOIN pg_attribute att ON dep.objid=att.attrelid AND dep.objsubid=att.attnum
    LEFT JOIN pg_namespace nsc ON cl.relnamespace=nsc.oid
    LEFT JOIN pg_proc pr ON dep.objid=pr.oid
    LEFT JOIN pg_namespace nsp ON pr.pronamespace=nsp.oid
    LEFT JOIN pg_trigger tg ON dep.objid=tg.oid
    LEFT JOIN pg_class tgr ON tg.tgrelid=tgr.oid
    LEFT JOIN pg_namespace tgrn ON tgr.relnamespace=tgrn.oid
    LEFT JOIN pg_type ty ON dep.objid=ty.oid
    LEFT JOIN pg_namespace nst ON ty.typnamespace=nst.oid
    LEFT JOIN pg_constraint co ON dep.objid=co.oid
    LEFT JOIN pg_class coc ON co.conrelid=coc.oid
    LEFT JOIN pg_namespace nso ON co.connamespace=nso.oid
    LEFT JOIN pg_rewrite rw ON dep.objid=rw.oid
    LEFT JOIN pg_class clrw ON clrw.oid=rw.ev_class
    LEFT JOIN pg_namespace nsrw ON clrw.relnamespace=nsrw.oid
    LEFT JOIN pg_language la ON dep.objid=la.oid
    LEFT JOIN pg_namespace ns ON dep.objid=ns.oid
    LEFT JOIN pg_attrdef ad ON ad.oid=dep.objid
    LEFT JOIN pg_attribute attr ON attr.attrelid=ad.adrelid and attr.attnum=ad.adnum
    WHERE dep.refobjid=$1
    ORDER BY type
  batch_plan: |-
    BatchExchange { order: [$expr3 ASC], dist: Single }
    └─BatchSort { order: [$expr3 ASC] }
      └─BatchHashAgg { group_key: [null:Varchar, null:Int32, null:Int32, pg_class.relkind, rw_columns.name, '':Varchar, $expr3, $expr4, $expr5, $expr6], aggs: [] }
        └─BatchExchange { order: [], dist: HashShard(null:Varchar, null:Int32, null:Int32, pg_class.relkind, rw_columns.name, '':Varchar, $expr3, $expr4, $expr5, $expr6) }
          └─BatchProject { exprs: [null:Varchar, null:Int32, null:Int32, pg_class.relkind, rw_columns.name, '':Varchar, Case(IsNotNull(pg_class.relkind), ConcatOp(pg_class.relkind, Coalesce(null:Int16::Varchar, '':Varchar)), IsNotNull(null:Int32), 'T':Varchar, IsNotNull(pg_type.oid), 'y':Varchar, IsNotNull(rw_schemas.id), 'n':Varchar, IsNotNull(null:Int32), 'p':Varchar, IsNotNull(null:Int32), 'l':Varchar, IsNotNull(null:Int32), 'R':Varchar, IsNotNull(pg_constraint.oid), ConcatOp('C':Varchar, pg_constraint.contype), IsNotNull(null:Int32), 'A':Varchar, '':Varchar) as $expr3, Coalesce(pg_class.relname, pg_class.relname, pg_class.relname) as $expr4, Case((IsNotNull(pg_class.relname) AND IsNotNull(rw_columns.name)), ConcatOp(ConcatOp(pg_class.relname, '.':Varchar), rw_columns.name), Coalesce(pg_class.relname, pg_constraint.conname, null:Varchar, null:Varchar, pg_type.typname, null:Varchar, null:Varchar, rw_schemas.name)) as $expr5, Coalesce(rw_schemas.name, rw_schemas.name, rw_schemas.name, rw_schemas.name, rw_schemas.name, rw_schemas.name) as $expr6] }
            └─BatchHashJoin { type: LeftOuter, predicate: null:Int32 = rw_columns.relation_id AND null:Int16 = $expr2, output: [null:Int32, null:Int32, null:Int16, null:Varchar, pg_class.relname, pg_class.relkind, rw_columns.name, rw_schemas.name, null:Int32, null:Varchar, rw_schemas.name, null:Int32, null:Varchar, pg_class.relname, rw_schemas.name, pg_type.oid, pg_type.typname, rw_schemas.name, pg_constraint.oid, pg_constraint.conname, pg_constraint.contype, pg_class.relname, rw_schemas.name, null:Int32, null:Varchar, pg_class.relname, rw_schemas.name, null:Int32, null:Varchar, rw_schemas.id, rw_schemas.name, null:Int32, rw_columns.name] }
              ├─BatchExchange { order: [], dist: HashShard(null:Int32, null:Int16) }
              │ └─BatchHashJoin { type: LeftOuter, predicate: null:Int32 = null:Int32, output: all }
              │   ├─BatchHashJoin { type: LeftOuter, predicate: null:Int32 = rw_schemas.id, output: all }
              │   │ ├─BatchHashJoin { type: LeftOuter, predicate: null:Int32 = null:Int32, output: all }
              │   │ │ ├─BatchExchange { order: [], dist: HashShard(null:Int32) }
              │   │ │ │ └─BatchHashJoin { type: LeftOuter, predicate: pg_class.relnamespace = rw_schemas.id, output: [null:Int32, null:Int32, null:Int16, null:Varchar, pg_class.relname, pg_class.relkind, rw_columns.name, rw_schemas.name, null:Int32, null:Varchar, rw_schemas.name, null:Int32, null:Varchar, pg_class.relname, rw_schemas.name, pg_type.oid, pg_type.typname, rw_schemas.name, pg_constraint.oid, pg_constraint.conname, pg_constraint.contype, pg_class.relname, rw_schemas.name, null:Int32, null:Varchar, pg_class.relname, rw_schemas.name] }
              │   │ │ │   ├─BatchExchange { order: [], dist: HashShard(pg_class.relnamespace) }
              │   │ │ │   │ └─BatchHashJoin { type: LeftOuter, predicate: null:Int32 = pg_class.oid, output: [null:Int32, null:Int32, null:Int16, null:Varchar, pg_class.relname, pg_class.relkind, rw_columns.name, rw_schemas.name, null:Int32, null:Varchar, rw_schemas.name, null:Int32, null:Varchar, pg_class.relname, rw_schemas.name, pg_type.oid, pg_type.typname, rw_schemas.name, pg_constraint.oid, pg_constraint.conname, pg_constraint.contype, pg_class.relname, rw_schemas.name, null:Int32, null:Varchar, pg_class.relname, pg_class.relnamespace] }
              │   │ │ │   │   ├─BatchExchange { order: [], dist: HashShard(null:Int32) }
              │   │ │ │   │   │ └─BatchHashJoin { type: LeftOuter, predicate: null:Int32 = null:Int32, output: all }
              │   │ │ │   │   │   ├─BatchExchange { order: [], dist: HashShard(null:Int32) }
              │   │ │ │   │   │   │ └─BatchHashJoin { type: LeftOuter, predicate: pg_constraint.connamespace = rw_schemas.id, output: [null:Int32, null:Int32, null:Int16, null:Varchar, pg_class.relname, pg_class.relkind, rw_columns.name, rw_schemas.name, null:Int32, null:Varchar, rw_schemas.name, null:Int32, null:Varchar, pg_class.relname, rw_schemas.name, pg_type.oid, pg_type.typname, rw_schemas.name, pg_constraint.oid, pg_constraint.conname, pg_constraint.contype, pg_class.relname, rw_schemas.name] }
              │   │ │ │   │   │   │   ├─BatchExchange { order: [], dist: HashShard(pg_constraint.connamespace) }
              │   │ │ │   │   │   │   │ └─BatchHashJoin { type: LeftOuter, predicate: pg_constraint.conrelid = pg_class.oid, output: [null:Int32, null:Int32, null:Int16, null:Varchar, pg_class.relname, pg_class.relkind, rw_columns.name, rw_schemas.name, null:Int32, null:Varchar, rw_schemas.name, null:Int32, null:Varchar, pg_class.relname, rw_schemas.name, pg_type.oid, pg_type.typname, rw_schemas.name, pg_constraint.oid, pg_constraint.conname, pg_constraint.connamespace, pg_constraint.contype, pg_class.relname] }
              │   │ │ │   │   │   │   │   ├─BatchExchange { order: [], dist: HashShard(pg_constraint.conrelid) }
              │   │ │ │   │   │   │   │   │ └─BatchHashJoin { type: LeftOuter, predicate: null:Int32 = pg_constraint.oid, output: all }
              │   │ │ │   │   │   │   │   │   ├─BatchExchange { order: [], dist: HashShard(null:Int32) }
              │   │ │ │   │   │   │   │   │   │ └─BatchHashJoin { type: LeftOuter, predicate: pg_type.typnamespace = rw_schemas.id, output: [null:Int32, null:Int32, null:Int16, null:Varchar, pg_class.relname, pg_class.relkind, rw_columns.name, rw_schemas.name, null:Int32, null:Varchar, rw_schemas.name, null:Int32, null:Varchar, pg_class.relname, rw_schemas.name, pg_type.oid, pg_type.typname, rw_schemas.name] }
              │   │ │ │   │   │   │   │   │   │   ├─BatchExchange { order: [], dist: HashShard(pg_type.typnamespace) }
              │   │ │ │   │   │   │   │   │   │   │ └─BatchHashJoin { type: LeftOuter, predicate: null:Int32 = pg_type.oid, output: all }
              │   │ │ │   │   │   │   │   │   │   │   ├─BatchExchange { order: [], dist: HashShard(null:Int32) }
              │   │ │ │   │   │   │   │   │   │   │   │ └─BatchHashJoin { type: LeftOuter, predicate: pg_class.relnamespace = rw_schemas.id, output: [null:Int32, null:Int32, null:Int16, null:Varchar, pg_class.relname, pg_class.relkind, rw_columns.name, rw_schemas.name, null:Int32, null:Varchar, rw_schemas.name, null:Int32, null:Varchar, pg_class.relname, rw_schemas.name] }
              │   │ │ │   │   │   │   │   │   │   │   │   ├─BatchExchange { order: [], dist: HashShard(pg_class.relnamespace) }
              │   │ │ │   │   │   │   │   │   │   │   │   │ └─BatchHashJoin { type: LeftOuter, predicate: null:Int32 = pg_class.oid, output: [null:Int32, null:Int32, null:Int16, null:Varchar, pg_class.relname, pg_class.relkind, rw_columns.name, rw_schemas.name, null:Int32, null:Varchar, rw_schemas.name, null:Int32, null:Varchar, pg_class.relname, pg_class.relnamespace] }
              │   │ │ │   │   │   │   │   │   │   │   │   │   ├─BatchExchange { order: [], dist: HashShard(null:Int32) }
              │   │ │ │   │   │   │   │   │   │   │   │   │   │ └─BatchHashJoin { type: LeftOuter, predicate: null:Int32 = null:Int32, output: all }
              │   │ │ │   │   │   │   │   │   │   │   │   │   │   ├─BatchExchange { order: [], dist: HashShard(null:Int32) }
              │   │ │ │   │   │   │   │   │   │   │   │   │   │   │ └─BatchHashJoin { type: LeftOuter, predicate: null:Int32 = rw_schemas.id, output: [null:Int32, null:Int32, null:Int16, null:Varchar, pg_class.relname, pg_class.relkind, rw_columns.name, rw_schemas.name, null:Int32, null:Varchar, rw_schemas.name] }
              │   │ │ │   │   │   │   │   │   │   │   │   │   │   │   ├─BatchExchange { order: [], dist: HashShard(null:Int32) }
              │   │ │ │   │   │   │   │   │   │   │   │   │   │   │   │ └─BatchHashJoin { type: LeftOuter, predicate: null:Int32 = null:Int32, output: all }
              │   │ │ │   │   │   │   │   │   │   │   │   │   │   │   │   ├─BatchExchange { order: [], dist: HashShard(null:Int32) }
              │   │ │ │   │   │   │   │   │   │   │   │   │   │   │   │   │ └─BatchHashJoin { type: LeftOuter, predicate: pg_class.relnamespace = rw_schemas.id, output: [null:Int32, null:Int32, null:Int16, null:Varchar, pg_class.relname, pg_class.relkind, rw_columns.name, rw_schemas.name] }
              │   │ │ │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├─BatchExchange { order: [], dist: HashShard(pg_class.relnamespace) }
              │   │ │ │   │   │   │   │   │   │   │   │   │   │   │   │   │   │ └─BatchHashJoin { type: LeftOuter, predicate: null:Int32 = rw_columns.relation_id AND null:Int16 = $expr1, output: [null:Int32, null:Int32, null:Int16, null:Varchar, pg_class.relname, pg_class.relnamespace, pg_class.relkind, rw_columns.name] }
              │   │ │ │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├─BatchExchange { order: [], dist: HashShard(null:Int32, null:Int16) }
              │   │ │ │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │ └─BatchHashJoin { type: LeftOuter, predicate: null:Int32 = pg_class.oid, output: [null:Int32, null:Int32, null:Int16, null:Varchar, pg_class.relname, pg_class.relnamespace, pg_class.relkind] }
              │   │ │ │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   ├─BatchExchange { order: [], dist: HashShard(null:Int32) }
              │   │ │ │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │ └─BatchValues { rows: [] }
              │   │ │ │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └─BatchExchange { order: [], dist: HashShard(pg_class.oid) }
              │   │ │ │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │     └─BatchScan { table: pg_class, columns: [pg_class.oid, pg_class.relname, pg_class.relnamespace, pg_class.relkind], distribution: Single }
              │   │ │ │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   └─BatchExchange { order: [], dist: HashShard(rw_columns.relation_id, $expr1) }
              │   │ │ │   │   │   │   │   │   │   │   │   │   │   │   │   │   │     └─BatchProject { exprs: [rw_columns.relation_id, rw_columns.name, rw_columns.position::Int16 as $expr1] }
              │   │ │ │   │   │   │   │   │   │   │   │   │   │   │   │   │   │       └─BatchFilter { predicate: (rw_columns.is_hidden = false:Boolean) }
              │   │ │ │   │   │   │   │   │   │   │   │   │   │   │   │   │   │         └─BatchScan { table: rw_columns, columns: [rw_columns.relation_id, rw_columns.name, rw_columns.position, rw_columns.is_hidden], distribution: Single }
              │   │ │ │   │   │   │   │   │   │   │   │   │   │   │   │   │   └─BatchExchange { order: [], dist: HashShard(rw_schemas.id) }
              │   │ │ │   │   │   │   │   │   │   │   │   │   │   │   │   │     └─BatchScan { table: rw_schemas, columns: [rw_schemas.id, rw_schemas.name], distribution: Single }
              │   │ │ │   │   │   │   │   │   │   │   │   │   │   │   │   └─BatchExchange { order: [], dist: HashShard(null:Int32) }
              │   │ │ │   │   │   │   │   │   │   │   │   │   │   │   │     └─BatchValues { rows: [] }
              │   │ │ │   │   │   │   │   │   │   │   │   │   │   │   └─BatchExchange { order: [], dist: HashShard(rw_schemas.id) }
              │   │ │ │   │   │   │   │   │   │   │   │   │   │   │     └─BatchScan { table: rw_schemas, columns: [rw_schemas.id, rw_schemas.name], distribution: Single }
              │   │ │ │   │   │   │   │   │   │   │   │   │   │   └─BatchExchange { order: [], dist: HashShard(null:Int32) }
              │   │ │ │   │   │   │   │   │   │   │   │   │   │     └─BatchValues { rows: [] }
              │   │ │ │   │   │   │   │   │   │   │   │   │   └─BatchExchange { order: [], dist: HashShard(pg_class.oid) }
              │   │ │ │   │   │   │   │   │   │   │   │   │     └─BatchScan { table: pg_class, columns: [pg_class.oid, pg_class.relname, pg_class.relnamespace], distribution: Single }
              │   │ │ │   │   │   │   │   │   │   │   │   └─BatchExchange { order: [], dist: HashShard(rw_schemas.id) }
              │   │ │ │   │   │   │   │   │   │   │   │     └─BatchScan { table: rw_schemas, columns: [rw_schemas.id, rw_schemas.name], distribution: Single }
              │   │ │ │   │   │   │   │   │   │   │   └─BatchExchange { order: [], dist: HashShard(pg_type.oid) }
              │   │ │ │   │   │   │   │   │   │   │     └─BatchScan { table: pg_type, columns: [pg_type.oid, pg_type.typname, pg_type.typnamespace], distribution: Single }
              │   │ │ │   │   │   │   │   │   │   └─BatchExchange { order: [], dist: HashShard(rw_schemas.id) }
              │   │ │ │   │   │   │   │   │   │     └─BatchScan { table: rw_schemas, columns: [rw_schemas.id, rw_schemas.name], distribution: Single }
              │   │ │ │   │   │   │   │   │   └─BatchExchange { order: [], dist: HashShard(pg_constraint.oid) }
              │   │ │ │   │   │   │   │   │     └─BatchScan { table: pg_constraint, columns: [pg_constraint.oid, pg_constraint.conname, pg_constraint.connamespace, pg_constraint.contype, pg_constraint.conrelid], distribution: Single }
              │   │ │ │   │   │   │   │   └─BatchExchange { order: [], dist: HashShard(pg_class.oid) }
              │   │ │ │   │   │   │   │     └─BatchScan { table: pg_class, columns: [pg_class.oid, pg_class.relname], distribution: Single }
              │   │ │ │   │   │   │   └─BatchExchange { order: [], dist: HashShard(rw_schemas.id) }
              │   │ │ │   │   │   │     └─BatchScan { table: rw_schemas, columns: [rw_schemas.id, rw_schemas.name], distribution: Single }
              │   │ │ │   │   │   └─BatchExchange { order: [], dist: HashShard(null:Int32) }
              │   │ │ │   │   │     └─BatchValues { rows: [] }
              │   │ │ │   │   └─BatchExchange { order: [], dist: HashShard(pg_class.oid) }
              │   │ │ │   │     └─BatchScan { table: pg_class, columns: [pg_class.oid, pg_class.relname, pg_class.relnamespace], distribution: Single }
              │   │ │ │   └─BatchExchange { order: [], dist: HashShard(rw_schemas.id) }
              │   │ │ │     └─BatchScan { table: rw_schemas, columns: [rw_schemas.id, rw_schemas.name], distribution: Single }
              │   │ │ └─BatchExchange { order: [], dist: HashShard(null:Int32) }
              │   │ │   └─BatchValues { rows: [] }
              │   │ └─BatchExchange { order: [], dist: HashShard(rw_schemas.id) }
              │   │   └─BatchScan { table: rw_schemas, columns: [rw_schemas.id, rw_schemas.name], distribution: Single }
              │   └─BatchExchange { order: [], dist: HashShard(null:Int32) }
              │     └─BatchValues { rows: [] }
              └─BatchExchange { order: [], dist: HashShard(rw_columns.relation_id, $expr2) }
                └─BatchProject { exprs: [rw_columns.relation_id, rw_columns.name, rw_columns.position::Int16 as $expr2] }
                  └─BatchFilter { predicate: (rw_columns.is_hidden = false:Boolean) }
                    └─BatchScan { table: rw_columns, columns: [rw_columns.relation_id, rw_columns.name, rw_columns.position, rw_columns.is_hidden], distribution: Single }
