# This file is automatically generated. See `src/frontend/planner_test/README.md` for more information.
- sql: |
    select * from generate_series(
      '2024-06-21 17:36:00'::timestamptz,
      now(),
      interval '1 hour'
    );
  logical_plan: |-
    LogicalProject { exprs: [generate_series] }
    └─LogicalTableFunction { table_function: GenerateSeries('2024-06-21 17:36:00':Varchar::Timestamptz, Now, '01:00:00':Interval) }
  optimized_logical_plan_for_stream: 'LogicalNow { output: [ts] }'
  stream_plan: |-
    StreamMaterialize { columns: [generate_series], stream_key: [generate_series], pk_columns: [generate_series], pk_conflict: NoCheck, watermark_columns: [generate_series] }
    └─StreamNow { output: [ts] }
- sql: |
    select * from generate_series(
      '2024-06-21 17:36:00',
      now(),
      '1 hour'
    );
  logical_plan: |-
    LogicalProject { exprs: [generate_series] }
    └─LogicalTableFunction { table_function: GenerateSeries('2024-06-21 17:36:00':Varchar::Timestamptz, Now, '01:00:00':Interval) }
  optimized_logical_plan_for_stream: 'LogicalNow { output: [ts] }'
  stream_plan: |-
    StreamMaterialize { columns: [generate_series], stream_key: [generate_series], pk_columns: [generate_series], pk_conflict: NoCheck, watermark_columns: [generate_series] }
    └─StreamNow { output: [ts] }
- sql: |
    select * from generate_series(
      '2024-06-21 17:36:00'::timestamp, -- `timestamp` is implicitly casted to `timestamptz`
      now(),
      interval '1 hour'
    );
  stream_plan: |-
    StreamMaterialize { columns: [generate_series], stream_key: [generate_series], pk_columns: [generate_series], pk_conflict: NoCheck, watermark_columns: [generate_series] }
    └─StreamNow { output: [ts] }
- sql: |
    select * from generate_series(
      now() - interval '1 hour',
      now(),
      interval '1 hour'
    );
  stream_error: |-
    Not supported: General `now()` function in streaming queries
    HINT: Streaming `now()` is currently only supported in GenerateSeries and TemporalFilter patterns.
- sql: |
    select * from unnest(array[now(), now()]);
  stream_error: |-
    Not supported: General `now()` function in streaming queries
    HINT: Streaming `now()` is currently only supported in GenerateSeries and TemporalFilter patterns.
- sql: |
    select 1::int as constant from generate_series(
      '2024-06-21 17:36:00'::timestamptz,
      now(),
      interval '1 hour'
    );
  logical_plan: |-
    LogicalProject { exprs: [1:Int32] }
    └─LogicalTableFunction { table_function: GenerateSeries('2024-06-21 17:36:00':Varchar::Timestamptz, Now, '01:00:00':Interval) }
  optimized_logical_plan_for_stream: 'LogicalValues { rows: [], schema: Schema { fields: [1:Int32:Int32] } }'
  stream_plan: |-
    StreamMaterialize { columns: [constant, _row_id(hidden)], stream_key: [_row_id], pk_columns: [_row_id], pk_conflict: NoCheck }
    └─StreamValues { rows: [] }
- sql: |
    select
      extract('year' from t) as year,
      extract('month' from t) as month,
      1::int as constant
    from generate_series(
      '2024-01-01 00:00:00+00'::timestamptz,
      now(),
      interval '1 month'
    ) as s(t);
  logical_plan: |-
    LogicalProject { exprs: [Extract('YEAR':Varchar, generate_series) as $expr1, Extract('MONTH':Varchar, generate_series) as $expr2, 1:Int32] }
    └─LogicalTableFunction { table_function: GenerateSeries('2024-01-01 00:00:00+00:00':Timestamptz, Now, '1 mon':Interval) }
  optimized_logical_plan_for_stream: |-
    LogicalProject { exprs: [Extract('YEAR':Varchar, ts) as $expr1, Extract('MONTH':Varchar, ts) as $expr2, 1:Int32] }
    └─LogicalNow { output: [ts] }
  stream_plan: |-
    StreamMaterialize { columns: [year, month, constant, ts(hidden)], stream_key: [ts], pk_columns: [ts], pk_conflict: NoCheck, watermark_columns: [ts(hidden)] }
    └─StreamProject { exprs: [Extract('YEAR':Varchar, ts, 'UTC':Varchar) as $expr1, Extract('MONTH':Varchar, ts, 'UTC':Varchar) as $expr2, 1:Int32, ts], output_watermarks: [[ts]] }
      └─StreamNow { output: [ts] }
