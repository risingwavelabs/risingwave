# This file is automatically generated. See `src/frontend/planner_test/README.md` for more information.
- sql: |
    create table t (v1 bigint, v2 double precision);
    select v1 from t
  logical_plan: |-
    LogicalProject { exprs: [t.v1] }
    └─LogicalScan { table: t, columns: [t.v1, t.v2, t._row_id, t._rw_timestamp] }
  optimized_logical_plan_for_batch: 'LogicalScan { table: t, columns: [t.v1] }'
- name: filter
  sql: |
    create table t (v1 bigint, v2 double precision, v3 int);
    select v1 from t where v2 > 2
  logical_plan: |-
    LogicalProject { exprs: [t.v1] }
    └─LogicalFilter { predicate: (t.v2 > 2:Int32::Float64) }
      └─LogicalScan { table: t, columns: [t.v1, t.v2, t.v3, t._row_id, t._rw_timestamp] }
  optimized_logical_plan_for_batch: 'LogicalScan { table: t, output_columns: [t.v1], required_columns: [t.v1, t.v2], predicate: (t.v2 > 2:Int32::Float64) }'
- name: join
  sql: |
    create table t1 (v1 int, v2 int, v3 int);
    create table t2 (v1 int, v2 int, v3 int);
    select t1.v1, t2.v1 from t1 join t2 on t1.v2 = t2.v2;
  logical_plan: |-
    LogicalProject { exprs: [t1.v1, t2.v1] }
    └─LogicalJoin { type: Inner, on: (t1.v2 = t2.v2), output: all }
      ├─LogicalScan { table: t1, columns: [t1.v1, t1.v2, t1.v3, t1._row_id, t1._rw_timestamp] }
      └─LogicalScan { table: t2, columns: [t2.v1, t2.v2, t2.v3, t2._row_id, t2._rw_timestamp] }
  optimized_logical_plan_for_batch: |-
    LogicalJoin { type: Inner, on: (t1.v2 = t2.v2), output: [t1.v1, t2.v1] }
    ├─LogicalScan { table: t1, columns: [t1.v1, t1.v2] }
    └─LogicalScan { table: t2, columns: [t2.v1, t2.v2] }
- name: agg
  sql: |
    create table t (v1 bigint, v2 double precision, v3 int);
    select count(v1) from t where v2 > 2
  logical_plan: |-
    LogicalProject { exprs: [count(t.v1)] }
    └─LogicalAgg { aggs: [count(t.v1)] }
      └─LogicalProject { exprs: [t.v1] }
        └─LogicalFilter { predicate: (t.v2 > 2:Int32::Float64) }
          └─LogicalScan { table: t, columns: [t.v1, t.v2, t.v3, t._row_id, t._rw_timestamp] }
  optimized_logical_plan_for_batch: |-
    LogicalAgg { aggs: [count(t.v1)] }
    └─LogicalScan { table: t, output_columns: [t.v1], required_columns: [t.v1, t.v2], predicate: (t.v2 > 2:Int32::Float64) }
- name: top n
  sql: |
    create table t (v1 int, v2 int, v3 int);
    select v3 from (select * from t order by v3, v2 limit 2) as s;
  logical_plan: |-
    LogicalProject { exprs: [t.v3] }
    └─LogicalTopN { order: [t.v3 ASC, t.v2 ASC], limit: 2, offset: 0 }
      └─LogicalProject { exprs: [t.v1, t.v2, t.v3] }
        └─LogicalScan { table: t, columns: [t.v1, t.v2, t.v3, t._row_id, t._rw_timestamp] }
  optimized_logical_plan_for_batch: |-
    LogicalProject { exprs: [t.v3] }
    └─LogicalTopN { order: [t.v3 ASC, t.v2 ASC], limit: 2, offset: 0 }
      └─LogicalScan { table: t, columns: [t.v2, t.v3] }
- name: constant
  sql: |
    create table t (v1 bigint, v2 double precision, v3 int);
    select 1 from t
  logical_plan: |-
    LogicalProject { exprs: [1:Int32] }
    └─LogicalScan { table: t, columns: [t.v1, t.v2, t.v3, t._row_id, t._rw_timestamp] }
  optimized_logical_plan_for_batch: |-
    LogicalProject { exprs: [1:Int32] }
    └─LogicalScan { table: t, columns: [] }
- name: constant + filter
  sql: |
    create table t (v1 bigint, v2 double precision, v3 int);
    select 1 from t where v2>1
  logical_plan: |-
    LogicalProject { exprs: [1:Int32] }
    └─LogicalFilter { predicate: (t.v2 > 1:Int32::Float64) }
      └─LogicalScan { table: t, columns: [t.v1, t.v2, t.v3, t._row_id, t._rw_timestamp] }
  optimized_logical_plan_for_batch: |-
    LogicalProject { exprs: [1:Int32] }
    └─LogicalScan { table: t, output_columns: [], required_columns: [t.v2], predicate: (t.v2 > 1:Int32::Float64) }
- name: constant agg
  sql: |
    create table t (v1 bigint, v2 double precision, v3 int);
    select count(1) from t
  logical_plan: |-
    LogicalProject { exprs: [count(1:Int32)] }
    └─LogicalAgg { aggs: [count(1:Int32)] }
      └─LogicalProject { exprs: [1:Int32] }
        └─LogicalScan { table: t, columns: [t.v1, t.v2, t.v3, t._row_id, t._rw_timestamp] }
  optimized_logical_plan_for_batch: |-
    LogicalAgg { aggs: [count(1:Int32)] }
    └─LogicalProject { exprs: [1:Int32] }
      └─LogicalScan { table: t, columns: [] }
- name: constant agg + filter
  sql: |
    create table t (v1 bigint, v2 double precision, v3 int);
    select count(1) from t where v2>1
  logical_plan: |-
    LogicalProject { exprs: [count(1:Int32)] }
    └─LogicalAgg { aggs: [count(1:Int32)] }
      └─LogicalProject { exprs: [1:Int32] }
        └─LogicalFilter { predicate: (t.v2 > 1:Int32::Float64) }
          └─LogicalScan { table: t, columns: [t.v1, t.v2, t.v3, t._row_id, t._rw_timestamp] }
  optimized_logical_plan_for_batch: |-
    LogicalAgg { aggs: [count(1:Int32)] }
    └─LogicalProject { exprs: [1:Int32] }
      └─LogicalScan { table: t, output_columns: [], required_columns: [t.v2], predicate: (t.v2 > 1:Int32::Float64) }
- name: join + filter
  sql: |
    create table t1 (v1 int, v2 int, v3 int);
    create table t2 (v1 int, v2 int, v3 int);
    select t1.v1, t2.v1 from t1 join t2 on t1.v2 = t2.v2 where t1.v3 < 1;
  logical_plan: |-
    LogicalProject { exprs: [t1.v1, t2.v1] }
    └─LogicalFilter { predicate: (t1.v3 < 1:Int32) }
      └─LogicalJoin { type: Inner, on: (t1.v2 = t2.v2), output: all }
        ├─LogicalScan { table: t1, columns: [t1.v1, t1.v2, t1.v3, t1._row_id, t1._rw_timestamp] }
        └─LogicalScan { table: t2, columns: [t2.v1, t2.v2, t2.v3, t2._row_id, t2._rw_timestamp] }
  optimized_logical_plan_for_batch: |-
    LogicalJoin { type: Inner, on: (t1.v2 = t2.v2), output: [t1.v1, t2.v1] }
    ├─LogicalScan { table: t1, output_columns: [t1.v1, t1.v2], required_columns: [t1.v1, t1.v2, t1.v3], predicate: (t1.v3 < 1:Int32) }
    └─LogicalScan { table: t2, columns: [t2.v1, t2.v2] }
- name: project set
  sql: |
    create table t(v1 int, v2 int, v3 int, v4 int, arr int[]);
    with cte as (select v1, v2, v3, unnest(arr) as arr_unnested from t) select * from cte where v1=10 AND v2=20 AND v3=30 AND arr_unnested=30;
  logical_plan: |-
    LogicalProject { exprs: [t.v1, t.v2, t.v3, Unnest($4)] }
    └─LogicalFilter { predicate: (t.v1 = 10:Int32) AND (t.v2 = 20:Int32) AND (t.v3 = 30:Int32) AND (Unnest($4) = 30:Int32) }
      └─LogicalShare { id: 3 }
        └─LogicalProject { exprs: [t.v1, t.v2, t.v3, Unnest($4)] }
          └─LogicalProjectSet { select_list: [$0, $1, $2, Unnest($4)] }
            └─LogicalScan { table: t, columns: [t.v1, t.v2, t.v3, t.v4, t.arr, t._row_id, t._rw_timestamp] }
  optimized_logical_plan_for_batch: |-
    LogicalProject { exprs: [t.v1, t.v2, t.v3, Unnest($3)] }
    └─LogicalFilter { predicate: (Unnest($3) = 30:Int32) }
      └─LogicalProjectSet { select_list: [$0, $1, $2, Unnest($3)] }
        └─LogicalScan { table: t, columns: [t.v1, t.v2, t.v3, t.arr], predicate: (t.v1 = 10:Int32) AND (t.v2 = 20:Int32) AND (t.v3 = 30:Int32) }
- name: over window
  sql: |
    create table t(x int, y int, z int, w int);
    SELECT rank FROM (
        SELECT x, y, z, row_number() OVER (PARTITION BY x ORDER BY y) AS rank FROM t
    )
    WHERE z > 0 and y > 0 and x > 0 and rank <= 3;
  logical_plan: |-
    LogicalProject { exprs: [row_number] }
    └─LogicalFilter { predicate: (t.z > 0:Int32) AND (t.y > 0:Int32) AND (t.x > 0:Int32) AND (row_number <= 3:Int32) }
      └─LogicalProject { exprs: [t.x, t.y, t.z, row_number] }
        └─LogicalOverWindow { window_functions: [row_number() OVER(PARTITION BY t.x ORDER BY t.y ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)] }
          └─LogicalProject { exprs: [t.x, t.y, t.z, t.w, t._row_id, t._rw_timestamp] }
            └─LogicalScan { table: t, columns: [t.x, t.y, t.z, t.w, t._row_id, t._rw_timestamp] }
  optimized_logical_plan_for_batch: |-
    LogicalProject { exprs: [row_number] }
    └─LogicalOverWindow { window_functions: [row_number() OVER(PARTITION BY t.x ORDER BY t.y ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)] }
      └─LogicalProject { exprs: [t.x, t.y] }
        └─LogicalFilter { predicate: (t.z > 0:Int32) AND (t.y > 0:Int32) }
          └─LogicalTopN { order: [t.y ASC], limit: 3, offset: 0, group_key: [t.x] }
            └─LogicalScan { table: t, columns: [t.x, t.y, t.z], predicate: (t.x > 0:Int32) }
- name: mixed
  sql: |
    create table t (v1 bigint, v2 double precision, v3 int);
    select count(1), count(v1) from t where v2>1
  logical_plan: |-
    LogicalProject { exprs: [count(1:Int32), count(t.v1)] }
    └─LogicalAgg { aggs: [count(1:Int32), count(t.v1)] }
      └─LogicalProject { exprs: [1:Int32, t.v1] }
        └─LogicalFilter { predicate: (t.v2 > 1:Int32::Float64) }
          └─LogicalScan { table: t, columns: [t.v1, t.v2, t.v3, t._row_id, t._rw_timestamp] }
  optimized_logical_plan_for_batch: |-
    LogicalAgg { aggs: [count(1:Int32), count(t.v1)] }
    └─LogicalProject { exprs: [1:Int32, t.v1] }
      └─LogicalScan { table: t, output_columns: [t.v1], required_columns: [t.v1, t.v2], predicate: (t.v2 > 1:Int32::Float64) }
- name: hop window, time_col not selected
  sql: |
    create table t1 (a int, b int, created_at timestamp);
    select a, window_end from hop(t1, created_at, interval '15' minute, interval '30' minute)
  logical_plan: |-
    LogicalProject { exprs: [t1.a, window_end] }
    └─LogicalHopWindow { time_col: t1.created_at, slide: 00:15:00, size: 00:30:00, output: all }
      └─LogicalFilter { predicate: IsNotNull(t1.created_at) }
        └─LogicalScan { table: t1, columns: [t1.a, t1.b, t1.created_at, t1._row_id, t1._rw_timestamp] }
  optimized_logical_plan_for_batch: |-
    LogicalHopWindow { time_col: t1.created_at, slide: 00:15:00, size: 00:30:00, output: [t1.a, window_end] }
    └─LogicalScan { table: t1, columns: [t1.a, t1.created_at], predicate: IsNotNull(t1.created_at) }
  batch_plan: |-
    BatchHopWindow { time_col: t1.created_at, slide: 00:15:00, size: 00:30:00, output: [t1.a, window_end] }
    └─BatchExchange { order: [], dist: Single }
      └─BatchFilter { predicate: IsNotNull(t1.created_at) }
        └─BatchScan { table: t1, columns: [t1.a, t1.created_at], distribution: SomeShard }
  stream_plan: |-
    StreamMaterialize { columns: [a, window_end, t1._row_id(hidden)], stream_key: [t1._row_id, window_end], pk_columns: [t1._row_id, window_end], pk_conflict: NoCheck }
    └─StreamHopWindow { time_col: t1.created_at, slide: 00:15:00, size: 00:30:00, output: [t1.a, window_end, t1._row_id] }
      └─StreamFilter { predicate: IsNotNull(t1.created_at) }
        └─StreamTableScan { table: t1, columns: [t1.a, t1.created_at, t1._row_id], stream_scan_type: ArrangementBackfill, stream_key: [t1._row_id], pk: [_row_id], dist: UpstreamHashShard(t1._row_id) }
