# This file is automatically generated by `src/sqlparser/tests/parser_test.rs`.
- input: select foo -> bar;
  formatted_sql: SELECT foo -> bar
  formatted_ast: 'Query(Query { with: None, body: Select(Select { distinct: All, projection: [UnnamedExpr(BinaryOp { left: Identifier(Ident { value: "foo", quote_style: None }), op: Arrow, right: Identifier(Ident { value: "bar", quote_style: None }) })], from: [], lateral_views: [], selection: None, group_by: [], having: None, window: [] }), order_by: [], limit: None, offset: None, fetch: None })'
- input: |-
    select foo +-- bar;
      - x;
  formatted_sql: SELECT foo + - x
- input: |-
    select foo --+/* bar;
      - x;
  formatted_sql: SELECT foo - x
- input: |-
    select foo +/* bar;
      -*/- x;
  formatted_sql: SELECT foo + - x
- input: select foo *- bar;
  formatted_sql: SELECT foo * - bar
  formatted_ast: 'Query(Query { with: None, body: Select(Select { distinct: All, projection: [UnnamedExpr(BinaryOp { left: Identifier(Ident { value: "foo", quote_style: None }), op: Multiply, right: UnaryOp { op: Minus, expr: Identifier(Ident { value: "bar", quote_style: None }) } })], from: [], lateral_views: [], selection: None, group_by: [], having: None, window: [] }), order_by: [], limit: None, offset: None, fetch: None })'
- input: 'select foo #- bar;'
  formatted_sql: 'SELECT foo #- bar'
  formatted_ast: 'Query(Query { with: None, body: Select(Select { distinct: All, projection: [UnnamedExpr(BinaryOp { left: Identifier(Ident { value: "foo", quote_style: None }), op: Custom("#-"), right: Identifier(Ident { value: "bar", quote_style: None }) })], from: [], lateral_views: [], selection: None, group_by: [], having: None, window: [] }), order_by: [], limit: None, offset: None, fetch: None })'
- input: select foo +-+ bar;
  formatted_sql: SELECT foo + - + bar
  formatted_ast: 'Query(Query { with: None, body: Select(Select { distinct: All, projection: [UnnamedExpr(BinaryOp { left: Identifier(Ident { value: "foo", quote_style: None }), op: Plus, right: UnaryOp { op: Minus, expr: UnaryOp { op: Plus, expr: Identifier(Ident { value: "bar", quote_style: None }) } } })], from: [], lateral_views: [], selection: None, group_by: [], having: None, window: [] }), order_by: [], limit: None, offset: None, fetch: None })'
- input: select null::struct<foo struct<bar int>>;
  formatted_sql: SELECT CAST(NULL AS STRUCT<foo STRUCT<bar INT>>)
- input: select null::struct<f1 struct<f2 struct<f3 struct<f4 int>>>>;
  formatted_sql: SELECT CAST(NULL AS STRUCT<f1 STRUCT<f2 STRUCT<f3 STRUCT<f4 INT>>>>)
- input: select null::struct<foo int>= row(2);
  error_msg: |-
    sql parser error: invalid struct_data_type
    LINE 1: select null::struct<foo int>= row(2);
                                       ^
- input: select null::struct<foo int> = row(2);
  formatted_sql: SELECT CAST(NULL AS STRUCT<foo INT>) = ROW(2)
- input: select null::struct<foo int>> row(2);
  error_msg: |-
    sql parser error: invalid data_type: unconsumed `>>`
    LINE 1: select null::struct<foo int>> row(2);
                                          ^
- input: select null::struct<foo int> > row(2);
  formatted_sql: SELECT CAST(NULL AS STRUCT<foo INT>) > ROW(2)
- input: select null::struct<foo int>< row(2);
  error_msg: |-
    sql parser error: invalid struct_data_type
    LINE 1: select null::struct<foo int>< row(2);
                                       ^
- input: select null::struct<foo int> < row(2);
  formatted_sql: SELECT CAST(NULL AS STRUCT<foo INT>) < ROW(2)
