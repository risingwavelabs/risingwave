# This file is automatically generated by `src/sqlparser/tests/parser_test.rs`.
- input: select 2 * 3 operator(pg_catalog.+) 4;
  formatted_sql: SELECT 2 * 3 OPERATOR(pg_catalog.+) 4
  formatted_ast: 'Query(Query { with: None, body: Select(Select { distinct: All, projection: [UnnamedExpr(BinaryOp { left: BinaryOp { left: Value(Number("2")), op: Multiply, right: Value(Number("3")) }, op: PGQualified(QualifiedOperator { schema: Some(Ident { value: "pg_catalog", quote_style: None }), name: "+" }), right: Value(Number("4")) })], from: [], lateral_views: [], selection: None, group_by: [], having: None, window: [] }), order_by: [], limit: None, offset: None, fetch: None })'
- input: select 2 < 3 operator(+) 4;
  formatted_sql: SELECT 2 < 3 OPERATOR(+) 4
  formatted_ast: 'Query(Query { with: None, body: Select(Select { distinct: All, projection: [UnnamedExpr(BinaryOp { left: Value(Number("2")), op: Lt, right: BinaryOp { left: Value(Number("3")), op: PGQualified(QualifiedOperator { schema: None, name: "+" }), right: Value(Number("4")) } })], from: [], lateral_views: [], selection: None, group_by: [], having: None, window: [] }), order_by: [], limit: None, offset: None, fetch: None })'
- input: select 2 * 3 operator;
  formatted_sql: SELECT 2 * 3 AS operator
  formatted_ast: 'Query(Query { with: None, body: Select(Select { distinct: All, projection: [ExprWithAlias { expr: BinaryOp { left: Value(Number("2")), op: Multiply, right: Value(Number("3")) }, alias: Ident { value: "operator", quote_style: None } }], from: [], lateral_views: [], selection: None, group_by: [], having: None, window: [] }), order_by: [], limit: None, offset: None, fetch: None })'
- input: select 2 < 3 operator;
  formatted_sql: SELECT 2 < 3 AS operator
  formatted_ast: 'Query(Query { with: None, body: Select(Select { distinct: All, projection: [ExprWithAlias { expr: BinaryOp { left: Value(Number("2")), op: Lt, right: Value(Number("3")) }, alias: Ident { value: "operator", quote_style: None } }], from: [], lateral_views: [], selection: None, group_by: [], having: None, window: [] }), order_by: [], limit: None, offset: None, fetch: None })'
- input: select operator(||/) 2;
  formatted_sql: SELECT OPERATOR(||/) 2
  formatted_ast: 'Query(Query { with: None, body: Select(Select { distinct: All, projection: [UnnamedExpr(UnaryOp { op: PGQualified(QualifiedOperator { schema: None, name: "||/" }), expr: Value(Number("2")) })], from: [], lateral_views: [], selection: None, group_by: [], having: None, window: [] }), order_by: [], limit: None, offset: None, fetch: None })'
- input: select operator;
  formatted_sql: SELECT operator
  formatted_ast: 'Query(Query { with: None, body: Select(Select { distinct: All, projection: [UnnamedExpr(Identifier(Ident { value: "operator", quote_style: None }))], from: [], lateral_views: [], selection: None, group_by: [], having: None, window: [] }), order_by: [], limit: None, offset: None, fetch: None })'
- input: select "operator"(foo.bar);
  formatted_sql: SELECT "operator"(foo.bar)
  formatted_ast: 'Query(Query { with: None, body: Select(Select { distinct: All, projection: [UnnamedExpr(Function(Function { scalar_as_agg: false, name: ObjectName([Ident { value: "operator", quote_style: Some(''"'') }]), arg_list: FunctionArgList { distinct: false, args: [Unnamed(Expr(CompoundIdentifier([Ident { value: "foo", quote_style: None }, Ident { value: "bar", quote_style: None }])))], variadic: false, order_by: [], ignore_nulls: false }, within_group: None, filter: None, over: None }))], from: [], lateral_views: [], selection: None, group_by: [], having: None, window: [] }), order_by: [], limit: None, offset: None, fetch: None })'
- input: select operator operator(+) operator(+) "operator"(9) operator from operator;
  formatted_sql: SELECT operator OPERATOR(+) OPERATOR(+) "operator"(9) AS operator FROM operator
  formatted_ast: 'Query(Query { with: None, body: Select(Select { distinct: All, projection: [ExprWithAlias { expr: BinaryOp { left: Identifier(Ident { value: "operator", quote_style: None }), op: PGQualified(QualifiedOperator { schema: None, name: "+" }), right: UnaryOp { op: PGQualified(QualifiedOperator { schema: None, name: "+" }), expr: Function(Function { scalar_as_agg: false, name: ObjectName([Ident { value: "operator", quote_style: Some(''"'') }]), arg_list: FunctionArgList { distinct: false, args: [Unnamed(Expr(Value(Number("9"))))], variadic: false, order_by: [], ignore_nulls: false }, within_group: None, filter: None, over: None }) } }, alias: Ident { value: "operator", quote_style: None } }], from: [TableWithJoins { relation: Table { name: ObjectName([Ident { value: "operator", quote_style: None }]), alias: None, as_of: None }, joins: [] }], lateral_views: [], selection: None, group_by: [], having: None, window: [] }), order_by: [], limit: None, offset: None, fetch: None })'
- input: select 3 operator(-) 2 - 1;
  formatted_sql: SELECT 3 OPERATOR(-) 2 - 1
  formatted_ast: 'Query(Query { with: None, body: Select(Select { distinct: All, projection: [UnnamedExpr(BinaryOp { left: Value(Number("3")), op: PGQualified(QualifiedOperator { schema: None, name: "-" }), right: BinaryOp { left: Value(Number("2")), op: Minus, right: Value(Number("1")) } })], from: [], lateral_views: [], selection: None, group_by: [], having: None, window: [] }), order_by: [], limit: None, offset: None, fetch: None })'
