# This file is automatically generated by `src/sqlparser/tests/parser_test.rs`.
- input: CREATE TABLE t(a int[]);
  formatted_sql: CREATE TABLE t (a INT[])
- input: CREATE TABLE t(a int[][]);
  formatted_sql: CREATE TABLE t (a INT[][])
- input: CREATE TABLE t(a int[][][]);
  formatted_sql: CREATE TABLE t (a INT[][][])
- input: CREATE TABLE t(a int[);
  error_msg: |-
    sql parser error: invalid data_type
    LINE 1: CREATE TABLE t(a int[);
                                 ^
- input: CREATE TABLE t(a int[[]);
  error_msg: |-
    sql parser error: invalid data_type
    LINE 1: CREATE TABLE t(a int[[]);
                                 ^
- input: CREATE TABLE t(a int]);
  error_msg: |-
    sql parser error: expected ',' or ')' after column definition, found: ]
    LINE 1: CREATE TABLE t(a int]);
                                ^
- input: SELECT foo[0] FROM foos
  formatted_sql: SELECT foo[0] FROM foos
- input: SELECT foo[0][0] FROM foos
  formatted_sql: SELECT foo[0][0] FROM foos
- input: SELECT (CAST(ARRAY[ARRAY[2, 3]] AS INT[][]))[1][2]
  formatted_sql: SELECT (CAST(ARRAY[ARRAY[2, 3]] AS INT[][]))[1][2]
- input: SELECT ARRAY[]
  formatted_sql: SELECT ARRAY[]
- input: SELECT ARRAY[[1,2],[3,4]]
  formatted_sql: SELECT ARRAY[[1, 2], [3, 4]]
- input: SELECT ARRAY[ARRAY[1,2],ARRAY[3,4]]
  formatted_sql: SELECT ARRAY[ARRAY[1, 2], ARRAY[3, 4]]
- input: SELECT ARRAY[[],[]]
  formatted_sql: SELECT ARRAY[[], []]
- input: SELECT ARRAY[ARRAY[],[]]
  error_msg: |-
    sql parser error: expected an expression, found: [
    LINE 1: SELECT ARRAY[ARRAY[],[]]
                                 ^
- input: SELECT ARRAY[[],ARRAY[]]
  error_msg: |-
    sql parser error: expected [, found: ARRAY
    LINE 1: SELECT ARRAY[[],ARRAY[]]
                            ^
- input: SELECT ARRAY[[1,2],3]
  error_msg: |-
    sql parser error: expected [, found: 3
    LINE 1: SELECT ARRAY[[1,2],3]
                               ^
- input: SELECT ARRAY[1,[2,3]]
  error_msg: |-
    sql parser error: expected an expression, found: [
    LINE 1: SELECT ARRAY[1,[2,3]]
                           ^
- input: SELECT ARRAY[ARRAY[1,2],[3,4]]
  error_msg: |-
    sql parser error: expected an expression, found: [
    LINE 1: SELECT ARRAY[ARRAY[1,2],[3,4]]
                                    ^
- input: SELECT ARRAY[[1,2],ARRAY[3,4]]
  error_msg: |-
    sql parser error: expected [, found: ARRAY
    LINE 1: SELECT ARRAY[[1,2],ARRAY[3,4]]
                               ^
- input: SELECT ARRAY[[1,2],[3] || [4]]
  error_msg: |-
    sql parser error: expected ], found: ||
    LINE 1: SELECT ARRAY[[1,2],[3] || [4]]
                                   ^
- input: SELECT [1,2]
  error_msg: |-
    sql parser error: expected an expression, found: [
    LINE 1: SELECT [1,2]
                   ^
- input: CREATE TABLE t (params STRUCT<a STRUCT<b int>>[])
  formatted_sql: CREATE TABLE t (params STRUCT<a STRUCT<b INT>>[])
  formatted_ast: 'CreateTable { or_replace: false, temporary: false, if_not_exists: false, name: ObjectName([Ident { value: "t", quote_style: None }]), columns: [ColumnDef { name: Ident { value: "params", quote_style: None }, data_type: Some(Array(Struct([StructField { name: Ident { value: "a", quote_style: None }, data_type: Struct([StructField { name: Ident { value: "b", quote_style: None }, data_type: Int }]) }]))), collation: None, options: [] }], wildcard_idx: None, constraints: [], with_options: [], format_encode: None, source_watermarks: [], append_only: false, on_conflict: None, with_version_column: None, query: None, cdc_table_info: None, include_column_options: [], webhook_info: None, engine: Hummock }'
- input: SELECT arr[lo:hi] from t;
  formatted_sql: SELECT arr[lo:hi] FROM t
  formatted_ast: 'Query(Query { with: None, body: Select(Select { distinct: All, projection: [UnnamedExpr(ArrayRangeIndex { obj: Identifier(Ident { value: "arr", quote_style: None }), start: Some(Identifier(Ident { value: "lo", quote_style: None })), end: Some(Identifier(Ident { value: "hi", quote_style: None })) })], from: [TableWithJoins { relation: Table { name: ObjectName([Ident { value: "t", quote_style: None }]), alias: None, as_of: None }, joins: [] }], lateral_views: [], selection: None, group_by: [], having: None, window: [] }), order_by: [], limit: None, offset: None, fetch: None })'
- input: SELECT MAP{k:v} from t;
  formatted_sql: 'SELECT MAP {k: v} FROM t'
  formatted_ast: 'Query(Query { with: None, body: Select(Select { distinct: All, projection: [UnnamedExpr(Map { entries: [(Identifier(Ident { value: "k", quote_style: None }), Identifier(Ident { value: "v", quote_style: None }))] })], from: [TableWithJoins { relation: Table { name: ObjectName([Ident { value: "t", quote_style: None }]), alias: None, as_of: None }, joins: [] }], lateral_views: [], selection: None, group_by: [], having: None, window: [] }), order_by: [], limit: None, offset: None, fetch: None })'
- input: |-
    SELECT map{
      aggregate:array_sum(l)
      :
      aggregate:array_sum(h)
    } from t
    group by k;
  formatted_sql: 'SELECT MAP {AGGREGATE:array_sum(l): AGGREGATE:array_sum(h)} FROM t GROUP BY k'
  formatted_ast: 'Query(Query { with: None, body: Select(Select { distinct: All, projection: [UnnamedExpr(Map { entries: [(Function(Function { scalar_as_agg: true, name: ObjectName([Ident { value: "array_sum", quote_style: None }]), arg_list: FunctionArgList { distinct: false, args: [Unnamed(Expr(Identifier(Ident { value: "l", quote_style: None })))], variadic: false, order_by: [], ignore_nulls: false }, within_group: None, filter: None, over: None }), Function(Function { scalar_as_agg: true, name: ObjectName([Ident { value: "array_sum", quote_style: None }]), arg_list: FunctionArgList { distinct: false, args: [Unnamed(Expr(Identifier(Ident { value: "h", quote_style: None })))], variadic: false, order_by: [], ignore_nulls: false }, within_group: None, filter: None, over: None }))] })], from: [TableWithJoins { relation: Table { name: ObjectName([Ident { value: "t", quote_style: None }]), alias: None, as_of: None }, joins: [] }], lateral_views: [], selection: None, group_by: [Identifier(Ident { value: "k", quote_style: None })], having: None, window: [] }), order_by: [], limit: None, offset: None, fetch: None })'
