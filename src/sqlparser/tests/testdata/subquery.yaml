# This file is automatically generated by `src/sqlparser/tests/parser_test.rs`.
- input: select a1 from a where exists (select 1 from b where a1 = b1);
  formatted_sql: SELECT a1 FROM a WHERE EXISTS (SELECT 1 FROM b WHERE a1 = b1)
  formatted_ast: 'Query(Query { with: None, body: Select(Select { distinct: All, projection: [UnnamedExpr(Identifier(Ident { value: "a1", quote_style: None }))], from: [TableWithJoins { relation: Table { name: ObjectName([Ident { value: "a", quote_style: None }]), alias: None, as_of: None }, joins: [] }], lateral_views: [], selection: Some(Exists(Query { with: None, body: Select(Select { distinct: All, projection: [UnnamedExpr(Value(Number("1")))], from: [TableWithJoins { relation: Table { name: ObjectName([Ident { value: "b", quote_style: None }]), alias: None, as_of: None }, joins: [] }], lateral_views: [], selection: Some(BinaryOp { left: Identifier(Ident { value: "a1", quote_style: None }), op: Eq, right: Identifier(Ident { value: "b1", quote_style: None }) }), group_by: [], having: None, window: [] }), order_by: [], limit: None, offset: None, fetch: None })), group_by: [], having: None, window: [] }), order_by: [], limit: None, offset: None, fetch: None })'
- input: select a1 from a where a1 NOT IN (select b1 from b);
  formatted_sql: SELECT a1 FROM a WHERE a1 NOT IN (SELECT b1 FROM b)
  formatted_ast: 'Query(Query { with: None, body: Select(Select { distinct: All, projection: [UnnamedExpr(Identifier(Ident { value: "a1", quote_style: None }))], from: [TableWithJoins { relation: Table { name: ObjectName([Ident { value: "a", quote_style: None }]), alias: None, as_of: None }, joins: [] }], lateral_views: [], selection: Some(InSubquery { expr: Identifier(Ident { value: "a1", quote_style: None }), subquery: Query { with: None, body: Select(Select { distinct: All, projection: [UnnamedExpr(Identifier(Ident { value: "b1", quote_style: None }))], from: [TableWithJoins { relation: Table { name: ObjectName([Ident { value: "b", quote_style: None }]), alias: None, as_of: None }, joins: [] }], lateral_views: [], selection: None, group_by: [], having: None, window: [] }), order_by: [], limit: None, offset: None, fetch: None }, negated: true }), group_by: [], having: None, window: [] }), order_by: [], limit: None, offset: None, fetch: None })'
- input: select a1 from a where a1 < ALL (select b1 from b);
  error_msg: |-
    sql parser error: expected ), found: b1
    LINE 1: select a1 from a where a1 < ALL (select b1 from b);
                                                    ^
- input: select a1 from a where a1 <> SOME (select b1 from b);
  error_msg: |-
    sql parser error: expected ), found: b1
    LINE 1: select a1 from a where a1 <> SOME (select b1 from b);
                                                      ^
- input: select 1 + (select 2);
  formatted_sql: SELECT 1 + (SELECT 2)
  formatted_ast: 'Query(Query { with: None, body: Select(Select { distinct: All, projection: [UnnamedExpr(BinaryOp { left: Value(Number("1")), op: Plus, right: Subquery(Query { with: None, body: Select(Select { distinct: All, projection: [UnnamedExpr(Value(Number("2")))], from: [], lateral_views: [], selection: None, group_by: [], having: None, window: [] }), order_by: [], limit: None, offset: None, fetch: None }) })], from: [], lateral_views: [], selection: None, group_by: [], having: None, window: [] }), order_by: [], limit: None, offset: None, fetch: None })'
- input: select (1, true) < (select 2, false);
  formatted_sql: SELECT ROW(1, true) < (SELECT 2, false)
  formatted_ast: 'Query(Query { with: None, body: Select(Select { distinct: All, projection: [UnnamedExpr(BinaryOp { left: Row([Value(Number("1")), Value(Boolean(true))]), op: Lt, right: Subquery(Query { with: None, body: Select(Select { distinct: All, projection: [UnnamedExpr(Value(Number("2"))), UnnamedExpr(Value(Boolean(false)))], from: [], lateral_views: [], selection: None, group_by: [], having: None, window: [] }), order_by: [], limit: None, offset: None, fetch: None }) })], from: [], lateral_views: [], selection: None, group_by: [], having: None, window: [] }), order_by: [], limit: None, offset: None, fetch: None })'
- input: select array(select 2 union select 3);
  formatted_sql: SELECT ARRAY (SELECT 2 UNION SELECT 3)
  formatted_ast: 'Query(Query { with: None, body: Select(Select { distinct: All, projection: [UnnamedExpr(ArraySubquery(Query { with: None, body: SetOperation { op: Union, all: false, corresponding: Corresponding { corresponding: false, column_list: None }, left: Select(Select { distinct: All, projection: [UnnamedExpr(Value(Number("2")))], from: [], lateral_views: [], selection: None, group_by: [], having: None, window: [] }), right: Select(Select { distinct: All, projection: [UnnamedExpr(Value(Number("3")))], from: [], lateral_views: [], selection: None, group_by: [], having: None, window: [] }) }, order_by: [], limit: None, offset: None, fetch: None }))], from: [], lateral_views: [], selection: None, group_by: [], having: None, window: [] }), order_by: [], limit: None, offset: None, fetch: None })'
