---
services:
  kafka:
    image: confluentinc/cp-kafka:7.1.0
    platform: linux/amd64
    hostname: kafka
    container_name: kafka
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TOOLS_LOG4J_LOGLEVEL: ERROR
    depends_on:
      [ zookeeper ]
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list" ]
      interval: 5s
      timeout: 10s
      retries: 5

  init-kafka:
    image: confluentinc/cp-kafka:7.1.0
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:9092 --list
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic taxi --replication-factor 1 --partitions 1
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic mfa --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "

  zookeeper:
    image: confluentinc/cp-zookeeper:7.1.0
    platform: linux/amd64
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  frontend-node-0:
    extends:
      file: ../../docker/docker-compose-distributed.yml
      service: frontend-node-0
  compactor-0:
    extends:
      file: ../../docker/docker-compose-distributed.yml
      service: compactor-0
  compute-node-0:
    extends:
      file: ../../docker/docker-compose-distributed.yml
      service: compute-node-0
    volumes:
      - "./server/udf.py:/udf.py"
      - "./mfa-start.sql:/mfa-start.sql"
      - "./mfa-mock.sql:/mfa-mock.sql"
  feature-store:
    build:
      context: .
      target: feature-store-server
    depends_on:
      [kafka,meta-node-0,frontend-node-0]
    volumes:
      - ".log:/opt/feature-store/.log"
  postgres-0:
    extends:
      file: ../../docker/docker-compose-distributed.yml
      service: postgres-0
  grafana-0:
    extends:
      file: ../../docker/docker-compose-distributed.yml
      service: grafana-0
  meta-node-0:
    extends:
      file: ../../docker/docker-compose-distributed.yml
      service: meta-node-0
    ports:
      - "8815:8815"
    depends_on:
      [kafka]
  minio-0:
    extends:
      file: ../../docker/docker-compose-distributed.yml
      service: minio-0
  prometheus-0:
    extends:
      file: ../../docker/docker-compose-distributed.yml
      service: prometheus-0
volumes:
  postgres-0:
    external: false
  grafana-0:
    external: false
  minio-0:
    external: false
  prometheus-0:
    external: false
name: risingwave-compose

