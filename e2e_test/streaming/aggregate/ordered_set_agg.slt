statement ok
SET RW_IMPLICIT_FLUSH TO true;

# Test ordered set aggregates in streaming mode with materialized views

statement ok
create table t (a float8);

# Test basic percentile_cont and percentile_disc
statement ok
create materialized view mv_percentile as
select
  percentile_cont(0.5) within group (order by a) as cont_50,
  percentile_disc(0.5) within group (order by a) as disc_50
from t;

statement ok
flush;

# Initially empty
query RR
select * from mv_percentile;
----
NULL NULL

statement ok
insert into t values (1::float8), (3), (5), (7);

query RR
select * from mv_percentile;
----
4 3

statement ok
drop materialized view mv_percentile;

# Test different percentile values
statement ok
create materialized view mv_percentile_25 as
select
  percentile_cont(0.25) within group (order by a) as cont_25,
  percentile_disc(0.2 + 0.3) within group (order by a) as disc_50
from t;

query RR
select * from mv_percentile_25;
----
2.5 3

statement ok
drop materialized view mv_percentile_25;

# Test NULL percentile values
statement ok
create materialized view mv_percentile_null as
select
  percentile_cont(NULL) within group (order by a) as cont_null,
  percentile_cont(0.3 + NULL) within group (order by a) as cont_null_expr
from t;

query RR
select * from mv_percentile_null;
----
NULL NULL

statement ok
drop materialized view mv_percentile_null;

# Test with streaming updates
statement ok
create materialized view mv_streaming_percentile as
select
  percentile_cont(0.5) within group (order by a) as cont_50,
  percentile_disc(0.5) within group (order by a) as disc_50
from t;

query RR
select * from mv_streaming_percentile;
----
4 3

# Add more data
statement ok
insert into t values (9), (11);

query RR
select * from mv_streaming_percentile;
----
6 5

# Delete some data
statement ok
delete from t where a = 1;

query RR
select * from mv_streaming_percentile;
----
7 7

# Test with NULL values in data
statement ok
insert into t values (NULL), (NULL);

query RR
select * from mv_streaming_percentile;
----
7 7

statement ok
drop materialized view mv_streaming_percentile;

# Test grouped percentiles
statement ok
create table t_grouped (group_id int, value float8);

statement ok
create materialized view mv_grouped_percentile as
select
  group_id,
  percentile_cont(0.5) within group (order by value) as cont_50,
  percentile_disc(0.5) within group (order by value) as disc_50
from t_grouped
group by group_id;

statement ok
insert into t_grouped values
(1, 1), (1, 3), (1, 5), (1, 7),
(2, 10), (2, 20), (2, 30);

query IRR
select * from mv_grouped_percentile order by group_id;
----
1 4 3
2 20 20

# Update one group
statement ok
insert into t_grouped values (1, 9);

query IRR
select * from mv_grouped_percentile order by group_id;
----
1 5 5
2 20 20

# Add to the other group
statement ok
insert into t_grouped values (2, 40);

query IRR
select * from mv_grouped_percentile order by group_id;
----
1 5 5
2 25 20

statement ok
drop materialized view mv_grouped_percentile;

statement ok
drop table t_grouped;

# Test mode (most frequent value) function
statement ok
create table t_mode (value int);

statement ok
create materialized view mv_mode as
select
  mode() within group (order by value) as mode_value
from t_mode;

statement ok
flush;

# Initially empty
query I
select * from mv_mode;
----
NULL

# Single value
statement ok
insert into t_mode values (1);

query I
select * from mv_mode;
----
1

# Multiple values with clear mode
statement ok
insert into t_mode values (2), (2), (3), (3), (4), (4), (4);

query I
select * from mv_mode;
----
4

# Test with real numbers
statement ok
create table t_mode_float (value float8);

statement ok
create materialized view mv_mode_float as
select
  mode() within group (order by value) as mode_value
from t_mode_float;

statement ok
insert into t_mode_float values (0.1), (0.2), (0.2), (0.4), (0.4), (0.3), (0.3), (0.4);

query R
select * from mv_mode_float;
----
0.4

statement ok
drop materialized view mv_mode_float;

statement ok
drop table t_mode_float;

# Test with text values
statement ok
create table t_mode_text (value varchar);

statement ok
create materialized view mv_mode_text as
select
  mode() within group (order by value) as mode_value
from t_mode_text;

statement ok
insert into t_mode_text values ('a'), ('b'), ('b'), ('c'), ('c'), ('d'), ('d'), ('d'), ('c');

query T
select * from mv_mode_text;
----
c

statement ok
drop materialized view mv_mode_text;

statement ok
drop table t_mode_text;

# Test mode with streaming updates
statement ok
insert into t_mode values (1), (1), (1);

query I
select * from mv_mode;
----
1

# Change the mode by adding more 2s
statement ok
insert into t_mode values (2), (2), (2), (2);

query I
select * from mv_mode;
----
2

# Test mode with grouped data
statement ok
create table t_mode_grouped (group_id int, value int);

statement ok
create materialized view mv_mode_grouped as
select
  group_id,
  mode() within group (order by value) as mode_value
from t_mode_grouped
group by group_id;

statement ok
insert into t_mode_grouped values
(1, 10), (1, 20), (1, 20), (1, 30), (1, 30), (1, 30),
(2, 100), (2, 200), (2, 200);

query II
select * from mv_mode_grouped order by group_id;
----
1 30
2 200

# Update one group's mode
statement ok
insert into t_mode_grouped values (1, 10), (1, 10), (1, 10);

query II
select * from mv_mode_grouped order by group_id;
----
1 10
2 200

statement ok
drop materialized view mv_mode_grouped;

statement ok
drop table t_mode_grouped;

statement ok
drop materialized view mv_mode;

statement ok
drop table t_mode;

statement ok
drop table t;
