statement ok
SET RW_IMPLICIT_FLUSH TO true;

statement ok
create table my_table (
    x int,
    y map(varchar, int[]),
    -- types that can be altered
    a struct<u int, v double>,
    b struct<u struct<v int, w double>>[]
);

statement ok
insert into my_table values (1, map{'a': array[1, 2]}, row(1, 2.0), array[row(row(114, 514.0))]);

query TTTT
select * from my_table;
----
1	{a:{1,2}}	(1,2)	{"(\"(114,514)\")"}

statement error only types containing struct can be altered
alter table my_table alter column x type double;

statement error only types containing struct can be altered
alter table my_table alter column y type map(varchar, double[]);

statement ok
alter table my_table alter column a type struct<u int, v double, w varchar>;

query T
select a from my_table;
----
(1,2,)

statement ok
alter table my_table alter column a type struct<v double, w varchar>;

statement ok
insert into my_table(a) values (row(3, 'hello'));

query T rowsort
select a from my_table;
----
(2,)
(3,hello)

statement error incompatible data type change from Float64 to Varchar
alter table my_table alter column a type struct<v varchar>;

statement error incompatible data type change from List to Map
alter table my_table alter column b type map(varchar, varchar);

statement ok
alter table my_table alter column b type struct<u struct<v int, w double>, x int[]>[];

statement ok
insert into my_table(b) values (array[row(row(19, 19), array[8, 10])]);

query T rowsort
select b from my_table;
----
NULL
{"(\"(114,514)\",)"}
{"(\"(19,19)\",\"{8,10}\")"}

# If a column is currently being referenced by any downstream job, the column cannot be altered.
# TODO: support altering referenced columns
# TODO: supporting in progress, temporarily disable this test
# statement ok
# create materialized view my_mv_a as select a from my_table;

# statement error unable to drop or alter the column due to being referenced by downstream materialized views or sinks
# alter table my_table alter column a type struct<v double, w varchar, x int>;

statement ok
drop table my_table cascade;
