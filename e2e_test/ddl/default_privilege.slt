statement ok
CREATE USER john;

statement ok
ALTER DEFAULT PRIVILEGES GRANT ALL PRIVILEGES ON SCHEMAS TO john;

statement error cannot use IN SCHEMA clause when using GRANT/REVOKE ON SCHEMAS
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL PRIVILEGES ON SCHEMAS TO john;

statement error does not exist
ALTER DEFAULT PRIVILEGES GRANT ALL PRIVILEGES ON SCHEMAS TO luke;

# Test that default privileges are not applied to existing schemas
query I
SELECT has_schema_privilege('john', 'public', 'CREATE');
----
f

statement ok
ALTER DEFAULT PRIVILEGES GRANT ALL PRIVILEGES ON SCHEMAS TO john WITH GRANT OPTION;

statement ok
CREATE SCHEMA test_schema;

query I
SELECT has_schema_privilege('john', 'test_schema', 'CREATE');
----
t

statement ok
ALTER DEFAULT PRIVILEGES IN SCHEMA test_schema GRANT ALL PRIVILEGES ON TABLES TO john WITH GRANT OPTION;

statement ok
CREATE TABLE test_schema.foo (id int);

statement ok
CREATE MATERIALIZED VIEW test_schema.foo_mv AS SELECT * FROM test_schema.foo;

query I
SELECT has_table_privilege('john', 'test_schema.foo', 'SELECT WITH GRANT OPTION');
----
t

# Test that default privileges are only applied to dml tables
query I
SELECT has_table_privilege('john', 'test_schema.foo_mv', 'SELECT');
----
f

statement ok
ALTER DEFAULT PRIVILEGES IN SCHEMA test_schema REVOKE GRANT OPTION FOR ALL PRIVILEGES ON TABLES FROM john;

statement ok
ALTER DEFAULT PRIVILEGES GRANT SELECT ON MATERIALIZED VIEWS TO john WITH GRANT OPTION;

statement ok
DROP TABLE test_schema.foo cascade;

statement ok
CREATE TABLE test_schema.foo (id int);

query I
SELECT has_table_privilege('john', 'test_schema.foo', 'SELECT WITH GRANT OPTION');
----
f

query I
SELECT has_table_privilege('john', 'test_schema.foo', 'SELECT');
----
t

statement ok
CREATE MATERIALIZED VIEW test_schema.foo_mv AS SELECT * FROM test_schema.foo;

query I
SELECT has_table_privilege('john', 'test_schema.foo_mv', 'SELECT WITH GRANT OPTION');
----
t

statement ok
ALTER DEFAULT PRIVILEGES IN SCHEMA test_schema REVOKE ALL PRIVILEGES ON TABLES FROM john;

statement ok
ALTER DEFAULT PRIVILEGES REVOKE ALL PRIVILEGES ON MATERIALIZED VIEWS FROM john;

statement ok
CREATE TABLE test_schema.foo2 (id int);

query I
SELECT has_table_privilege('john', 'test_schema.foo2', 'SELECT');
----
f

statement ok
CREATE MATERIALIZED VIEW test_schema.foo2_mv AS SELECT * FROM test_schema.foo2;

query I
SELECT has_table_privilege('john', 'test_schema.foo2_mv', 'SELECT');
----
f

statement ok
ALTER DEFAULT PRIVILEGES IN SCHEMA test_schema GRANT SELECT ON VIEWS TO john WITH GRANT OPTION;

statement ok
CREATE VIEW test_schema.foo_view AS SELECT * FROM test_schema.foo;

query I
SELECT has_table_privilege('john', 'test_schema.foo_view', 'SELECT WITH GRANT OPTION');
----
t

query I
SELECT has_table_privilege('john', 'test_schema.foo_view', 'INSERT');
----
f

statement ok
ALTER DEFAULT PRIVILEGES REVOKE ALL PRIVILEGES ON VIEWS FROM john;

statement ok
CREATE VIEW test_schema.foo_view2 AS SELECT * FROM test_schema.foo;

query I
SELECT has_table_privilege('john', 'test_schema.foo_view2', 'SELECT');
----
f

statement ok
ALTER DEFAULT PRIVILEGES IN SCHEMA test_schema GRANT EXECUTE ON FUNCTIONS TO john;

statement ok
CREATE FUNCTION test_schema.foo_func(INT) returns int language sql as 'select $1';

query I
SELECT has_function_privilege('john', 'test_schema.foo_func(int)', 'EXECUTE');
----
t

statement ok
ALTER DEFAULT PRIVILEGES IN SCHEMA test_schema REVOKE EXECUTE ON FUNCTIONS FROM john;

# Test that revoke default privileges are not applied to existing functions
query I
SELECT has_function_privilege('john', 'test_schema.foo_func(int)', 'EXECUTE');
----
t

statement ok
CREATE FUNCTION test_schema.foo_func2(INT) returns int language sql as 'select $1';

query I
SELECT has_function_privilege('john', 'test_schema.foo_func2(int)', 'EXECUTE');
----
f

statement ok
DROP SCHEMA test_schema CASCADE;

statement ok
DROP USER john;
