statement ok
SET RW_IMPLICIT_FLUSH TO true;

#############################################################
# Basic tests for sql udf with [unnamed / named] parameters #
#############################################################

# Create a sql udf function with unnamed parameters with double dollar as clause
statement ok
create function add(INT, INT) returns int language sql as $$select $1 + $2$$;

query I
select add(1, -1);
----
0

# Create a sql udf function with unnamed parameters with single quote as clause
statement ok
create function sub(INT, INT) returns int language sql as 'select $1 - $2';

query I
select sub(1, 1);
----
0

# Create a sql udf function with unamed parameters that calls other pre-defined sql udfs
statement ok
create function add_sub_binding() returns int language sql as 'select add(1, 1) + sub(2, 2)';

query I
select add_sub_binding();
----
2

# Use them all together
query III
select add(1, -1), sub(1, 1), add_sub_binding();
----
0 0 2

# Create a sql udf with named parameters with single quote as clause
statement ok
create function add_named(a INT, b INT) returns int language sql as 'select a + b';

query I
select add_named(1, -1);
----
0

# Create another sql udf with named parameters with double dollar as clause
statement ok
create function sub_named(a INT, b INT) returns int language sql as $$select a - b$$;

query I
select sub_named(1, 1);
----
0

# Mixed with named / unnamed parameters
statement ok
create function add_sub_mix(INT, a INT, INT) returns int language sql as 'select $1 - a + $3';

query I
select add_sub_mix(1, 2, 3);
----
2

# Call sql udf with unnamed parameters inside sql udf with named parameters
statement ok
create function add_named_wrapper(a INT, b INT) returns int language sql as 'select add(a, b)';

query I
select add_named_wrapper(1, -1);
----
0

# Create a sql udf with unnamed parameters with return expression
statement ok
create function add_return(INT, INT) returns int language sql return $1 + $2;

query I
select add_return(1, 1);
----
2

statement ok
create function add_return_binding() returns int language sql return add_return(1, 1) + add_return(1, 1);

query I
select add_return_binding();
----
4

statement ok
create function print(INT) returns int language sql as 'select $1';

query T
select print(114514);
----
114514

# Multiple type interleaving sql udf
statement ok
create function add_sub(INT, FLOAT, INT) returns float language sql as $$select -$1 + $2 - $3$$;

query I
select add_sub(1, 5.1415926, 1);
----
3.1415926

query III
select add(1, -1), sub(1, 1), add_sub(1, 5.1415926, 1);
----
0 0 3.1415926

# Complex types interleaving
statement ok
create function add_sub_types(INT, BIGINT, FLOAT, DECIMAL, REAL) returns double language sql as 'select $1 + $2 - $3 + $4 + $5';

query I
select add_sub_types(1, 1919810114514, 3.1415926, 1.123123, 101010.191919);
----
1919810215523.1768

statement ok
create function add_sub_return(INT, FLOAT, INT) returns float language sql return -$1 + $2 - $3;

query I
select add_sub_return(1, 5.1415926, 1);
----
3.1415926

# Create a wrapper function for `add` & `sub`
statement ok
create function add_sub_wrapper(INT, INT) returns int language sql as 'select add($1, $2) + sub($1, $2) + 114512';

query I
select add_sub_wrapper(1, 1);
----
114514

##########################################################
# Basic sql udfs integrated with the use of mock tables  #
# P.S. This is also a simulation of real world use cases #
##########################################################

statement ok
create table t1 (c1 INT, c2 INT);

statement ok
create table t2 (c1 INT, c2 FLOAT, c3 INT);

# Special table for named sql udf
statement ok
create table t3 (a INT, b INT);

statement ok
insert into t1 values (1, 1), (2, 2), (3, 3), (4, 4), (5, 5);

statement ok
insert into t2 values (1, 3.14, 2), (2, 4.44, 5), (20, 10.30, 02);

statement ok
insert into t3 values (1, 1), (2, 2), (3, 3), (4, 4), (5, 5);

query I
select c1, c2, add_return(c1, c2) from t1 order by c1 asc;
----
1 1 2
2 2 4
3 3 6
4 4 8
5 5 10

query III
select sub(c1, c2), c1, c2, add(c1, c2) from t1 order by c1 asc;
----
0 1 1 2
0 2 2 4
0 3 3 6
0 4 4 8
0 5 5 10

query IIIIII
select c1, c2, c3, add(c1, c3), sub(c1, c3), add_sub(c1, c2, c3) from t2 order by c1 asc;
----
1 3.14 2 3 -1 0.14000000000000012
2 4.44 5 7 -3 -2.5599999999999996
20 10.3 2 22 18 -11.7

query IIIIII
select c1, c2, c3, add(c1, c3), sub(c1, c3), add_sub_return(c1, c2, c3) from t2 order by c1 asc;
----
1 3.14 2 3 -1 0.14000000000000012
2 4.44 5 7 -3 -2.5599999999999996
20 10.3 2 22 18 -11.7

query I
select add_named(a, b) from t3 order by a asc;
----
2
4
6
8
10

################################
# Corner & Special cases tests #
################################

# Mixed parameter with calling inner sql udfs
statement ok
create function add_sub_mix_wrapper(INT, a INT, INT) returns int language sql as 'select add($1, a) + a + sub(a, $3)';

query I
select add_sub_mix_wrapper(1, 2, 3);
----
4

# Named sql udf with corner case
statement ok
create function corner_case(INT, a INT, INT) returns varchar language sql as $$select '$1 + a + $3'$$;

query T
select corner_case(1, 2, 3);
----
$1 + a + $3

# Create a sql udf with unnamed parameters that calls built-in functions
# Note that double dollar signs should be used otherwise the parsing will fail, as illutrates below
statement ok
create function call_regexp_replace() returns varchar language sql as $$select regexp_replace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')$$;

query T
select call_regexp_replace();
----
💩💩💩💩💩foo🤔️bar亲爱的😭这是🥵爱情❤️‍🔥

statement ok
create function regexp_replace_wrapper(varchar) returns varchar language sql as $$select regexp_replace($1, 'baz(...)', '这是🥵', 'ic')$$;

query T
select regexp_replace_wrapper('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥');
----
💩💩💩💩💩foo🤔️bar亲爱的😭这是🥵爱情❤️‍🔥

# Recursive corner case (i.e., valid definition should not be rejected)
statement ok
create function foo(INT) returns varchar language sql as $$select 'foo(INT)'$$;

query T
select foo(114514);
----
foo(INT)

# Adjust the input value of the calling function (i.e., `print` here) with the actual input parameter
statement ok
create function print_add_one(INT) returns int language sql as 'select print($1 + 1)';

statement ok
create function print_add_two(INT) returns int language sql as 'select print($1 + $1)';

query III
select print_add_one(1), print_add_one(114513), print_add_two(2);
----
2 114514 4

# Note: the valid example of `type_mismatch` in the below test section
statement ok
create function type_match(INT) returns varchar language sql as $$select '$1 + 114514 + $1'$$;

query T
select type_match(114514);
----
$1 + 114514 + $1

##################################################
# Invalid definition tests when creating sql udf #
##################################################

# Named sql udf with invalid parameter in body definition
# Will be rejected at creation time
statement error
create function unknown_parameter(a INT) returns int language sql as 'select a + aa + a';
----
db error: ERROR: Failed to run the query

Caused by:
  Invalid input syntax: Failed to conduct semantic check
Bind error: [sql udf] failed to find named parameter aa
In SQL UDF definition: `select a + aa + a`
                                   ^^


# With unnamed parameter
statement error
create function unnamed_param_hint(INT, INT) returns int language sql as 'select $1 + $3 + $2';
----
db error: ERROR: Failed to run the query

Caused by:
  Invalid input syntax: Failed to conduct semantic check
Bind error: [sql udf] failed to find unnamed parameter $3
In SQL UDF definition: `select $1 + $3 + $2`
                                    ^^


# A mixture of both
statement error
create function mix_hint(INT, aa INT, INT) returns int language sql as 'select $1 + aa + a + $2';
----
db error: ERROR: Failed to run the query

Caused by:
  Invalid input syntax: Failed to conduct semantic check
Bind error: [sql udf] failed to find named parameter a
In SQL UDF definition: `select $1 + aa + a + $2`
                                         ^


# Long invalid parameter
statement error
create function long_invalid_param(i_am_valid INT) returns int language sql as
  'select i_am_valid + _this_is_invalid_please_properly_mark_the_boundary_of_this_invalid_paramerter_ + i_am_valid';
----
db error: ERROR: Failed to run the query

Caused by:
  Invalid input syntax: Failed to conduct semantic check
Bind error: [sql udf] failed to find named parameter _this_is_invalid_please_properly_mark_the_boundary_of_this_invalid_paramerter_
In SQL UDF definition: `select i_am_valid + _this_is_invalid_please_properly_mark_the_boundary_of_this_invalid_paramerter_ + i_am_valid`
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


# sql udf with non-existent function
statement error
create function call_non_existent_function(INT) returns int language sql as 'select 1 + non_existent(1) + 1';
----
db error: ERROR: Failed to run the query

Caused by:
  Invalid input syntax: Failed to conduct semantic check
function non_existent(integer) does not exist
In SQL UDF definition: `select 1 + non_existent(1) + 1`
                                   ^^^^^^^^^^^^


# First display invalid parameter
# if not found, try displaying non-existent functions
# if still not found, display default error message without hint
statement error
create function param_func_mix(a INT, b INT) returns int language sql as 'select a + b + c + not_be_displayed(c)';
----
db error: ERROR: Failed to run the query

Caused by:
  Invalid input syntax: Failed to conduct semantic check
Bind error: [sql udf] failed to find named parameter c
In SQL UDF definition: `select a + b + c + not_be_displayed(c)`
                                       ^


statement error expected end of statement, found: 💩
create function call_regexp_replace() returns varchar language sql as 'select regexp_replace('💩💩💩💩💩foo🤔️bar亲爱的😭baz这不是爱情❤️‍🔥', 'baz(...)', '这是🥵', 'ic')';

# Recursive definition can NOT be accepted at present due to semantic check
statement error
create function recursive(INT, INT) returns int language sql as 'select recursive($1, $2) + recursive($1, $2)';
----
db error: ERROR: Failed to run the query

Caused by:
  Invalid input syntax: Failed to conduct semantic check
function recursive(integer, integer) does not exist
In SQL UDF definition: `select recursive($1, $2) + recursive($1, $2)`
                               ^^^^^^^^^


# Complex but error-prone definition, recursive & normal sql udfs interleaving
statement error Failed to conduct semantic check
create function recursive_non_recursive(INT, INT) returns int language sql as 'select recursive($1, $2) + sub($1, $2)';

# Create a valid recursive function
# Please note we do NOT support actual running the recursive sql udf at present
statement error Failed to conduct semantic check
create function fib(INT) returns int
 language sql as 'select case
        when $1 = 0 then 0
        when $1 = 1 then 1
        when $1 = 2 then 1
        when $1 = 3 then 2
      else fib($1 - 1) + fib($1 - 2)
      end;';

# Calling a non-existent function
statement error Failed to conduct semantic check
create function non_exist(INT) returns int language sql as 'select yo(114514)';

# Try to create an sql udf with unnamed parameters whose return type mismatches with the sql body definition
statement error return type mismatch detected
create function type_mismatch(INT) returns varchar language sql as 'select $1 + 114514 + $1';

# Invalid function body syntax
statement error expected an expression, found: EOF
create function add_error(INT, INT) returns int language sql as $$select $1 + $2 +$$;

######################################################################
# Not yet supported features 🤪 (and potential basic use case tests) #
######################################################################

# 1. Recursion Support for SQL UDF

# The execution will eventually exceed the pre-defined max stack depth
# statement error function fib calling stack depth limit exceeded
# select fib(100);

# Currently create a materialized view with a recursive sql udf will be rejected
# statement error function fib calling stack depth limit exceeded
# create materialized view foo_mv as select fib(100);

# Rejected deep calling stack
# statement error function recursive calling stack depth limit exceeded
# select recursive(1, 1);

# Same as above
# statement error function recursive calling stack depth limit exceeded
# select recursive_non_recursive(1, 1);

# Recursive sql udf with normal table
# statement error function fib calling stack depth limit exceeded
# select fib(c1) from t1;

# Recursive sql udf with materialized view
# statement error function fib calling stack depth limit exceeded
# create materialized view bar_mv as select fib(c1) from t1;

# 2. Select from table inside SQL UDF (potential concerns: naming conflict)

# statment ok
# create funciton from_table_single_row() returns int language sql as 'select c1 from t1';

# Do NOT need explicit `select ... from ...`
# query I
# select from_table_single_row();
# ----
# 1

# statement ok
# create function from_table_single_row_1() returns int language sql as 'select c1 from t1 order by c1 desc';

# Need explict `select ... from ...`
# query I
# select * from from_table_single_row_1();
# ----
# 5

# Should add parser support
# statement ok
# create function from_table_multiple_rows() returns setof int language sql as 'select c1 from t1';

# P.S. postgres shadows the `c1` parameter by the actual column `c1` to resolve the naming conflict
# statement ok
# create function from_table_conflict(c1 INT) returns int language sql as 'select c1 from t1';

# 3. Output multiple columns / expressions from a single SQL UDF

# Parser support is needed
# statement ok
# create function out_parameters_without_name(out INT, out INT) language sql as 'select 1919810, 114514';

# query II
# select out_parameters_without_name();
# ----
# 1919810 114514

# query II
# select * out_parameters_without_name();
# ----
# 1919810 114514

# statement error non-existent column
# select a, b from out_parameters_without_name();
# ----
# 1919810 114514

# statement ok
# create function out_parameters_with_name(out a INT, out b INT) language sql as 'select 1919810, 114514';

# query II
# select out_parameters_with_name();
# ----
# 1919810 114514

# query II
# select a, b from out_parameters_with_name();
# ----
# 1919810 114514

# statement ok
# create function multiple_cols() returns setof record as 'select c1, c2, c3 from t2' language sql;

# query III
# select * from multiple_cols() as t(c1 INT, c2 FLOAT, c3 INT);
# ----
# corresponding results
# may need to order the sequence

# 4. Polymorphic arguments

# statement ok
# create function is_greater(anyelement, anyelement) returns boolean language sql as 'select $1 > $2';

# query I
# select is_greater(1, 2);
# ----
# f

# query I
# select is_greater(3.14, 2.95);
# ----
# t

# 5. Overloading functions

# statement ok
# create function overload(c1 INT) returns int language sql as 'select c1';

# statement ok
# create function overload(c1 VARCHAR) returns varchar language sql as 'select c1';

# query I
# select overload(114514), overload('114514');
# ----
# 114514 114514

# statement error naming conflict with first overload
# create function overload(c1 INT, out VARCHAR)

# This definition will cause ambiguity with the second overload during runtime if `c2` is not specified
# statement ok
# create function overload(c1 VARCHAR, c2 VARCHAR default '114514', out VARCHAR, out VARCHAR) language sql as 'select c1, c2';

# statement error can not choose a best candidate function, need explicit type cast
# query TT
# select overload('114514');

##################################################
# Clean up the funtions / mock tables at the end #
##################################################

statement ok
drop function add;

statement ok
drop function sub;

statement ok
drop function add_sub_binding;

statement ok
drop function add_sub;

statement ok
drop function add_sub_return;

statement ok
drop function add_return;

statement ok
drop function add_return_binding;

statement ok
drop function call_regexp_replace;

statement ok
drop function add_sub_wrapper;

statement ok
drop function foo;

statement ok
drop function add_sub_types;

statement ok
drop function print;

statement ok
drop function print_add_one;

statement ok
drop function print_add_two;

statement ok
drop function regexp_replace_wrapper;

statement ok
drop function corner_case;

statement ok
drop function add_named;

statement ok
drop function sub_named;

statement ok
drop function add_sub_mix;

statement ok
drop function add_named_wrapper;

statement ok
drop function type_match;

statement ok
drop function add_sub_mix_wrapper;

statement ok
drop table t1;

statement ok
drop table t2;

statement ok
drop table t3;
