# Before running this test:
#   python3 e2e_test/udf/remote_python/test.py
# or:
#   cd e2e_test/udf/remote_java && mvn package && java -jar target/udf.jar

# Create a function.
statement ok
create function int_42() returns int as int_42 using link 'http://localhost:8815';

# Argument or return type mismatch.
statement error type mismatch
create function foo(int) returns int as int_42 using link 'http://localhost:8815';

statement error type mismatch
create function foo() returns real as int_42 using link 'http://localhost:8815';

# Create another function.
statement ok
create function gcd(int, int) returns int as gcd using link 'http://localhost:8815';

# Create a function with the same name but different arguments.
statement ok
create function gcd(int, int, int) returns int as gcd3 using link 'http://localhost:8815';

# Create a function with the same name and arguments.
statement error exists
create function gcd(int, int) returns int as gcd using link 'http://localhost:8815';

# Create a function that returns multiple columns.
statement ok
create function extract_tcp_info(bytea) returns struct<src_ip varchar, dst_ip varchar, src_port smallint, dst_port smallint>
as extract_tcp_info using link 'http://localhost:8815';

# Create a table function.
statement ok
create function series(int) returns table (x int) as series using link 'http://localhost:8815';

# Create a table function that returns multiple columns.
statement ok
create function split(varchar) returns table (word varchar, length int) as split using link 'http://localhost:8815';

statement ok
create function float_to_decimal(float8) returns decimal as float_to_decimal using link 'http://localhost:8815';

statement ok
create function hex_to_dec(varchar) returns decimal as hex_to_dec using link 'http://localhost:8815';

statement ok
create function decimal_add(decimal, decimal) returns decimal as decimal_add using link 'http://localhost:8815';

statement ok
create function array_access(varchar[], int) returns varchar as array_access using link 'http://localhost:8815';

statement ok
create function jsonb_access(jsonb, int) returns jsonb as jsonb_access using link 'http://localhost:8815';

statement ok
create function jsonb_concat(jsonb[]) returns jsonb as jsonb_concat using link 'http://localhost:8815';

statement ok
create function jsonb_array_identity(jsonb[]) returns jsonb[] as jsonb_array_identity using link 'http://localhost:8815';

statement ok
create function jsonb_array_struct_identity(struct<v jsonb[], len int>) returns struct<v jsonb[], len int>
as jsonb_array_struct_identity using link 'http://localhost:8815';

statement ok
create function return_all(BOOLEAN,SMALLINT,INT,BIGINT,FLOAT4,FLOAT8,DECIMAL,DATE,TIME,TIMESTAMP,INTERVAL,VARCHAR,BYTEA,JSONB,STRUCT<f1 INT,f2 INT>)
returns struct<bool BOOLEAN, i16 SMALLINT, i32 INT, i64 BIGINT, f32 FLOAT4, f64 FLOAT8, decimal DECIMAL, date DATE, time TIME, timestamp TIMESTAMP, interval INTERVAL, varchar VARCHAR, bytea BYTEA, jsonb JSONB, struct STRUCT<f1 INT,f2 INT>>
as return_all using link 'http://localhost:8815';

statement ok
create function return_all_arrays(BOOLEAN[],SMALLINT[],INT[],BIGINT[],FLOAT4[],FLOAT8[],DECIMAL[],DATE[],TIME[],TIMESTAMP[],INTERVAL[],VARCHAR[],BYTEA[],JSONB[],STRUCT<f1 INT,f2 INT>[])
returns struct<bool BOOLEAN[], i16 SMALLINT[], i32 INT[], i64 BIGINT[], f32 FLOAT4[], f64 FLOAT8[], decimal DECIMAL[], date DATE[], time TIME[], timestamp TIMESTAMP[], interval INTERVAL[], varchar VARCHAR[], bytea BYTEA[], jsonb JSONB[], struct STRUCT<f1 INT,f2 INT>[]>
as return_all_arrays using link 'http://localhost:8815';

query TTTTT rowsort
show functions
----
array_access character varying[], integer character varying (empty) http://localhost:8815
decimal_add numeric, numeric numeric (empty) http://localhost:8815
extract_tcp_info bytea struct<src_ip character varying, dst_ip character varying, src_port smallint, dst_port smallint> (empty) http://localhost:8815
float_to_decimal double precision numeric (empty) http://localhost:8815
gcd integer, integer integer (empty) http://localhost:8815
gcd integer, integer, integer integer (empty) http://localhost:8815
hex_to_dec character varying numeric (empty) http://localhost:8815
int_42 (empty) integer (empty) http://localhost:8815
jsonb_access jsonb, integer jsonb (empty) http://localhost:8815
jsonb_array_identity jsonb[] jsonb[] (empty) http://localhost:8815
jsonb_array_struct_identity struct<v jsonb[], len integer> struct<v jsonb[], len integer> (empty) http://localhost:8815
jsonb_concat jsonb[] jsonb (empty) http://localhost:8815
return_all boolean, smallint, integer, bigint, real, double precision, numeric, date, time without time zone, timestamp without time zone, interval, character varying, bytea, jsonb, struct<f1 integer, f2 integer> struct<bool boolean, i16 smallint, i32 integer, i64 bigint, f32 real, f64 double precision, decimal numeric, date date, time time without time zone, timestamp timestamp without time zone, interval interval, varchar character varying, bytea bytea, jsonb jsonb, struct struct<f1 integer, f2 integer>> (empty) http://localhost:8815
return_all_arrays boolean[], smallint[], integer[], bigint[], real[], double precision[], numeric[], date[], time without time zone[], timestamp without time zone[], interval[], character varying[], bytea[], jsonb[], struct<f1 integer, f2 integer>[] struct<bool boolean[], i16 smallint[], i32 integer[], i64 bigint[], f32 real[], f64 double precision[], decimal numeric[], date date[], time time without time zone[], timestamp timestamp without time zone[], interval interval[], varchar character varying[], bytea bytea[], jsonb jsonb[], struct struct<f1 integer, f2 integer>[]> (empty) http://localhost:8815
series integer integer (empty) http://localhost:8815
split character varying struct<word character varying, length integer> (empty) http://localhost:8815

query I
select int_42();
----
42

query I
select gcd(25, 15);
----
5

query I
select gcd(25, 15, 3);
----
1

query I
select hex_to_dec('000000000000000000000000000000000000000000c0f6346334241a61f90a36');
----
233276425899864771438119478

query I
select float_to_decimal('-1e-10');
----
-0.0000000001000000000000000036

query R
select decimal_add(1.11, 2.22);
----
3.33

query T
select array_access(ARRAY['a', 'b', 'c'], 2);
----
b

query T
select jsonb_access(a::jsonb, 1) from
(values ('["a", "b", "c"]'), (null), ('[0, false]')) t(a);
----
"b"
NULL
false

query T
select jsonb_concat(ARRAY['null', '1', '"str"', '{}'::jsonb]);
----
[null, 1, "str", {}]

query T
select jsonb_array_identity(ARRAY[null, '1', '"str"', '{}'::jsonb]);
----
{NULL,1,"\"str\"","{}"}

query T
select jsonb_array_struct_identity(ROW(ARRAY[null, '1', '"str"', '{}'::jsonb], 4)::struct<v jsonb[], len int>);
----
("{NULL,1,""\\""str\\"""",""{}""}",4)

query T
select (return_all(
    true,
    1 ::smallint,
    1,
    1,
    1,
    1,
    12345678901234567890.12345678,
    date '2023-06-01',
    time '01:02:03.456789',
    timestamp '2023-06-01 01:02:03.456789',
    interval '1 month 2 days 3 seconds',
    'string',
    'bytes',
    '{"key":1}',
    row(1, 2)::struct<f1 int, f2 int>
)).*;
----
t 1 1 1 1 1 12345678901234567890.12345678 2023-06-01 01:02:03.456789 2023-06-01 01:02:03.456789 1 mon 2 days 00:00:03 string \x6279746573 {"key": 1} (1,2)

query T
select (return_all_arrays(
    array[null, true],
    array[null, 1 ::smallint],
    array[null, 1],
    array[null, 1 ::bigint],
    array[null, 1 ::float4],
    array[null, 1 ::float8],
    array[null, 12345678901234567890.12345678],
    array[null, date '2023-06-01'],
    array[null, time '01:02:03.456789'],
    array[null, timestamp '2023-06-01 01:02:03.456789'],
    array[null, interval '1 month 2 days 3 seconds'],
    array[null, 'string'],
    array[null, 'bytes'::bytea],
    array[null, '{"key":1}'::jsonb],
    array[null, row(1, 2)::struct<f1 int, f2 int>]
)).*;
----
{NULL,t} {NULL,1} {NULL,1} {NULL,1} {NULL,1} {NULL,1} {NULL,12345678901234567890.12345678} {NULL,2023-06-01} {NULL,01:02:03.456789} {NULL,"2023-06-01 01:02:03.456789"} {NULL,"1 mon 2 days 00:00:03"} {NULL,string} {NULL,"\\x6279746573"} {NULL,"{\"key\": 1}"} {NULL,"(1,2)"}

# test large string output
query I
select length((return_all(
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    repeat('a', 100000),
    repeat('a', 100000)::bytea,
    null,
    null
)).varchar);
----
100000

query I
select series(5);
----
0
1
2
3
4

query IT
select * from split('rising wave');
----
rising 6
wave   4

query T
select split('rising wave');
----
(rising,6)
(wave,4)

query II
select x, series(x) from series(4) t(x);
----
1 0
2 0
2 1
3 0
3 1
3 2

# test large output for table function
query I
select count(*) from series(1000000);
----
1000000

query T
select extract_tcp_info(E'\\x45000034a8a8400040065b8ac0a8000ec0a80001035d20b6d971b900000000080020200493310000020405b4');
----
(192.168.0.14,192.168.0.1,861,8374)

query TTII
select (extract_tcp_info(E'\\x45000034a8a8400040065b8ac0a8000ec0a80001035d20b6d971b900000000080020200493310000020405b4')).*;
----
192.168.0.14 192.168.0.1 861 8374

# steaming
# to ensure UDF & UDTF respect visibility

statement ok
create table t (x int);

statement ok
create materialized view mv as select gcd(x, x), series(x) from t where x <> 2;

statement ok
insert into t values (1), (2), (3);

statement ok
flush;

query II rowsort
select * from mv;
----
1 0
3 0
3 1
3 2

statement ok
drop materialized view mv;

statement ok
drop table t;

# error handling

statement error
select hex_to_dec('1z');

statement ok
create table t (dummy date, v varchar);

statement ok
create materialized view mv as select dummy, hex_to_dec(v) from t;

statement ok
insert into t values ('2023-01-01', '1z');

statement ok
flush;

query TI
select * from mv;
----
2023-01-01 NULL

statement ok
drop materialized view mv;

statement ok
drop table t;

# Drop a function
statement ok
drop function int_42();

# Drop a function without arguments, but the function name is not unique.
statement error is not unique
drop function gcd;

# Drop a function with arguments.
statement ok
drop function gcd(int, int);

# foo() is different from foo.
statement error function not found
drop function gcd();

# Drop a function without arguments. Now the function name is unique.
statement ok
drop function gcd;

statement ok
drop function extract_tcp_info;

statement ok
drop function series;

statement ok
drop function split;

statement ok
drop function float_to_decimal;

statement ok
drop function hex_to_dec;

statement ok
drop function decimal_add;

statement ok
drop function array_access;

statement ok
drop function jsonb_access;

statement ok
drop function jsonb_concat;

statement ok
drop function jsonb_array_identity;

statement ok
drop function jsonb_array_struct_identity;

statement ok
drop function return_all;

statement ok
drop function return_all_arrays;
