statement ok
create function int_42() returns int language python as $$
def int_42():
    return 42;
$$;

query I
select int_42();
----
42

statement ok
drop function int_42;


statement ok
create function gcd(a int, b int) returns int language python as $$
def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a
$$;

query I
select gcd(25, 15);
----
5

statement ok
drop function gcd;


statement ok
create function decimal_add(a decimal, b decimal) returns decimal language python as $$
def decimal_add(a, b):
    return a + b
$$;

query R
select decimal_add(1.11, 2.22);
----
3.33

statement ok
drop function decimal_add;


statement ok
create function to_string(a boolean, b smallint, c int, d bigint, e real, f float, g decimal, h varchar, i bytea, j jsonb) returns varchar language python as $$
import json
def to_string(a, b, c, d, e, f, g, h, i, j):
    return str(a) + str(b) + str(c) + str(d) + str(e) + str(f) + str(g) + str(h) + str(i) + json.dumps(j)
$$;

query T
select to_string(false, 1::smallint, 2, 3, 4.5, 6.7, 8.9, 'abc', '\x010203', '{"key": 1}');
----
False1234.56.78.9abcb'\x01\x02\x03'{"key": 1}

statement ok
drop function to_string;


# show data types in python
statement ok
create function py_typeof(a boolean, b smallint, c int, d bigint, e real, f float, g decimal, h varchar, i bytea, j jsonb) returns jsonb language python as $$
def py_typeof(a, b, c, d, e, f, g, h, i, j):
    return {
        "boolean": type(a).__name__,
        "smallint": type(b).__name__,
        "int": type(c).__name__,
        "bigint": type(d).__name__,
        "real": type(e).__name__,
        "float": type(f).__name__,
        "decimal": type(g).__name__,
        "varchar": type(h).__name__,
        "bytea": type(i).__name__,
        "jsonb": type(j).__name__,
    };
$$;

query T
select py_typeof(false, 1::smallint, 2, 3, 4.5, 6.7, 8.9, 'abc', '\x010203', '{"key": 1}');
----
{"bigint": "int", "boolean": "bool", "bytea": "bytes", "decimal": "Decimal", "float": "float", "int": "int", "jsonb": "dict", "real": "float", "smallint": "int", "varchar": "str"}

statement ok
drop function py_typeof;


statement ok
create function return_all(a boolean, b smallint, c int, d bigint, e real, f float, g decimal, h varchar, i bytea, j jsonb, s struct<f1 int, f2 int>)
returns struct<a boolean, b smallint, c int, d bigint, e real, f float, g decimal, h varchar, i bytea, j jsonb, s struct<f1 int, f2 int>>
language python as $$
class Ret:
    def __init__(self, a, b, c, d, e, f, g, h, i, j, s):
        self.a = a
        self.b = b
        self.c = c
        self.d = d
        self.e = e
        self.f = f
        self.g = g
        self.h = h
        self.i = i
        self.j = j
        self.s = s
def return_all(a, b, c, d, e, f, g, h, i, j, s):
    return Ret(a, b, c, d, e, f, g, h, i, j, s)
$$;

query T
select (return_all(
    true,
    1 ::smallint,
    1,
    1,
    1,
    1,
    12345678901234567890.12345678,
    'string',
    'bytes',
    '{"key":1}',
    row(1, 2)::struct<f1 int, f2 int>
)).*;
----
t 1 1 1 1 1 12345678901234567890.12345678 string \x6279746573 {"key": 1} (1,2)

statement ok
drop function return_all;


statement ok
create function series(n int) returns table (x int) language python as $$
def series(n):
    for i in range(n):
        yield i
$$;

query I
select series(5);
----
0
1
2
3
4

statement ok
drop function series;


statement ok
create function split(s varchar) returns table (word varchar, length int) language python as $$
class Ret:
    def __init__(self, word, length):
        self.word = word
        self.length = length
def split(s):
    for word in s.split():
        yield Ret(word, len(word))
$$;

query IT
select * from split('rising wave');
----
rising 6
wave   4

statement ok
drop function split;


# aggregate function
statement ok
create aggregate weighted_avg(value int, weight int) returns float language python as $$
def create_state():
    return (0, 0)
def accumulate(state, value, weight):
    if value is None or weight is None:
        return state
    (s, w) = state
    s += value * weight
    w += weight
    return (s, w)
def retract(state, value, weight):
    if value is None or weight is None:
        return state
    (s, w) = state
    s -= value * weight
    w -= weight
    return (s, w)
def finish(state):
    (sum, weight) = state
    if weight == 0:
        return None
    else:
        return sum / weight
$$;

# batch
query F
select weighted_avg(value, weight) from (values (1, 1), (null, 2), (3, 3)) as t(value, weight);
----
2.5

# streaming
statement ok
create table t(value int, weight int);

statement ok
create materialized view mv as select weighted_avg(value, weight) from t;

query F
select * from mv;
----
NULL

statement ok
insert into t values (1, 1), (null, 2), (3, 3);

statement ok
flush;

query F
select * from mv;
----
2.5

statement ok
delete from t where value = 3;

statement ok
flush;

query F
select * from mv;
----
1

statement ok
drop materialized view mv;

statement ok
drop table t;

statement error "weighted_avg" is an aggregate function
drop function weighted_avg;

statement ok
drop aggregate weighted_avg;


# UDF as aggregate function
statement ok
create function median(int[]) returns float language python as $$
def median(values):
    values.sort()
    n = len(values)
    if n % 2 == 0:
        return (values[n // 2 - 1] + values[n // 2]) / 2
    else:
        return values[n // 2]
$$;

query F
select aggregate:median(x) from (values (1), (2), (3), (4), (5)) as t(x);
----
3

query F
select aggregate:median(x) from (values (4), (3), (2), (1)) as t(x);
----
2.5

statement ok
drop function median;


statement ok
create function mismatched_arguments() returns int language python as $$
def mismatched_arguments(x):
    return x
$$;

statement error missing 1 required positional argument: 'x'
select mismatched_arguments();

statement ok
drop function mismatched_arguments;

statement ok
create function mismatched_return_type() returns int language python as $$
def mismatched_return_type():
    return 1.0
$$;

statement error 'float' object cannot be interpreted as an integer
select mismatched_return_type();

statement ok
drop function mismatched_return_type;
