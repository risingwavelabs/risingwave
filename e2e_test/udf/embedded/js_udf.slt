statement ok
create function int_42() returns int language javascript as $$
export function int_42() {
    return 42;
}
$$;

query I
select int_42();
----
42

statement ok
drop function int_42;


statement ok
create function gcd(a int, b int) returns int language javascript as $$
export function gcd(a, b) {
    // required before we support `RETURNS NULL ON NULL INPUT`
    if(a == null || b == null) {
        return null;
    }
    while (b != 0) {
        let t = b;
        b = a % b;
        a = t;
    }
    return a;
}
$$;

query I
select gcd(25, 15);
----
5

statement ok
drop function gcd;


statement ok
create function decimal_add(a decimal, b decimal) returns decimal language javascript as $$
export function decimal_add(a, b) {
    return a + b;
}
$$;

query R
select decimal_add(1.11, 2.22);
----
3.33

statement ok
drop function decimal_add;


statement ok
create function to_string(a boolean, b smallint, c int, d bigint, e real, f float, g decimal, h varchar, i bytea, j jsonb) returns varchar language javascript as $$
export function to_string(a, b, c, d, e, f, g, h, i, j) {
    return a.toString() + b.toString() + c.toString() + d.toString() + e.toString() + f.toString() + g.toString() + h.toString() + i.toString() + JSON.stringify(j);
}
$$;

query T
select to_string(false, 1::smallint, 2, 3, 4.5, 6.7, 8.9, 'abc', '\x010203', '{"key": 1}');
----
false1234.56.78.9abc1,2,3{"key":1}

statement ok
drop function to_string;


# show data types in javascript
statement ok
create function js_typeof(a boolean, b smallint, c int, d bigint, e real, f float, g decimal, h varchar, i bytea, j jsonb) returns jsonb language javascript as $$
export function js_typeof(a, b, c, d, e, f, g, h, i, j) {
    return {
        boolean: typeof a,
        smallint: typeof b,
        int: typeof c,
        bigint: typeof d,
        real: typeof e,
        float: typeof f,
        decimal: typeof g,
        varchar: typeof h,
        bytea: typeof i,
        jsonb: typeof j,
    };
}
$$;

query T
select js_typeof(false, 1::smallint, 2, 3, 4.5, 6.7, 8.9, 'abc', '\x010203', '{"key": 1}');
----
{"bigint": "number", "boolean": "boolean", "bytea": "object", "decimal": "bigdecimal", "float": "number", "int": "number", "jsonb": "object", "real": "number", "smallint": "number", "varchar": "string"}

statement ok
drop function js_typeof;


statement ok
create function return_all(a boolean, b smallint, c int, d bigint, e real, f float, g decimal, h varchar, i bytea, j jsonb, s struct<f1 int, f2 int>)
returns struct<a boolean, b smallint, c int, d bigint, e real, f float, g decimal, h varchar, i bytea, j jsonb, s struct<f1 int, f2 int>>
language javascript as $$
export function return_all(a, b, c, d, e, f, g, h, i, j, s) {
    return {a,b,c,d,e,f,g,h,i,j,s};
}
$$;

query T
select (return_all(
    true,
    1 ::smallint,
    1,
    1,
    1,
    1,
    12345678901234567890.12345678,
    'string',
    'bytes',
    '{"key":1}',
    row(1, 2)::struct<f1 int, f2 int>
)).*;
----
t 1 1 1 1 1 12345678901234567890.12345678 string \x6279746573 {"key": 1} (1,2)

statement ok
drop function return_all;


statement ok
create function series(n int) returns table (x int) language javascript as $$
export function* series(n) {
    for(let i = 0; i < n; i++) {
        yield i;
    }
}
$$;

query I
select series(5);
----
0
1
2
3
4

statement ok
drop function series;


statement ok
create function split(s varchar) returns table (word varchar, length int) language javascript as $$
export function* split(s) {
    for(let word of s.split(' ')) {
        yield { word: word, length: word.length };
    }
}
$$;

query IT
select * from split('rising wave');
----
rising 6
wave   4

statement ok
drop function split;


# aggregate function
statement ok
create aggregate weighted_avg(value int, weight int) returns float language javascript as $$
    export function create_state() {
        return {sum: 0, weight: 0};
    }
    export function accumulate(state, value, weight) {
        if (value == null || weight == null) {
            return state;
        }
        state.sum += value * weight;
        state.weight += weight;
        return state;
    }
    export function retract(state, value, weight) {
        if (value == null || weight == null) {
            return state;
        }
        state.sum -= value * weight;
        state.weight -= weight;
        return state;
    }
    export function finish(state) {
        if (state.weight == 0) {
            return null;
        }
        return state.sum / state.weight;
    }
$$;

# batch
query F
select weighted_avg(value, weight) from (values (1, 1), (null, 2), (3, 3)) as t(value, weight);
----
2.5

# streaming
statement ok
create table t(value int, weight int);

statement ok
create materialized view mv as select weighted_avg(value, weight) from t;

query F
select * from mv;
----
NULL

statement ok
insert into t values (1, 1), (null, 2), (3, 3);

statement ok
flush;

query F
select * from mv;
----
2.5

statement ok
delete from t where value = 3;

statement ok
flush;

query F
select * from mv;
----
1

statement ok
drop materialized view mv;

statement ok
drop table t;

statement error "weighted_avg" is an aggregate function
drop function weighted_avg;

statement ok
drop aggregate weighted_avg;

statement ok
create function int_42_legacy() returns int language javascript as $$
    return 42;
$$;

query I
select int_42_legacy();
----
42

statement ok
drop function int_42_legacy;

statement ok
create function series_legacy(n int) returns table (x int) language javascript as $$
    for(let i = 0; i < n; i++) {
        yield i;
    }
$$;

query I
select series_legacy(5);
----
0
1
2
3
4

statement ok
drop function series_legacy;