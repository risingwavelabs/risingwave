statement ok
create function key_values(varchar) returns table (Key varchar, Value varchar) language rust as $$
    #[derive(StructType)]
    struct KeyValue<'a> {
        // note that field names are case-insensitive
        key: &'a str,
        value: &'a str,
    }
    #[function("key_values(varchar) -> setof struct KeyValue")]
    fn key_values(kv: &str) -> impl Iterator<Item = KeyValue<'_>> {
        kv.split(',').filter_map(|kv| {
            kv.split_once('=')
                .map(|(key, value)| KeyValue { key, value })
        })
    }
$$;

query T
select * from key_values('a=1,b=2');
----
a 1
b 2

statement ok
drop function key_values;
