control substitution on

# create database and tables in mysql
system ok
mysql --protocol=tcp -u root -e "DROP DATABASE IF EXISTS mytest; CREATE DATABASE mytest;"

system ok
mysql --protocol=tcp -u root -e "DROP DATABASE IF EXISTS kdb; CREATE DATABASE kdb;"

system ok
mysql --protocol=tcp -u root mytest < e2e_test/source_legacy/cdc/mysql_create.sql

system ok
mysql --protocol=tcp -u root kdb -e " CREATE TABLE kt1 (id int primary key, v1 varchar(32));
                                      INSERT INTO kt1 VALUES (1,'aaa'),(2,'bbb');
"

# generate data to mysql
system ok
mysql --protocol=tcp -u root mytest < e2e_test/source_legacy/cdc/mysql_init_data.sql

statement ok
create secret mysql_pwd with (
  backend = 'meta'
) as 'incorrect_password';

# create a cdc source job, with incorrct password
statement error
create source mysql_mytest with (
 connector = 'mysql-cdc',
 hostname = '${MYSQL_HOST:localhost}',
 port = '${MYSQL_TCP_PORT:8306}',
 username = 'rwcdc',
 password = secret mysql_pwd,
 database.name = 'mytest',
 server.id = '5601'
);
# The detailed error message is commented out because the user IP in error message may vary in different environments.
# ----
# db error: ERROR: Failed to run the query
# Caused by these errors (recent errors listed first):
#   1: gRPC request to meta service failed: Internal error
#   2: failed to create source worker
#   3: failed to create SplitEnumerator
#   4: source cannot pass validation
#   5: Internal error: Access denied for user 'rwcdc'@'172.17.0.1' (using password: YES)

statement ok
alter secret mysql_pwd as '${MYSQL_PWD:}';

# create a cdc source job, which format fixed to `FORMAT PLAIN ENCODE JSON`
statement ok
create source mysql_mytest with (
 connector = 'mysql-cdc',
 hostname = '${MYSQL_HOST:localhost}',
 port = '${MYSQL_TCP_PORT:8306}',
 username = 'rwcdc',
 password = secret mysql_pwd,
 database.name = 'mytest',
 server.id = '5601'
);

statement error Should not create MATERIALIZED VIEW or SELECT directly on shared CDC source
create materialized view mv as select * from mysql_mytest;

statement error The upstream table name must contain database name prefix*
create table products_test ( id INT PRIMARY KEY,
   name STRING,
   description STRING
) from mysql_mytest table 'products';

statement ok
create schema rw;

statement ok
create table rw.products_test ( id INT,
 name STRING,
 description STRING,
 PRIMARY KEY (id)
) include timestamp as commit_ts
include database_name as database_name
include table_name as table_name
from mysql_mytest table 'mytest.products';

# sleep to ensure (default,'Milk','Milk is a white liquid food') is consumed from Debezium message instead of backfill.
sleep 10s

### BEGIN test change secret in MySQL and ALTER SECRET in Risingwave
onlyif can-use-recover
statement ok
alter secret mysql_pwd with (
  backend = 'meta'
) as 'new_password';

onlyif can-use-recover
system ok
mysql --protocol=tcp -u root -e "ALTER USER 'rwcdc'@'%' IDENTIFIED BY 'new_password';"

onlyif can-use-recover
statement ok
recover;
### END

statement error Permission denied
drop secret mysql_pwd;

system ok
mysql --protocol=tcp -u root mytest -e "INSERT INTO products VALUES (default,'Milk','Milk is a white liquid food');
       INSERT INTO orders VALUES (default, '2023-11-28 15:08:22', 'Bob', 10.52, 100, false);"

# check the fragment distribution
query TT
select distribution_type,flags from rw_fragments order by fragment_id;
----
SINGLE {SOURCE}
HASH {MVIEW}
SINGLE {STREAM_SCAN}
SINGLE {CDC_FILTER}
HASH {SOURCE,DML}


statement ok
create source mysql_source with (
 connector = 'mysql-cdc',
 hostname = '${MYSQL_HOST:localhost}',
 port = '${MYSQL_TCP_PORT:8306}',
 username = 'rwcdc',
 password = secret mysql_pwd,
 database.name = 'mytest,kdb',
 server.id = '5602'
);


statement ok
CREATE TABLE IF NOT EXISTS mysql_all_types(
    c_boolean boolean,
    c_bit boolean,
    c_tinyint smallint,
    c_smallint smallint,
    c_mediumint integer,
    c_integer integer,
    c_bigint bigint,
    c_decimal decimal,
    c_float real,
    c_double double,
    c_char_255 varchar,
    c_varchar_10000 varchar,
    c_binary_255 bytea,
    c_varbinary_10000 bytea,
    c_date date,
    c_time time,
    c_datetime timestamp,
    c_timestamp timestamptz,
    PRIMARY KEY (c_boolean,c_bigint,c_date)
) from mysql_mytest table 'mytest.mysql_all_types';

statement error
create table non_exist ( id INT,
 name STRING,
 description STRING,
 PRIMARY KEY (id)
) from mysql_mytest table 'mytest.non_exist';


statement ok
create table orders_test (
   order_id int,
   order_date timestamp,
   customer_name string,
   price decimal,
   product_id int,
   order_status smallint,
   PRIMARY KEY (order_id)
) from mysql_mytest table 'mytest.orders';

statement error
CREATE TABLE test_my_default_value (
    id int,
    name varchar,
    city varchar DEFAULT 'Beijing',
    PRIMARY KEY (id)
) FROM mysql_mytest TABLE 'mytest.test_my_default_value';

statement ok
CREATE TABLE test_my_default_value (
    id int,
    name varchar,
    city varchar,
    PRIMARY KEY (id)
) FROM mysql_mytest TABLE 'mytest.test_my_default_value';

statement ok
CREATE TABLE test_my_default_value_disorderd (
    city varchar,
    id int,
    PRIMARY KEY (id)
) FROM mysql_mytest TABLE 'mytest.test_my_default_value';

statement ok
SET RW_IMPLICIT_FLUSH=true;

statement ok
INSERT INTO test_my_default_value VALUES (2, 'jack');

query II
select * from test_my_default_value;
----
2 jack Shanghai

statement ok
INSERT INTO test_my_default_value_disorderd (id) VALUES (2);

query II
select * from test_my_default_value_disorderd;
----
Shanghai 2

statement ok
create table kt1 (*) from mysql_source table 'kdb.kt1';

statement ok
create materialized view products_test_cnt as select count(*) as cnt from rw.products_test;

statement ok
create materialized view orders_test_cnt as select count(*) as cnt from orders_test;

system ok
mysql --protocol=tcp -u root mytest -e "INSERT INTO products VALUES(default, 'Juice', '100ml Juice');"

system ok
mysql --protocol=tcp -u root kdb -e "INSERT INTO kt1 VALUES (3, 'ccc'),(4, 'ddd');"

system ok
mysql --protocol=tcp -u root mytest -e "FLUSH LOGS"

# Should not contain records inserted before the table is created (e.g. 'Bob' inserted above)
statement ok
create table orders_no_backfill (
   order_id int,
   order_date timestamp,
   customer_name string,
   price decimal,
   product_id int,
   order_status smallint,
   PRIMARY KEY (order_id)
) with (
  snapshot = 'false'
) from mysql_mytest table 'mytest.orders';

sleep 5s

# table without backfill should not contain historical records
query I
select count(*) from orders_no_backfill
----
0


query IT
select * from kt1 order by id;
----
1 aaa
2 bbb
3 ccc
4 ddd


# check ingestion results
query I
SELECT * from products_test_cnt
----
11

query I
SELECT * from orders_test_cnt
----
4

query ITT
SELECT id,name,description FROM rw.products_test order by id limit 3
----
101 scooter Small 2-wheel scooter
102 car battery 12V car battery
103 12-pack drill bits 12-pack of drill bits with sizes ranging from #40 to #3

query TT
select database_name, table_name from rw.products_test limit 3;
----
mytest products
mytest products
mytest products


# commit_ts of historical records should be '1970-01-01 00:00:00+00:00'
query I
SELECT count(*) as cnt from rw.products_test where commit_ts = '1970-01-01 00:00:00+00:00'
----
9

# commit_ts of new records should greater than '1970-01-01 00:00:00+00:00'
query TTT
SELECT name,description FROM rw.products_test where commit_ts > '1970-01-01 00:00:00+00:00' order by id
----
Milk Milk is a white liquid food
Juice 100ml Juice

query ITTT
SELECT order_id,order_date,customer_name,product_id FROM orders_test order by order_id limit 3
----
10001 2020-07-30 10:08:22 Jark 102
10002 2020-07-30 10:11:09 Sally 105
10003 2020-07-30 12:00:30 Edward 106

query IIIIITTTTTTTTT
SELECT c_boolean, c_bit, c_tinyint, c_smallint, c_mediumint, c_integer, c_bigint, c_decimal, c_float, c_double, c_char_255, c_varchar_10000, c_date, c_time, c_datetime, c_timestamp FROM mysql_all_types order by c_bigint;
----
t t -128 -32767 -8388608 -2147483647 -9223372036854775807 -10 -10000 -10000 a b 1001-01-01 00:00:00 1998-01-01 00:00:00 1970-01-01 00:00:01+00:00
f f NULL NULL -8388608 -2147483647 9223372036854775806 -10 -10000 -10000 c d 1001-01-01 NULL 2000-01-01 00:00:00 NULL

statement ok
create secret pg_pwd with (
  backend = 'meta'
) as '${PGPASSWORD:}';

statement ok
create secret pg_username with (
  backend = 'meta'
) as '${PGUSER:$USER}';

statement ok
create source pg_source with (
 connector = 'postgres-cdc',
 hostname = '${PGHOST:localhost}',
 port = '${PGPORT:5432}',
 username = secret pg_username,
 password = secret pg_pwd,
 database.name = '${PGDATABASE:postgres}',
 slot.name = 'pg_slot'
);

# test postgres backfill data types
statement ok
CREATE TABLE IF NOT EXISTS postgres_all_types(
 c_boolean boolean,
 c_smallint smallint,
 c_integer integer,
 c_bigint bigint,
 c_decimal decimal,
 c_real real,
 c_double_precision double precision,
 c_varchar varchar,
 c_bytea bytea,
 c_date date,
 c_time time,
 c_timestamp timestamp,
 c_timestamptz timestamptz,
 c_interval interval,
 c_jsonb jsonb,
 c_uuid varchar,
 c_enum varchar,
 c_boolean_array boolean[],
 c_smallint_array smallint[],
 c_integer_array integer[],
 c_bigint_array bigint[],
 c_decimal_array decimal[],
 c_real_array real[],
 c_double_precision_array double precision[],
 c_varchar_array varchar[],
 c_bytea_array bytea[],
 c_date_array date[],
 c_time_array time[],
 c_timestamp_array timestamp[],
 c_timestamptz_array timestamptz[],
 c_interval_array interval[],
 c_jsonb_array jsonb[],
 c_uuid_array varchar[],
 c_enum_array varchar[],
 PRIMARY KEY (c_boolean,c_bigint,c_date)
) from pg_source table 'public.postgres_all_types';

statement error The upstream table name must contain schema name prefix*
CREATE TABLE person_new (
    id int PRIMARY KEY,
    name varchar,
    email_address varchar,
    credit_card varchar,
    city varchar
) FROM pg_source TABLE 'person';

statement ok
CREATE TABLE upper_orders_shared (
    id int PRIMARY KEY,
    name varchar
) FROM pg_source TABLE 'public.Orders';

statement ok
CREATE TABLE person_new (
    id int,
    name varchar,
    email_address varchar,
    credit_card varchar,
    city varchar,
    PRIMARY KEY (id)
) INCLUDE TIMESTAMP AS commit_ts
INCLUDE DATABASE_NAME as database_name
INCLUDE SCHEMA_NAME as schema_name
INCLUDE TABLE_NAME as table_name
FROM pg_source TABLE 'public.person';

statement ok
CREATE TABLE partitioned_timestamp_table_shared(
    c_int int,
    c_boolean boolean,
    c_timestamp timestamp,
    PRIMARY KEY (c_int, c_timestamp)
) from pg_source table 'public.partitioned_timestamp_table';

statement error The ancestor or descendant partition 'partitioned_timestamp_table' of the table partition 'partitioned_timestamp_table_2023' is already covered in the publication 'rw_publication'.
CREATE TABLE partitioned_timestamp_table_2023_shared(
    c_int int,
    c_boolean boolean,
    c_timestamp timestamp,
    PRIMARY KEY (c_int, c_timestamp)
) from pg_source table 'public.partitioned_timestamp_table_2023';

statement ok
CREATE MATERIALIZED VIEW person_new_cnt AS SELECT COUNT(*) AS cnt FROM person_new;

sleep 3s

query TTTTTTT
SELECT c_boolean,c_date,c_time,c_timestamp,c_jsonb,c_smallint_array,c_timestamp_array,c_uuid FROM postgres_all_types where c_bigint=-9223372036854775807
----
f 0001-01-01 00:00:00 2001-01-01 00:00:00 {} {-32767} {"2001-01-01 00:00:00"} bb488f9b-330d-4012-b849-12adeb49e57e


# postgres streaming test
system ok
psql -c "
INSERT INTO person VALUES (1100, 'noris', 'ypl@qbxfg.com', '1864 2539', 'enne');
INSERT INTO person VALUES (1101, 'white', 'myc@xpmpe.com', '8157 6974', 'se');
INSERT INTO person VALUES (1102, 'spencer', 'wip@dkaap.com', '9481 6270', 'angeles');
"

sleep 3s

# 3 history, 3 new rows
query I
SELECT * from person_new_cnt
----
6

query TTT
SELECT database_name,schema_name,table_name from person_new limit 3;
----
cdc_test public person
cdc_test public person
cdc_test public person


query ITTTT
SELECT id,name,email_address,credit_card,city from person_new order by id;
----
1000 vicky noris yplkvgz@qbxfg.com 7878 5821 1864 2539 cheyenne
1001 peter white myckhsp@xpmpe.com 1781 2313 8157 6974 boise
1002 sarah spencer wipvdbm@dkaap.com 3453 4987 9481 6270 los angeles
1100 noris ypl@qbxfg.com 1864 2539 enne
1101 white myc@xpmpe.com 8157 6974 se
1102 spencer wip@dkaap.com 9481 6270 angeles

# historical data
query ITTTT
SELECT id,name,email_address,credit_card,city from person_new where commit_ts = '1970-01-01 00:00:00+00:00' order by id;
----
1000 vicky noris yplkvgz@qbxfg.com 7878 5821 1864 2539 cheyenne
1001 peter white myckhsp@xpmpe.com 1781 2313 8157 6974 boise
1002 sarah spencer wipvdbm@dkaap.com 3453 4987 9481 6270 los angeles

# incremental data
query ITTTT
SELECT id,name,email_address,credit_card,city from person_new where commit_ts > '1970-01-01 00:00:00+00:00' order by id;
----
1100 noris ypl@qbxfg.com 1864 2539 enne
1101 white myc@xpmpe.com 8157 6974 se
1102 spencer wip@dkaap.com 9481 6270 angeles

statement ok
CREATE TABLE numeric_to_rw_int256_shared (
    id int,
    num rw_int256,
    PRIMARY KEY (id)
) FROM pg_source TABLE 'public.numeric_table';

statement ok
CREATE TABLE numeric_to_varchar_shared (
    id int,
    num varchar,
    PRIMARY KEY (id)
) FROM pg_source TABLE 'public.numeric_table';

statement ok
CREATE TABLE numeric_to_numeric_shared (
    id int,
    num numeric,
    PRIMARY KEY (id)
) FROM pg_source TABLE 'public.numeric_table';

statement ok
CREATE TABLE numeric_list_to_rw_int256_list_shared (
    id int,
    num rw_int256[],
    PRIMARY KEY (id)
) FROM pg_source TABLE 'public.numeric_list';

statement ok
CREATE TABLE numeric_list_to_varchar_list_shared (
    id int,
    num varchar[],
    PRIMARY KEY (id)
) FROM pg_source TABLE 'public.numeric_list';

statement ok
CREATE TABLE numeric_list_to_numeric_list_shared (
    id int,
    num numeric[],
    PRIMARY KEY (id)
) FROM pg_source TABLE 'public.numeric_list';

statement ok
CREATE TABLE enum_to_varchar_shared (
    id int,
    current_mood varchar,
    PRIMARY KEY (id)
) FROM pg_source TABLE 'public.enum_table';


statement ok
CREATE TABLE list_with_null_shared (
    id int,
    my_int int[],
    my_num varchar[],
    my_num_1 numeric[],
    my_num_2 rw_int256[],
    my_mood varchar[],
    my_uuid varchar[],
    my_bytea bytea[],
    PRIMARY KEY (id)
) FROM pg_source TABLE 'public.list_with_null';

system ok
psql -c "
insert into numeric_table values(102, 57896044618658097711785492504343953926634992332820282019728792003956564819967);
--- 2^255
insert into numeric_table values(103, 57896044618658097711785492504343953926634992332820282019728792003956564819968);
--- 2^256
insert into numeric_table values(104, 115792089237316195423570985008687907853269984665640564039457584007913129639936);
insert into numeric_table values(105, 115792089237316195423570985008687907853269984665640564039457584007913129639936.555555);
insert into numeric_table values(106, 'NaN'::numeric);
insert into numeric_table values(107, 'Infinity'::numeric);
INSERT INTO enum_table VALUES (2, 'ok');
insert into numeric_list values(3, '{3.14, 6, 57896044618658097711785492504343953926634992332820282019728792003956564819967, 57896044618658097711785492504343953926634992332820282019728792003956564819968, 115792089237316195423570985008687907853269984665640564039457584007913129639936.555555}');
INSERT INTO numeric_list values(4, '{nan, infinity, 524596}');
"

sleep 3s

query II
select * from numeric_to_varchar_shared order by id;
----
1   3.14
2   57896044618658097711785492504343953926634992332820282019728792003956564819967
3   57896044618658097711785492504343953926634992332820282019728792003956564819968
4   115792089237316195423570985008687907853269984665640564039457584007913129639936
5   115792089237316195423570985008687907853269984665640564039457584007913129639936.555555
6   NAN
7   POSITIVE_INFINITY
102 57896044618658097711785492504343953926634992332820282019728792003956564819967
103 57896044618658097711785492504343953926634992332820282019728792003956564819968
104 115792089237316195423570985008687907853269984665640564039457584007913129639936
105 115792089237316195423570985008687907853269984665640564039457584007913129639936.555555
106 NAN
107 POSITIVE_INFINITY

# The invalid data for rw_int256 is converted to NULL
query II
select * from numeric_to_rw_int256_shared order by id;
----
1   NULL
2   57896044618658097711785492504343953926634992332820282019728792003956564819967
3   NULL
4   NULL
5   NULL
6   NULL
7   NULL
102 57896044618658097711785492504343953926634992332820282019728792003956564819967
103 NULL
104 NULL
105 NULL
106 NULL
107 NULL

query II
select * from numeric_to_numeric_shared order by id;
----
1   3.14
2   NULL
3   NULL
4   NULL
5   NULL
6   NaN
7   Infinity
102 NULL
103 NULL
104 NULL
105 NULL
106 NaN
107 Infinity

system ok
psql -c "
DELETE FROM numeric_table WHERE id IN (102, 103, 104, 105, 106, 107);
"

query II
select * from numeric_list_to_varchar_list_shared order by id;
----
1 {3.14,6,57896044618658097711785492504343953926634992332820282019728792003956564819967,57896044618658097711785492504343953926634992332820282019728792003956564819968,115792089237316195423570985008687907853269984665640564039457584007913129639936.555555}
2 NULL
3 {3.14,6,57896044618658097711785492504343953926634992332820282019728792003956564819967,57896044618658097711785492504343953926634992332820282019728792003956564819968,115792089237316195423570985008687907853269984665640564039457584007913129639936.555555}
4 NULL

query II
select * from numeric_list_to_rw_int256_list_shared order by id;
----
1 NULL
2 NULL
3 NULL
4 NULL

query II
select * from numeric_list_to_numeric_list_shared order by id;
----
1 NULL
2 NULL
3 NULL
4 NULL

query II
select * from enum_to_varchar_shared order by id;
----
1 happy
2 ok

query II
select * from upper_orders_shared order by id;
----
1 happy

statement ok
CREATE TABLE test_pg_default_value (
    id int,
    name varchar,
    city varchar,
    PRIMARY KEY (id)
) FROM pg_source TABLE 'public.test_default_value';

statement ok
CREATE TABLE test_pg_default_value_disorderd (
    city varchar,
    id int,
    PRIMARY KEY (id)
) FROM pg_source TABLE 'public.test_default_value';

statement ok
SET RW_IMPLICIT_FLUSH=true;

statement ok
INSERT INTO test_pg_default_value VALUES (1, 'noris');

query II
select * from test_pg_default_value;
----
1 noris Shanghai

statement ok
INSERT INTO test_pg_default_value_disorderd (id) VALUES (1);

query II
select * from test_pg_default_value_disorderd;
----
Shanghai 1

### BEGIN reset the password to the original one
onlyif can-use-recover
statement ok
alter secret mysql_pwd as '${MYSQL_PWD:}';

onlyif can-use-recover
system ok
mysql --protocol=tcp -u root -e "ALTER USER 'rwcdc'@'%' IDENTIFIED BY '${MYSQL_PWD:}';"

onlyif can-use-recover
statement ok
recover;
### END