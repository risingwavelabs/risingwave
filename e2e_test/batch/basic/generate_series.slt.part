statement ok
SET RW_IMPLICIT_FLUSH TO true;

query I
select generate_series from generate_series('2008-03-01 00:00:00'::TIMESTAMP,'2008-03-04 12:00:00'::TIMESTAMP, interval '12' hour)
----
2008-03-01 00:00:00
2008-03-01 12:00:00
2008-03-02 00:00:00
2008-03-02 12:00:00
2008-03-03 00:00:00
2008-03-03 12:00:00
2008-03-04 00:00:00
2008-03-04 12:00:00

query I
select * from generate_series(timestamp '2020-01-01 01:02:03', timestamp '2021-01-01 03:04:05', interval '1' month);
----
2020-01-01 01:02:03
2020-02-01 01:02:03
2020-03-01 01:02:03
2020-04-01 01:02:03
2020-05-01 01:02:03
2020-06-01 01:02:03
2020-07-01 01:02:03
2020-08-01 01:02:03
2020-09-01 01:02:03
2020-10-01 01:02:03
2020-11-01 01:02:03
2020-12-01 01:02:03
2021-01-01 01:02:03

query I
select * from generate_series(timestamp '2021-01-01 03:04:05', timestamp '2020-01-01 01:02:03', interval '1' month-interval '60' day);
----
2021-01-01 03:04:05
2020-12-03 03:04:05
2020-11-04 03:04:05
2020-10-05 03:04:05
2020-09-06 03:04:05
2020-08-07 03:04:05
2020-07-09 03:04:05
2020-06-10 03:04:05
2020-05-11 03:04:05
2020-04-12 03:04:05
2020-03-13 03:04:05
2020-02-13 03:04:05
2020-01-13 03:04:05

query I
SELECT * FROM generate_series('1'::INT,'3'::INT)
----
1
2
3

query I
SELECT * FROM generate_series('2'::INT,'10'::INT,'2'::INT)
----
2
4
6
8
10

query I
SELECT * FROM generate_series('2'::INT + '2'::INT,'10'::INT,'2'::INT);
----
4
6
8
10

query I
SELECT generate_series FROM generate_series('2'::INT + '2'::INT,'10'::INT,'2'::INT);
----
4
6
8
10

query I
SELECT * FROM generate_series('10'::INT,'2'::INT,'-2'::INT);
----
10
8
6
4
2

statement error step size cannot equal zero
SELECT * FROM generate_series('2'::INT,'10'::INT,'0'::INT);

query I
SELECT * FROM generate_series('2'::INT,'10'::INT,'-2'::INT);
----

query I
SELECT * FROM generate_series(1, 100000000, 1) where 1=0;
----

query I
SELECT * FROM generate_series('10000000000'::BIGINT,'10000000002'::BIGINT)
----
10000000000
10000000001
10000000002

query I
SELECT * FROM generate_series('10000000000'::BIGINT,'10000000002'::BIGINT, 2::BIGINT)
----
10000000000
10000000002

query R
SELECT * FROM generate_series(0.1::numeric, 2.1::numeric)
----
0.1
1.1
2.1

query R
SELECT * FROM generate_series(0.1::numeric, 2.1::numeric, 0.5::numeric)
----
0.1
0.6
1.1
1.6
2.1

statement error start value cannot be infinity
SELECT * FROM generate_series('infinity'::numeric,10::numeric);

statement error stop value cannot be infinity
SELECT * FROM generate_series(0::numeric,'-infinity'::numeric);

statement error stop value cannot be NaN
SELECT * FROM generate_series(0::numeric,'nan'::numeric);

statement error start value cannot be infinity
SELECT * FROM generate_series('infinity'::numeric,10::numeric,0::numeric);

statement error stop value cannot be infinity
SELECT * FROM generate_series(0::numeric,'-infinity'::numeric,0::numeric);

statement error step value cannot be NaN
SELECT * FROM generate_series(0::numeric,10::numeric,'nan'::numeric);

statement error start value cannot be infinity
SELECT * FROM generate_series('-infinity'::numeric,'infinity'::numeric,'nan'::numeric);

statement ok
set timezone = 'PST8PDT';

query T
select * from generate_series(
  '2024-06-21 17:36:00'::timestamptz,
  '2024-06-21 22:36:00',
  '1 hour'
);
----
2024-06-21 17:36:00-07:00
2024-06-21 18:36:00-07:00
2024-06-21 19:36:00-07:00
2024-06-21 20:36:00-07:00
2024-06-21 21:36:00-07:00
2024-06-21 22:36:00-07:00

query T
select * from generate_series(
  '2024-06-21 17:36:00',
  '2024-06-21 22:36:00',
  interval '1 hour'
);
----
2024-06-21 17:36:00-07:00
2024-06-21 18:36:00-07:00
2024-06-21 19:36:00-07:00
2024-06-21 20:36:00-07:00
2024-06-21 21:36:00-07:00
2024-06-21 22:36:00-07:00

query TTTIII
with cfg as (
  select 1705348800 as start, 1734292800 as stop
), t as (
  select
    generate_series(to_timestamp(start)::timestamp, to_timestamp(stop)::timestamp, interval '1' month) as naive,
    generate_series(to_timestamp(start), to_timestamp(stop), interval '1' month) as pst8pdt,
    generate_series(to_timestamp(start), to_timestamp(stop), interval '1' month, 'UTC') as utc
  from cfg
) select
  naive, pst8pdt, utc,
  extract(epoch from naive)::int as naive_epoch,
  extract(epoch from pst8pdt)::int as pst8pdt_epoch,
  extract(epoch from utc)::int as utc_epoch
from t;
----
2024-01-15 12:00:00 2024-01-15 12:00:00-08:00 2024-01-15 12:00:00-08:00 1705320000 1705348800 1705348800
2024-02-15 12:00:00 2024-02-15 12:00:00-08:00 2024-02-15 12:00:00-08:00 1707998400 1708027200 1708027200
2024-03-15 12:00:00 2024-03-15 12:00:00-07:00 2024-03-15 13:00:00-07:00 1710504000 1710529200 1710532800
2024-04-15 12:00:00 2024-04-15 12:00:00-07:00 2024-04-15 13:00:00-07:00 1713182400 1713207600 1713211200
2024-05-15 12:00:00 2024-05-15 12:00:00-07:00 2024-05-15 13:00:00-07:00 1715774400 1715799600 1715803200
2024-06-15 12:00:00 2024-06-15 12:00:00-07:00 2024-06-15 13:00:00-07:00 1718452800 1718478000 1718481600
2024-07-15 12:00:00 2024-07-15 12:00:00-07:00 2024-07-15 13:00:00-07:00 1721044800 1721070000 1721073600
2024-08-15 12:00:00 2024-08-15 12:00:00-07:00 2024-08-15 13:00:00-07:00 1723723200 1723748400 1723752000
2024-09-15 12:00:00 2024-09-15 12:00:00-07:00 2024-09-15 13:00:00-07:00 1726401600 1726426800 1726430400
2024-10-15 12:00:00 2024-10-15 12:00:00-07:00 2024-10-15 13:00:00-07:00 1728993600 1729018800 1729022400
2024-11-15 12:00:00 2024-11-15 12:00:00-08:00 2024-11-15 12:00:00-08:00 1731672000 1731700800 1731700800
2024-12-15 12:00:00 2024-12-15 12:00:00-08:00 2024-12-15 12:00:00-08:00 1734264000 1734292800 1734292800

statement ok
set timezone = 'UTC';
