# PGP encryption/decryption functions with options tests
# Based on PostgreSQL pgcrypto tests

# Test pgp_sym_encrypt with cipher-algo option
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('hello world'::bytea, 'secret', 'cipher-algo=aes256'), 'secret');
----
\x68656c6c6f20776f726c64

# Test pgp_sym_encrypt with multiple options
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('test data'::bytea, 'password', 'cipher-algo=aes192,armor=false'), 'password');
----
\x746573742064617461

# Test pgp_sym_encrypt with compress-algo=0 (no compression)
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('uncompressed data'::bytea, 'secret', 'compress-algo=0'), 'secret');
----
\x756e636f6d707265737365642064617461

# Test pgp_sym_encrypt with compress-algo=1 (ZIP compression)
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('zip compressed data'::bytea, 'secret', 'compress-algo=1'), 'secret');
----
\x7a697020636f6d707265737365642064617461

# Test pgp_sym_encrypt with compress-algo=2 (ZLIB compression)
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('zlib compressed data'::bytea, 'secret', 'compress-algo=2'), 'secret');
----
\x7a6c696220636f6d707265737365642064617461

# Test pgp_sym_encrypt with compress-algo=3 (BZIP2 compression)
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('bzip2 compressed data'::bytea, 'secret', 'compress-algo=3'), 'secret');
----
\x627a69703220636f6d707265737365642064617461

# Test pgp_sym_encrypt with s2k-count option
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('s2k test'::bytea, 'password', 's2k-count=5000'), 'password');
----
\x73326b2074657374

# Test pgp_sym_encrypt with s2k-mode option
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('s2k mode test'::bytea, 'secret', 's2k-mode=3'), 'secret');
----
\x73326b206d6f64652074657374

# Test pgp_sym_encrypt with integrity-protect option
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('integrity test'::bytea, 'password', 'integrity-protect=true'), 'password');
----
\x696e746567726974792074657374

# Test pgp_sym_encrypt with convert-crlf option
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('line ending test'::bytea, 'secret', 'convert-crlf=false'), 'secret');
----
\x6c696e6520656e64696e672074657374

# Test pgp_sym_encrypt with unicode-mode option
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('unicode test'::bytea, 'password', 'unicode-mode=0'), 'password');
----
\x756e69636f64652074657374

# Test pgp_sym_encrypt with disable-mdc option
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('mdc test'::bytea, 'secret', 'disable-mdc=false'), 'secret');
----
\x6d64632074657374

# Test pgp_sym_encrypt with s2k-digest-algo option
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('digest test'::bytea, 'password', 's2k-digest-algo=sha1'), 'password');
----
\x6469676573742074657374

# Test pgp_sym_encrypt with s2k-cipher-algo option
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('cipher test'::bytea, 'secret', 's2k-cipher-algo=aes128'), 'secret');
----
\x6369706865722074657374

# Test pgp_sym_encrypt with invalid option should fail
statement error
SELECT pgp_sym_encrypt('data'::bytea, 'password', 'invalid-option=value');

# Test pgp_sym_encrypt with invalid compress-algo should fail
statement error
SELECT pgp_sym_encrypt('data'::bytea, 'password', 'compress-algo=5');

# Test pgp_sym_encrypt with compress-algo=none (should work like compress-algo=0)
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('none compression'::bytea, 'secret', 'compress-algo=none'), 'secret');
----
\x6e6f6e6520636f6d7072657373696f6e

# Test pgp_sym_encrypt with compress-algo=zip (should work like compress-algo=1)
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('zip compression'::bytea, 'secret', 'compress-algo=zip'), 'secret');
----
\x7a697020636f6d7072657373696f6e

# Test pgp_sym_encrypt with compress-algo=zlib (should work like compress-algo=2)
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('zlib compression'::bytea, 'secret', 'compress-algo=zlib'), 'secret');
----
\x7a6c696220636f6d7072657373696f6e

# Test pgp_sym_encrypt with compress-algo=bzip2 (should work like compress-algo=3)
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('bzip2 compression'::bytea, 'secret', 'compress-algo=bzip2'), 'secret');
----
\x627a69703220636f6d7072657373696f6e

# Test pgp_sym_encrypt with invalid compress-algo name should fail
statement error
SELECT pgp_sym_encrypt('data'::bytea, 'password', 'compress-algo=invalid');

# Test pgp_sym_encrypt with armor=true
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('armored data'::bytea, 'secret', 'armor=true'), 'secret');
----
\x61726d6f7265642064617461

# Test pgp_sym_encrypt with armor=false
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('unarmored data'::bytea, 'secret', 'armor=false'), 'secret');
----
\x756e61726d6f7265642064617461

# Test pgp_sym_encrypt with armor=1 (should work like armor=true)
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('armor test'::bytea, 'secret', 'armor=1'), 'secret');
----
\x61726d6f722074657374

# Test pgp_sym_encrypt with armor=0 (should work like armor=false)
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('no armor test'::bytea, 'secret', 'armor=0'), 'secret');
----
\x6e6f2061726d6f722074657374

# Test pgp_sym_encrypt with invalid armor value should fail
statement error
SELECT pgp_sym_encrypt('data'::bytea, 'password', 'armor=invalid');

# Test pgp_sym_encrypt with invalid s2k-count should fail
statement error
SELECT pgp_sym_encrypt('data'::bytea, 'password', 's2k-count=100');

# Test pgp_sym_encrypt with invalid s2k-mode should fail
statement error
SELECT pgp_sym_encrypt('data'::bytea, 'password', 's2k-mode=2');

# Test pgp_sym_encrypt with invalid cipher-algo should fail
statement error
SELECT pgp_sym_encrypt('data'::bytea, 'password', 'cipher-algo=invalid');

# Test pgp_sym_decrypt with options
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('decrypt test'::bytea, 'secret', 'cipher-algo=aes256'), 'secret', 'cipher-algo=aes256');
----
\x646563727970742074657374

# Test pgp_sym_decrypt with wrong options should still work (options are mainly for encryption)
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('compatibility test'::bytea, 'password', 'cipher-algo=aes192'), 'password', 'cipher-algo=aes256');
----
\x636f6d7061746962696c6974792074657374

# Test pgp_sym_encrypt with empty password (should work in PostgreSQL)
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('data'::bytea, '', 'cipher-algo=aes256'), '');
----
\x64617461

# Test pgp_sym_decrypt with empty message (should work in PostgreSQL)
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt(''::bytea, 'secret'), 'secret');
----
\x

# Test pgp_pub_encrypt with empty key should fail
statement error
SELECT pgp_pub_encrypt('data'::bytea, ''::bytea);

# Test pgp_pub_decrypt with empty key should fail
statement error
SELECT pgp_pub_decrypt(pgp_sym_encrypt('data'::bytea, 'secret'), ''::bytea);

# Test pgp_sym_encrypt with very long password
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('long password test'::bytea, repeat('a', 1000)), repeat('a', 1000));
----
\x6c6f6e672070617373776f72642074657374

# Test pgp_sym_encrypt with very long data
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt(repeat('x', 10000)::bytea, 'secret'), 'secret') = repeat('x', 10000)::bytea;
----
t

# Test pgp_sym_encrypt with special characters in password
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('special chars'::bytea, 'p@ssw0rd!#$%^&*()'), 'p@ssw0rd!#$%^&*()');
----
\x7370656369616c206368617273

# Test pgp_sym_encrypt with unicode characters in password
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('unicode test'::bytea, 'пароль密码'), 'пароль密码');
----
\x756e69636f64652074657374

# Test pgp_sym_encrypt with binary data containing null bytes
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('\x000102030405'::bytea, 'secret'), 'secret');
----
\x000102030405

# Test pgp_sym_encrypt with all supported cipher algorithms
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('aes128 test'::bytea, 'secret', 'cipher-algo=aes128'), 'secret');
----
\x6165733132382074657374

query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('aes192 test'::bytea, 'secret', 'cipher-algo=aes192'), 'secret');
----
\x6165733139322074657374

query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('aes256 test'::bytea, 'secret', 'cipher-algo=aes256'), 'secret');
----
\x6165733235362074657374

# Note: 3DES is not supported by current security policy

# Test pgp_sym_encrypt with all supported s2k modes
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('s2k mode 0'::bytea, 'secret', 's2k-mode=0'), 'secret');
----
\x73326b206d6f64652030

query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('s2k mode 1'::bytea, 'secret', 's2k-mode=1'), 'secret');
----
\x73326b206d6f64652031

query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('s2k mode 3'::bytea, 'secret', 's2k-mode=3'), 'secret');
----
\x73326b206d6f64652033

# Test pgp_sym_encrypt with all supported s2k digest algorithms
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('sha1 test'::bytea, 'secret', 's2k-digest-algo=sha1'), 'secret');
----
\x736861312074657374

query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('sha256 test'::bytea, 'secret', 's2k-digest-algo=sha256'), 'secret');
----
\x7368613235362074657374

query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('sha512 test'::bytea, 'secret', 's2k-digest-algo=sha512'), 'secret');
----
\x7368613531322074657374

# Test pgp_sym_encrypt with all supported integrity algorithms
query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('sha1 integrity'::bytea, 'secret', 'integrity-algo=sha1'), 'secret');
----
\x7368613120696e74656772697479

query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('sha256 integrity'::bytea, 'secret', 'integrity-algo=sha256'), 'secret');
----
\x73686132353620696e74656772697479

query T
SELECT pgp_sym_decrypt(pgp_sym_encrypt('sha512 integrity'::bytea, 'secret', 'integrity-algo=sha512'), 'secret');
----
\x73686135313220696e74656772697479
