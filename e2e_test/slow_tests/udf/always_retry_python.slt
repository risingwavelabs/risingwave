system ok
python3 e2e_test/udf/remote_python/test.py &

# wait for server to start
sleep 10s

statement ok
CREATE FUNCTION sleep_always_retry(INT) RETURNS INT AS 'sleep' USING LINK 'http://localhost:8815' WITH ( always_retry_on_network_error = true );

statement ok
CREATE FUNCTION sleep_no_retry(INT) RETURNS INT AS 'sleep' USING LINK 'http://localhost:8815';

# Create a table with 30 records
statement ok
CREATE TABLE t (v1 int);

statement ok
INSERT INTO t select 0 from generate_series(1, 60);

statement ok
flush;

statement ok
SET BACKFILL_RATE_LIMIT=1;

statement ok
SET BACKGROUND_DDL=true;

statement ok
CREATE MATERIALIZED VIEW mv_no_retry AS SELECT sleep_no_retry(v1) as s1 from t;

# Create a Materialized View
statement ok
CREATE MATERIALIZED VIEW mv_always_retry AS SELECT sleep_always_retry(v1) as s1 from t;

# Immediately kill the server, sleep
system ok
pkill -9 -f e2e_test/udf/remote_python/test.py

# wait, test always retry
sleep 60s

# Restart the server
system ok
python3 e2e_test/udf/remote_python/test.py &

# Wait for materialized view to be complete
statement ok
wait;

query I
SELECT count(*) FROM mv_always_retry where s1 is NULL;
----
0

# FIXME(kwannoel): Somehow this is flaky..
# query B
# SELECT count(*) > 0 FROM mv_no_retry where s1 is NULL;
# ----
# t

statement ok
SET BACKFILL_RATE_LIMIT TO DEFAULT;

statement ok
SET BACKGROUND_DDL=false;

# close the server
system ok
pkill -f e2e_test/udf/remote_python/test.py

statement ok
DROP TABLE t CASCADE;

statement ok
DROP FUNCTION sleep_always_retry;

statement ok
DROP FUNCTION sleep_no_retry;
