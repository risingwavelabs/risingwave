statement ok
set rw_implicit_flush=true;

statement ok
set sink_decouple = false;

statement ok
create table t_kafka (
    id integer primary key,
    v_varchar varchar,
    v_smallint smallint,
    v_integer integer,
    v_bigint bigint,
    v_float real,
    v_double double precision,
    v_timestamp timestamp,
    v_bytea bytea,
    v_interval interval,
    v_date date,
    v_time time,
    v_timestamptz timestamptz,
    v_jsonb jsonb
);

statement error cannot connect to kafka broker
create sink sink_non_exist_broker from t_kafka with (
    connector = 'kafka',
    properties.bootstrap.server = 'make no sense',
    topic = 'test-rw-sink-append-only',
    force_append_only = 'true',
    type = 'append-only',
);

# Connection test clean-up finished

statement error sink cannot be append-only
create sink si_kafka_append_only from t_kafka with (
    connector = 'kafka',
    properties.bootstrap.server = 'message_queue:29092',
    topic = 'test-rw-sink-append-only',
    type = 'append-only',
);

statement ok
create sink si_kafka_append_only from t_kafka with (
    connector = 'kafka',
    properties.bootstrap.server = 'message_queue:29092',
    topic = 'test-rw-sink-append-only',
    type = 'append-only',
    force_append_only = 'true'
);

statement error primary key not defined
create sink si_kafka_upsert from t_kafka with (
    connector = 'kafka',
    properties.bootstrap.server = 'message_queue:29092',
    topic = 'test-rw-sink-upsert',
    type = 'upsert',
);

statement ok
create sink si_kafka_upsert from t_kafka with (
    connector = 'kafka',
    properties.bootstrap.server = 'message_queue:29092',
    topic = 'test-rw-sink-upsert',
    type = 'upsert',
    primary_key = 'id',
);

statement ok
create sink si_kafka_upsert_schema from t_kafka with (
    connector = 'kafka',
    properties.bootstrap.server = 'message_queue:29092',
    topic = 'test-rw-sink-upsert-schema',
    primary_key = 'id',
) format upsert encode json (
    schemas.enable = true
);

statement ok
create sink si_kafka_debezium from t_kafka with (
    connector = 'kafka',
    properties.bootstrap.server = 'message_queue:29092',
    topic = 'test-rw-sink-debezium',
    type = 'debezium',
    primary_key = 'id',
);

statement error primary key not defined
create sink debezium_without_pk from t_kafka with (
    connector = 'kafka',
    properties.bootstrap.server = 'message_queue:29092',
    topic = 'test-rw-sink-debezium',
    type = 'debezium',
);

statement ok
create sink multiple_pk from t_kafka with (
    connector = 'kafka',
    properties.bootstrap.server = 'message_queue:29092',
    topic = 'test-rw-sink-debezium',
    type = 'debezium',
    primary_key = 'id,v_varchar'
);

# throttle option
statement ok
create sink multiple_pk_throttle from t_kafka with (
    connector = 'kafka',
    properties.bootstrap.server = 'message_queue:29092',
    topic = 'test-rw-sink-debezium',
    type = 'debezium',
    primary_key = 'id,v_varchar',
    backfill_rate_limit = 200
);

statement ok
create sink multiple_pk_throttle_1
 as select * from t_kafka
 with (
    connector = 'kafka',
    properties.bootstrap.server = 'message_queue:29092',
    topic = 'test-rw-sink-debezium',
    type = 'debezium',
    primary_key = 'id,v_varchar',
    backfill_rate_limit = 200
);

statement ok
drop sink multiple_pk;

statement ok
drop sink multiple_pk_throttle;

statement ok
drop sink multiple_pk_throttle_1;

statement error Sink primary key column not found: invalid.
create sink invalid_pk_column from t_kafka with (
    connector = 'kafka',
    properties.bootstrap.server = 'message_queue:29092',
    topic = 'test-rw-sink-debezium',
    type = 'debezium',
    primary_key = 'id,invalid'
);

### Test sink with key encode ###

statement error sink key encode unsupported: JSON, only TEXT and BYTES supported
create sink sink_text_error from t_kafka with (
  connector = 'kafka',
  properties.bootstrap.server = 'message_queue:29092',
  topic = 'test-rw-sink-text-key-id',
  primary_key = 'id')
format plain encode json (
  force_append_only='true'
) key encode json ;

statement error KEY ENCODE TEXT expects only one primary key, but got 2
create sink sink_text_error from t_kafka with (
  connector = 'kafka',
  properties.bootstrap.server = 'message_queue:29092',
  topic = 'test-rw-sink-text-key-id',
  primary_key = 'id, v_varchar')
format plain encode json (
  force_append_only='true'
) key encode text ;

statement error
# The key encode is TEXT, but the primary key column v_bytea has type bytea. The key encode TEXT requires the primary key column to be of type varchar, bool, small int, int, or big int.
create sink sink_text_error from t_kafka with (
  connector = 'kafka',
  properties.bootstrap.server = 'message_queue:29092',
  topic = 'test-rw-sink-text-key-id',
  primary_key = 'v_bytea')
format plain encode json (
  force_append_only='true'
) key encode text ;

statement ok
create sink sink_text_id from t_kafka with (
  connector = 'kafka',
  properties.bootstrap.server = 'message_queue:29092',
  topic = 'test-rw-sink-text-key-id',
  primary_key = 'id')
format plain encode json (
  force_append_only='true'
) key encode text ;

query TT
SHOW CREATE SINK sink_text_id;
----
public.sink_text_id CREATE SINK sink_text_id FROM t_kafka WITH (connector = 'kafka', properties.bootstrap.server = 'message_queue:29092', topic = 'test-rw-sink-text-key-id', primary_key = 'id') FORMAT PLAIN ENCODE JSON (force_append_only = 'true') KEY ENCODE TEXT

statement error sink key encode unsupported: JSON, only TEXT and BYTES supported
create sink sink_bytes_error as (
  select int8send(id) as id_bytes, * from t_kafka
) with (
  connector = 'kafka',
  properties.bootstrap.server = 'message_queue:29092',
  topic = 'test-rw-sink-bytes-key-id',
  primary_key = 'id_bytes')
format plain encode json (
  force_append_only='true'
) key encode json;

statement error KEY ENCODE BYTES expects only one primary key, but got 2
create sink sink_bytes_error as (
  select int8send(id) as id_bytes, '\x1234'::bytea as other_bytea, * from t_kafka
) with (
  connector = 'kafka',
  properties.bootstrap.server = 'message_queue:29092',
  topic = 'test-rw-sink-bytes-key-id',
  primary_key = 'id_bytes, other_bytea')
format plain encode json (
  force_append_only='true'
) key encode bytes;

statement error key encode bytes only works with kafka connector, but found kinesis
create sink sink_bytes_json as (
  select int8send(id) as id_bytes, * from t_kafka
) with (
  connector = 'kinesis',
  topic = 'topic',
  properties.bootstrap.server = 'message_queue:29092'
)
format plain encode json (
  force_append_only='true'
) key encode bytes;

statement ok
create sink sink_bytes_json as (
  select int8send(id) as id_bytes, * from t_kafka
) with (
  connector = 'kafka',
  properties.bootstrap.server = 'message_queue:29092',
  topic = 'test-rw-sink-bytes-key-id',
  primary_key = 'id_bytes')
format plain encode json (
  force_append_only='true'
) key encode bytes;

statement ok
create table t_sink_text_id (id int)
include key as rw_key
with (
  connector = 'kafka',
  properties.bootstrap.server = 'message_queue:29092',
  topic = 'test-rw-sink-text-key-id',
) format plain encode json;

statement ok
create table t_sink_bytea_id (id int)
include key as rw_key
with (
  connector = 'kafka',
  properties.bootstrap.server = 'message_queue:29092',
  topic = 'test-rw-sink-bytes-key-id',
) format plain encode json;

#======

statement ok
insert into t_kafka values
    (1, '8DfUFencLe', 31031, 1872, 1872, 26261.416, 23956.39329760601, '2023-04-14 06:27:14.104742', '\x00', '0 second', '0001-01-01', '00:00:01.123456', '0001-01-01 00:00:00.123456'::timestamptz, '{}'),
    (2, 'sIo1XXVeHZ', 22690, 4598, 4598, 27031.225, 31923.077305746086, '2023-04-13 23:44:04.869742', '\x00', '4 hour', '1970-01-01', '00:00:01.123456', '0001-01-01 00:00:00.123456'::timestamptz, '{}'),
    (3, 'LVLAhd1pQv', 5985, 5894, 14894, 2660.2903, 9742.475509566086, '2023-04-13 23:36:51.269742', '\x000000', '3 day', '2000-01-01', '00:00:01.123456', '0001-01-01 00:00:00.123456'::timestamptz, '{}'),
    (4, 'ORjwy3oMNb', 6306, 7406, 24962, 21217.777, 3119.719721891862, '2023-04-14 01:12:07.993742', '\xDEADBEEF', '04:00:00.1234', '1999-12-01', '00:00:01.123456', '0001-01-01 00:00:00.123456'::timestamptz, '{}'),
    (5, 'sSkKswxrYd', 22765, 9253, 9253, 22749.5, 17464.91553421121, '2023-04-14 03:57:22.324742', '\xFEEDBEEF', '0 second', '0001-01-01', '00:01:01.123456', '1970-01-01 01:01:01.123456'::timestamptz, '{}'),
    (6, 'V4y71v4Gip', 4014, 10844, 28842, 5885.368, 11210.458724794062, '2023-04-13 10:42:02.137742', '\xCAFEBABE', '4 hour', '0001-01-01', '00:00:01.123456', '0001-01-01 00:00:00.123456'::timestamptz, '{}'),
    (7, 'YIVLnWxHyf', 10324, 12652, 15914, 3946.7434, 10967.182297153104, '2023-04-14 04:41:03.083742', '\xBABEC0DE', '3 day', '0001-01-01', '01:00:01.123456', '0001-01-01 00:00:00.123456'::timestamptz, '{}');

statement error
create sink si_kafka_without_snapshot as select * from t_kafka with (
    connector = 'kafka',
    properties.bootstrap.server = 'message_queue:29092',
    topic = 'test-rw-sink-without-snapshot',
    type = 'append-only',
    force_append_only = 'true',
    primary_key = 'id',
    snapshot = 'false',
);

statement ok
create sink si_kafka_without_snapshot from t_kafka with (
    connector = 'kafka',
    properties.bootstrap.server = 'message_queue:29092',
    topic = 'test-rw-sink-without-snapshot',
    type = 'append-only',
    force_append_only = 'true',
    primary_key = 'id',
    snapshot = 'false',
);

sleep 2s

query T
select rw_key from t_sink_text_id order by rw_key
----
\x31
\x32
\x33
\x34
\x35
\x36
\x37

query T
select rw_key from t_sink_bytea_id order by rw_key
----
\x0000000000000001
\x0000000000000002
\x0000000000000003
\x0000000000000004
\x0000000000000005
\x0000000000000006
\x0000000000000007


statement ok
insert into t_kafka values
    (8, 'lv7Eq3g8hx', 194, 19036, 28641, 13652.073, 993.408963466774, '2023-04-13 13:52:09.356742', '\xDEADBABE', '04:00:00.1234', '1970-01-01', '00:00:01.123456', '0001-01-01 00:00:00.123456'::timestamptz, '{}'),
    (9, 'nwRq4zejSQ', 10028, 20090, 24837, 20699.559, 11615.276406159757, '2023-04-13 12:40:42.487742', '\xDEADBABE', '05:01:00.123456', '1970-01-01', '00:00:01.123456', '0001-01-01 00:00:00.123456'::timestamptz, '{}'),
    (10, '0oVqRIHqkb', 26951, 20674, 20674, 19387.238, 9042.404483827515, '2023-04-13 16:40:58.888742', '\x00', '05:01:00.1234567', '1970-01-01', '00:00:01.123456', '1970-01-01 00:00:00.123456'::timestamptz, '{}');

statement ok
drop table t_sink_text_id;

statement ok
drop table t_sink_bytea_id;

statement ok
drop sink sink_bytes_json;
