control substitution on

statement ok
SET streaming_use_shared_source TO false;

system ok
rpk topic delete pb_alter_source_test || true; \
(rpk sr subject delete 'pb_alter_source_test-value' && rpk sr subject delete 'pb_alter_source_test-value' --permanent) || true;

system ok
python3 e2e_test/source_inline/kafka/protobuf/pb.py "${RISEDEV_KAFKA_BOOTSTRAP_SERVERS}" "${RISEDEV_SCHEMA_REGISTRY_URL}" "pb_alter_source_test" 20 user

statement ok
CREATE SOURCE src_user
INCLUDE timestamp -- include explicitly here to test a bug found in https://github.com/risingwavelabs/risingwave/pull/17293
WITH (
    ${RISEDEV_KAFKA_WITH_OPTIONS_COMMON},
    topic = 'pb_alter_source_test',
    scan.startup.mode = 'earliest'
)
FORMAT PLAIN ENCODE PROTOBUF(
    schema.registry = '${RISEDEV_SCHEMA_REGISTRY_URL}',
    message = 'test.User'
);

query T
SELECT SUBSTRING(definition, 1, POSITION(' WITH' IN definition) - 1) FROM rw_sources WHERE name = 'src_user';
----
CREATE SOURCE src_user (id INT, name CHARACTER VARYING, address CHARACTER VARYING, city CHARACTER VARYING, gender CHARACTER VARYING, sc STRUCT<file_name CHARACTER VARYING>) INCLUDE timestamp

statement ok
CREATE MATERIALIZED VIEW mv_user AS SELECT * FROM src_user;

statement ok
CREATE TABLE t_user WITH (
    ${RISEDEV_KAFKA_WITH_OPTIONS_COMMON},
    topic = 'pb_alter_source_test',
    scan.startup.mode = 'earliest'
)
FORMAT PLAIN ENCODE PROTOBUF(
    schema.registry = '${RISEDEV_SCHEMA_REGISTRY_URL}',
    message = 'test.User'
);

# age is new field
statement error
SELECT age FROM mv_user;

statement error
SELECT age FROM t_user;

# Push more events with extended fields
system ok
python3 e2e_test/source_inline/kafka/protobuf/pb.py "${RISEDEV_KAFKA_BOOTSTRAP_SERVERS}" "${RISEDEV_SCHEMA_REGISTRY_URL}" "pb_alter_source_test" 5 user_with_more_fields

sleep 5s

# Refresh source schema
statement ok
ALTER SOURCE src_user REFRESH SCHEMA;

query T
SELECT SUBSTRING(definition, 1, POSITION(' WITH' IN definition) - 1) FROM rw_sources WHERE name = 'src_user';
----
CREATE SOURCE src_user (id INT, name CHARACTER VARYING, address CHARACTER VARYING, city CHARACTER VARYING, gender CHARACTER VARYING, sc STRUCT<file_name CHARACTER VARYING>, age INT) INCLUDE timestamp

statement ok
CREATE MATERIALIZED VIEW mv_user_more AS SELECT * FROM src_user;

# Refresh table schema. It consume new data before refresh, so the new fields are NULLs
statement ok
ALTER TABLE t_user REFRESH SCHEMA;

query ????
SELECT COUNT(*), MAX(age), MIN(age), SUM(age) FROM mv_user_more;
----
25	104	0	510

query ????
SELECT COUNT(*), MAX(age), MIN(age), SUM(age) FROM t_user;
----
25	NULL	NULL	NULL

# Push more events with extended fields
system ok
python3 e2e_test/source_inline/kafka/protobuf/pb.py "${RISEDEV_KAFKA_BOOTSTRAP_SERVERS}" "${RISEDEV_SCHEMA_REGISTRY_URL}" "pb_alter_source_test" 5 user_with_more_fields

sleep 5s

query ????
SELECT COUNT(*), MAX(age), MIN(age), SUM(age) FROM t_user;
----
30	104	100	510

statement ok
DROP MATERIALIZED VIEW mv_user_more;

statement ok
DROP TABLE t_user;

statement ok
DROP MATERIALIZED VIEW mv_user;

statement ok
DROP SOURCE src_user;

# Test ALTER SOURCE REFRESH SCHEMA with generated columns
# This tests the fix for the bug where ALTER SOURCE REFRESH SCHEMA fails for sources with generated columns
# Reusing the same topic as the previous test

# Create source with generated column using the same topic
statement ok
CREATE SOURCE src_user_gen (*, t int as id+1)
INCLUDE timestamp
WITH (
    ${RISEDEV_KAFKA_WITH_OPTIONS_COMMON},
    topic = 'pb_alter_source_test',
    scan.startup.mode = 'earliest'
)
FORMAT PLAIN ENCODE PROTOBUF(
    schema.registry = '${RISEDEV_SCHEMA_REGISTRY_URL}',
    message = 'test.User'
);

query T
SELECT SUBSTRING(definition, 1, POSITION(' WITH' IN definition) - 1) FROM rw_sources WHERE name = 'src_user_gen';
----
CREATE SOURCE src_user_gen (id INT, name CHARACTER VARYING, address CHARACTER VARYING, city CHARACTER VARYING, gender CHARACTER VARYING, sc STRUCT<file_name CHARACTER VARYING>, t INT AS id + 1) INCLUDE timestamp

# Test that generated column works
statement ok
CREATE MATERIALIZED VIEW mv_user_gen AS SELECT id, t FROM src_user_gen;

sleep 2s

query II rowsort
SELECT id, t FROM mv_user_gen LIMIT 5;
----
0 1
1 2
2 3
3 4
4 5

# This should work - refresh schema without affecting generated column
# The topic already has the extended schema from the previous test
statement ok
ALTER SOURCE src_user_gen REFRESH SCHEMA;

# Verify the generated column is still there and the new field 'age' is added
query T
SELECT SUBSTRING(definition, 1, POSITION(' WITH' IN definition) - 1) FROM rw_sources WHERE name = 'src_user_gen';
----
CREATE SOURCE src_user_gen (id INT, name CHARACTER VARYING, address CHARACTER VARYING, city CHARACTER VARYING, gender CHARACTER VARYING, sc STRUCT<file_name CHARACTER VARYING>, t INT AS id + 1, age INT) INCLUDE timestamp

# Test that generated column still works after schema refresh
statement ok
CREATE MATERIALIZED VIEW mv_user_gen_after AS SELECT id, t, age FROM src_user_gen;

sleep 2s

# Verify data - generated column should still work correctly
query III
SELECT COUNT(*), MIN(t), MAX(t) FROM mv_user_gen_after WHERE t = id + 1;
----
30 1 20

statement ok
DROP MATERIALIZED VIEW mv_user_gen_after;

statement ok
DROP MATERIALIZED VIEW mv_user_gen;

statement ok
DROP SOURCE src_user_gen;

statement ok
SET streaming_use_shared_source TO true;
