control substitution on

statement ok
SET streaming_use_shared_source TO false;

system ok
rpk topic delete 'glue-sample-my-event'

system ok
rpk topic create 'glue-sample-my-event'

system ok
rpk topic produce -f '%v{hex}\n' 'glue-sample-my-event' <<EOF
03005af405ef11b5444281a2e0563e5a734606666f6f80868dc8ebd98404
EOF

statement ok
ALTER SYSTEM SET license_key TO '';

statement error retry 3 backoff 5s
create source t with (
  connector = 'kafka',
  properties.bootstrap.server='${RISEDEV_KAFKA_BOOTSTRAP_SERVERS}',
  topic = 'glue-sample-my-event')
format plain encode avro (
  aws.glue.schema_arn = 'arn:aws:glue:ap-southeast-1:123456123456:schema/default-registry/MyEvent',
  aws.glue.mock_config = '{
    "by_id": {},
    "arn_to_latest_id": {}
  }');
----
db error: ERROR: Failed to run the query

Caused by these errors (recent errors listed first):
  1: connector error
  2: feature GlueSchemaRegistry is only available for tier Paid and above, while the current tier is Free

Hint: You may want to set a license key with `ALTER SYSTEM SET license_key = '...';` command.


statement ok
ALTER SYSTEM SET license_key TO DEFAULT;

statement ok retry 3 backoff 5s
create source t with (
  connector = 'kafka',
  properties.bootstrap.server='${RISEDEV_KAFKA_BOOTSTRAP_SERVERS}',
  topic = 'glue-sample-my-event')
format plain encode avro (
  aws.glue.schema_arn = 'arn:aws:glue:ap-southeast-1:123456123456:schema/default-registry/MyEvent',
  aws.glue.mock_config = '{
    "by_id":{
      "5af405ef-11b5-4442-81a2-e0563e5a7346": {
        "type": "record",
        "name": "MyEvent",
        "fields": [
          {
            "name": "f1",
            "type": "string"
          },
          {
            "name": "f2",
            "type": {
              "type": "long",
              "logicalType": "timestamp-micros"
            }
          }
        ]
      }
    },
    "arn_to_latest_id":{
      "arn:aws:glue:ap-southeast-1:123456123456:schema/default-registry/MyEvent": "5af405ef-11b5-4442-81a2-e0563e5a7346"
    }
  }');

query TT
select * from t;
----
foo 2006-01-02 22:04:05.123456+00:00

statement ok
alter source t format plain encode avro (
  aws.glue.schema_arn = 'arn:aws:glue:ap-southeast-1:123456123456:schema/default-registry/MyEvent',
  aws.glue.mock_config = '{
    "by_id":{
      "5af405ef-11b5-4442-81a2-e0563e5a7346": {
        "type": "record",
        "name": "MyEvent",
        "fields": [
          {
            "name": "f1",
            "type": "string"
          },
          {
            "name": "f2",
            "type": {
              "type": "long",
              "logicalType": "timestamp-micros"
            }
          }
        ]
      },
      "4516411b-b1e7-4e67-839f-3ef1b8c29280": {
        "type": "record",
        "name": "MyEvent",
        "fields": [
          {
            "name": "f1",
            "type": "string"
          },
          {
            "name": "f2",
            "type": {
              "type": "long",
              "logicalType": "timestamp-micros"
            }
          },
          {
            "name": "f3",
            "type": ["null", "bytes"],
            "default": null
          }
        ]
      }
    },
    "arn_to_latest_id":{
      "arn:aws:glue:ap-southeast-1:123456123456:schema/default-registry/MyEvent": "4516411b-b1e7-4e67-839f-3ef1b8c29280"
    }
  }');

query TTT
select * from t;
----
foo 2006-01-02 22:04:05.123456+00:00 NULL

system ok
rpk topic produce -f '%v{hex}\n' 'glue-sample-my-event' <<EOF
03004516411bb1e74e67839f3ef1b8c292800441428089b5e9a886ee050208deadbeef
EOF

query TTT
select * from t order by 2;
----
foo 2006-01-02 22:04:05.123456+00:00 NULL
AB  2022-04-08 00:00:00.123456+00:00 \xdeadbeef

statement ok
create sink sk as select
  'bar' as f1,
  to_timestamp(1735689600) as f2,
  'a0A'::bytea as f3
with (
  connector = 'kafka',
  properties.bootstrap.server='${RISEDEV_KAFKA_BOOTSTRAP_SERVERS}',
  topic = 'glue-sample-my-event')
format plain encode avro (
  aws.glue.schema_arn = 'arn:aws:glue:ap-southeast-1:123456123456:schema/default-registry/MyEvent',
  aws.glue.mock_config = '{
    "by_id":{
      "5af405ef-11b5-4442-81a2-e0563e5a7346": {
        "type": "record",
        "name": "MyEvent",
        "fields": [
          {
            "name": "f1",
            "type": "string"
          },
          {
            "name": "f2",
            "type": {
              "type": "long",
              "logicalType": "timestamp-micros"
            }
          }
        ]
      },
      "4516411b-b1e7-4e67-839f-3ef1b8c29280": {
        "type": "record",
        "name": "MyEvent",
        "fields": [
          {
            "name": "f1",
            "type": "string"
          },
          {
            "name": "f2",
            "type": {
              "type": "long",
              "logicalType": "timestamp-micros"
            }
          },
          {
            "name": "f3",
            "type": ["null", "bytes"],
            "default": null
          }
        ]
      }
    },
    "arn_to_latest_id":{
      "arn:aws:glue:ap-southeast-1:123456123456:schema/default-registry/MyEvent": "4516411b-b1e7-4e67-839f-3ef1b8c29280"
    }
  }');

sleep 1s

query TTT
select * from t order by 2;
----
foo 2006-01-02 22:04:05.123456+00:00 NULL
AB  2022-04-08 00:00:00.123456+00:00 \xdeadbeef
bar 2025-01-01 00:00:00+00:00        \x613041

statement ok
drop sink sk;

statement ok
drop source t;

system ok
rpk topic delete 'glue-sample-my-event'

statement ok
SET streaming_use_shared_source TO true;
