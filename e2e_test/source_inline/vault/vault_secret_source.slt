# Test for HashiCorp Vault secret backend integration with sources

# Create a Vault secret for database password
statement ok
CREATE SECRET vault_db_password
WITH (
  backend = 'hashicorp_vault',
  addr = 'http://vault-server:8200',
  path = 'secret/data/myapp/db',
  field = 'password',
  auth_method = 'token',
  auth_token = 'root-token'
) AS NULL;

# Create a regular meta secret for username (to test mixed secret backends)
statement ok
CREATE SECRET db_username AS 'testuser';

# Verify secrets are created
query T
SELECT name FROM rw_secrets ORDER BY name;
----
db_username
vault_db_password

# Test that we can create a table that would use these secrets
# Note: This doesn't actually connect since the credentials are test values,
# but it validates that the syntax and secret resolution works
statement ok
CREATE TABLE test_table (
  id int,
  name varchar
) WITH (
  connector = 'postgres',
  hostname = 'localhost',
  port = '5432',
  username = SECRET db_username,
  password = SECRET vault_db_password,
  database.name = 'test'
);

# Show the table was created successfully
query T
SELECT table_name FROM information_schema.tables WHERE table_name = 'test_table';
----
test_table

# Clean up
statement ok
DROP TABLE test_table;

statement ok
DROP SECRET vault_db_password;

statement ok
DROP SECRET db_username;

# Verify secrets are removed
query T
SELECT name FROM rw_secrets ORDER BY name;
----